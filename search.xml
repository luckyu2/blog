<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【转载】CDN加速原理</title>
      <link href="2021/01/11/cdn/"/>
      <url>2021/01/11/cdn/</url>
      
        <content type="html"><![CDATA[<h1 id="CDN加速原理"><a href="#CDN加速原理" class="headerlink" title="CDN加速原理"></a>CDN加速原理</h1><h4 id="一、什么是-CDN"><a href="#一、什么是-CDN" class="headerlink" title="一、什么是 CDN"></a>一、什么是 CDN</h4><blockquote><p>CDN的全称是(Content Delivery Network)，即内容分发网络。其目的是通过在现有的Internet中增加一层新的CACHE(缓存)层，将网站的内容发布到最接近用户的网络”边缘“的节点，使用户可以就近取得所需的内容，提高用户访问网站的响应速度。从技术上全面解决由于网络带宽小、用户访问量大、网点分布不均等原因，提高用户访问网站的响应速度。<br>简单的说，CDN的工作原理就是将您源站的资源缓存到位于全球各地的CDN节点上，用户请求资源时，就近返回节点上缓存的资源，而不需要每个用户的请求都回您的源站获取，避免网络拥塞、缓解源站压力，保证用户访问资源的速度和体验</p></blockquote><p><img src= "https://cdn.jsdelivr.net/gh/luckyu2/imgLibrary/blogImgloading2.gif" data-lazy-src="https://upload-images.jianshu.io/upload_images/6534548-6530631dca814f8b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/638/format/webp" alt="img"></p><p>CDN节点</p><h4 id="CDN对网络的优化作用主要体现在如下几个方面"><a href="#CDN对网络的优化作用主要体现在如下几个方面" class="headerlink" title="CDN对网络的优化作用主要体现在如下几个方面"></a>CDN对网络的优化作用主要体现在如下几个方面</h4><ul><li>解决服务器端的“第一公里”问题</li><li>缓解甚至消除了不同运营商之间互联的瓶颈造成的影响</li><li>减轻了各省的出口带宽压力</li><li>缓解了骨干网的压力</li><li>优化了网上热点内容的分布</li></ul><h4 id="二、CDN工作原理"><a href="#二、CDN工作原理" class="headerlink" title="二、CDN工作原理"></a>二、CDN工作原理</h4><h5 id="传统访问过程"><a href="#传统访问过程" class="headerlink" title="传统访问过程"></a>传统访问过程</h5><p><img src= "https://cdn.jsdelivr.net/gh/luckyu2/imgLibrary/blogImgloading2.gif" data-lazy-src="https://upload-images.jianshu.io/upload_images/6534548-7c8899afcd671a0c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/618/format/webp" alt="img"></p><p>传统访问过程</p><p><strong>由上图可见，用户访问未使用CDN缓存网站的过程为:</strong></p><blockquote><p>1.用户输入访问的域名,操作系统向 LocalDns 查询域名的ip地址.<br>2.LocalDns向 ROOT DNS 查询域名的授权服务器(这里假设LocalDns缓存过期)<br>3.ROOT DNS将域名授权dns记录回应给 LocalDns<br>4.LocalDns得到域名的授权dns记录后,继续向域名授权dns查询域名的ip地址<br>5.域名授权dns 查询域名记录后，回应给 LocalDns<br>6.LocalDns 将得到的域名ip地址，回应给 用户端<br>7.用户得到域名ip地址后，访问站点服务器<br>8.站点服务器应答请求，将内容返回给客户端.</p></blockquote><h5 id="CDN访问过程"><a href="#CDN访问过程" class="headerlink" title="CDN访问过程"></a>CDN访问过程</h5><p><img src= "https://cdn.jsdelivr.net/gh/luckyu2/imgLibrary/blogImgloading2.gif" data-lazy-src="https://upload-images.jianshu.io/upload_images/6534548-eaabc85f59942d23.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/903/format/webp" alt="img"></p><p>CDN访问过程</p><p><strong>通过上图，我们可以了解到，使用了CDN缓存后的网站的访问过程变为：</strong></p><blockquote><p>1.用户输入访问的域名,操作系统向 LocalDns 查询域名的ip地址.<br>2.LocalDns向 ROOT DNS 查询域名的授权服务器(这里假设LocalDns缓存过期)<br>3.ROOT DNS将域名授权dns记录回应给 LocalDns<br>4.LocalDns得到域名的授权dns记录后,继续向域名授权dns查询域名的ip地址<br>5.域名授权dns 查询域名记录后(一般是CNAME)，回应给 LocalDns<br>6.LocalDns 得到域名记录后,向智能调度DNS查询域名的ip地址<br>7.智能调度DNS 根据一定的算法和策略(比如静态拓扑，容量等),将最适合的CDN节点ip地址回应给 LocalDns<br>8.LocalDns 将得到的域名ip地址，回应给 用户端<br>9.用户得到域名ip地址后，访问站点服务器<br>10.CDN节点服务器应答请求，将内容返回给客户端.(缓存服务器一方面在本地进行保存，以备以后使用，二方面把获取的数据返回给客户端，完成数据服务过程)</p></blockquote><p>通过以上的分析我们可以得到，为了实现对普通用户透明(使用缓存后用户客户端无需进行任何设置)访问，需要使用DNS(域名解析)来引导用户来访问Cache服务器，以实现透明的加速服务. 由于用户访问网站的第一步就是域名解析,所以通过修改dns来引导用户访问是最简单有效的方式.</p><h5 id="CDN网络的组成要素"><a href="#CDN网络的组成要素" class="headerlink" title="CDN网络的组成要素"></a>CDN网络的组成要素</h5><p>对于普通的Internet用户，每个CDN节点就相当于一个放置在它周围的网站服务器. 通过对dns的接管，用户的请求被透明地指向离他最近的节点，节点中CDN服务器会像网站的原始服务器一样，响应用户的请求. 由于它离用户更近，因而响应时间必然更快.</p><p>从上面图中 虚线圈起来的那块，就是CDN层,这层是位于 用户端 和 站点服务器 之间.</p><ul><li>智能调度DNS(比如f5的3DNS)<br>智能调度DNS是CDN服务中的关键系统.当用户访问加入CDN服务的网站时，域名解析请求将最终由 “智能调度DNS”负责处理。它通过一组预先定义好的策略，将当时最接近用户的节点地址提供给用户，使用户可以得到快速的服务。同时它需要与分布在各地的CDN节点保持通信，跟踪各节点的健康状态、容量等信息，确保将用户的请求分配到就近可用的节点上.</li><li>缓存功能服务<br>负载均衡设备(如lvs,F5的BIG/IP)<br>内容Cache服务器(如squid）<br>共享存储</li></ul><h4 id="三、名词解释"><a href="#三、名词解释" class="headerlink" title="三、名词解释"></a>三、名词解释</h4><h5 id="CNAME记录（CNAME-record）"><a href="#CNAME记录（CNAME-record）" class="headerlink" title="CNAME记录（CNAME record）"></a>CNAME记录（CNAME record）</h5><p>CNAME即别名( Canonical Name )；可以用来把一个域名解析到另一个域名，当 DNS 系统在查询 CNAME 左面的名称的时候，都会转向 CNAME 右面的名称再进行查询，一直追踪到最后的 PTR 或 A 名称，成功查询后才会做出回应，否则失败。<br>例如，你有一台服务器上存放了很多资料，你使用<code>docs.example.com</code>去访问这些资源，但又希望通过<code>documents.example.com</code>也能访问到这些资源，那么你就可以在您的DNS解析服务商添加一条CNAME记录，将<code>documents.example.com</code>指向<code>docs.example.com</code>，添加该条CNAME记录后，所有访问<code>documents.example.com</code>的请求都会被转到<code>docs.example.com</code>，获得相同的内容。</p><h5 id="CNAME域名"><a href="#CNAME域名" class="headerlink" title="CNAME域名"></a>CNAME域名</h5><p>接入CDN时，在CDN提供商控制台添加完加速域名后，您会得到一个CDN给您分配的CNAME域名， 您需要在您的DNS解析服务商添加CNAME记录，将自己的加速域名指向这个CNAME域名，这样该域名所有的请求才会都将转向CDN的节点，达到加速效果。</p><h5 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h5><p>DNS即Domain Name System，是域名解析服务的意思。它在互联网的作用是：把域名转换成为网络可以识别的ip地址。人们习惯记忆域名，但机器间互相只认IP地址，域名与IP地址之间是一一对应的，它们之间的转换工作称为域名解析，域名解析需要由专门的域名解析服务器来完成，整个过程是自动进行的。比如：上网时输入的<code>www.baidu.com</code>会自动转换成为<code>220.181.112.143</code>。<br>常见的DNS解析服务商有：阿里云解析，万网解析，DNSPod，新网解析，Route53（AWS），Dyn，Cloudflare等。</p><h5 id="回源host"><a href="#回源host" class="headerlink" title="回源host"></a>回源host</h5><p>回源host：回源host决定回源请求访问到源站上的具体某个站点。</p><blockquote><p>例子1：源站是域名源站为<code>www.a.com</code>,回源host为<code>www.b.com</code>,那么实际回源是请求到<code>www.a.com</code>解析到的IP,对应的主机上的站点<code>www.b.com</code></p><p>例子2：源站是IP源站为<code>1.1.1.1</code>, 回源host为<code>www.b.com</code>,那么实际回源的是<code>1.1.1.1</code>对应的主机上的站点<code>www.b.com</code></p></blockquote><h5 id="协议回源"><a href="#协议回源" class="headerlink" title="协议回源"></a>协议回源</h5><p>指回源时使用的协议和客户端访问资源时的协议保持一致，即如果客户端使用 HTTPS 方式请求资源，当CDN节点上未缓存该资源时，节点会使用相同的 HTTPS 方式回源获取资源；同理如果客户端使用 HTTP 协议的请求，CDN节点回源时也使用HTTP协议。</p><p>转载简书,作者：<a href="https://www.jianshu.com/u/335f86c00638">Kandy</a><br><a href="https://www.jianshu.com/nb/20961737">CDN</a></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      
        <tags>
            
            <tag> cdn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>打造稳定快速、高效免费图床</title>
      <link href="2021/01/10/%E6%89%93%E9%80%A0%E7%A8%B3%E5%AE%9A%E5%BF%AB%E9%80%9F%E3%80%81%E9%AB%98%E6%95%88%E5%85%8D%E8%B4%B9%E5%9B%BE%E5%BA%8A/"/>
      <url>2021/01/10/%E6%89%93%E9%80%A0%E7%A8%B3%E5%AE%9A%E5%BF%AB%E9%80%9F%E3%80%81%E9%AB%98%E6%95%88%E5%85%8D%E8%B4%B9%E5%9B%BE%E5%BA%8A/</url>
      
        <content type="html"><![CDATA[<h1 id="用Github-jsDelivr-PicGo造一个快速、高效免费图床吧"><a href="#用Github-jsDelivr-PicGo造一个快速、高效免费图床吧" class="headerlink" title="用Github+jsDelivr+PicGo造一个快速、高效免费图床吧"></a>用Github+jsDelivr+PicGo造一个快速、高效免费图床吧</h1><h4 id="开篇语："><a href="#开篇语：" class="headerlink" title="开篇语："></a>开篇语：</h4><p>都知道，国内打开利用GitHub创建的博客，那访问博客时的图片加载速度真奇慢无比，<br>试过很多方法，压缩图片大小，用免费的图床，收效甚微。<br>使用 jsDelivr+Github 来引用图片资源会大大加快网页图片加载速度，<br>搭建博客后想加快网页图片加载速度的小伙伴不妨试试哟。</p><p><strong>工具：picGo 下载地址 可以使用迅雷下载</strong></p><p><a href="https://github.com/Molunerfinn/picgo/releases">https://github.com/Molunerfinn/picgo/releases</a></p><h4 id="步骤如下："><a href="#步骤如下：" class="headerlink" title="步骤如下："></a>步骤如下：</h4><h4 id="一、创建图片仓库："><a href="#一、创建图片仓库：" class="headerlink" title="一、创建图片仓库："></a>一、<strong>创建图片仓库</strong>：</h4><p><img src= "https://cdn.jsdelivr.net/gh/luckyu2/imgLibrary/blogImgloading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/luckyu2/imgLibrary/blogImg/picGo2.png"></p><h4 id="二、Token获取的方法"><a href="#二、Token获取的方法" class="headerlink" title="二、Token获取的方法"></a>二、<strong>Token获取的方法</strong></h4><p>登录 GitHub ，点击右上角头像，选中 Settings (设置)。</p><p>选择左侧导航 Developer settings (开发人员设置)</p><p>选择左侧导航 Personal access tokens (个人访问令牌),点击 Generate new token (生成新的令牌)</p><p>上面的Note随便写点什么，下拉选择 repo，</p><p><img src= "https://cdn.jsdelivr.net/gh/luckyu2/imgLibrary/blogImgloading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200408003438129.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjAxNDYyMg==,size_16,color_FFFFFF,t_70"></p><p>同时它会把包含其中的都会勾选上，我们勾选这些就可以了。</p><p><img src= "https://cdn.jsdelivr.net/gh/luckyu2/imgLibrary/blogImgloading2.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200408003513228.png"></p><p>然后拉到最下方点击绿色按钮，Generate token 即可。之后就会生成一个 <em>token</em> ，记得复制保存到其他地方，这个 <em>token</em> 只显示一次！！</p><h4 id="三、开始使用PicGo"><a href="#三、开始使用PicGo" class="headerlink" title="三、开始使用PicGo"></a><strong>三、开始使用PicGo</strong></h4><p>将下载的<strong>PicGo</strong>打开，点击图床设置，会看到下面的页面</p><p><img src= "https://cdn.jsdelivr.net/gh/luckyu2/imgLibrary/blogImgloading2.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/luckyu2/imgLibrary/blogImgPicGO.png"></p><ul><li><p>设定参考名：按照【用户名 / 图床仓库名】的格式填写</p></li><li><p>设定分支名：【main】</p></li><li><p>设定Token：粘贴之前生成的【Token】</p></li><li><p> 指定存储路径：填写想要储存的路径，如【Pictures/】，这样就会在仓库下创建一个名为 Pictures 的文件夹，图片将会储存在此文件夹中，相当于是给上传的图片的在GitHub指定一个叫【Pictures】的文件夹</p></li><li><p>设定自定义域名：它的作用是，在图片上传后，PicGo会按照【自定义域名+储存路径+上传的图片名】的方式生成访问链接，放到粘贴板上，因为我们要使用 jsDelivr 加速访问，所以可以设置为【<a href="https://cdn.jsdelivr.net/gh/%E7%94%A8%E6%88%B7%E5%90%8D/%E5%9B%BE%E5%BA%8A%E4%BB%93%E5%BA%93%E5%90%8D">https://cdn.jsdelivr.net/gh/用户名/图床仓库名</a> 】，上传完毕后，我们就可以通过【<a href="https://cdn.jsdelivr.net/gh/%E7%94%A8%E6%88%B7%E5%90%8D/%E5%9B%BE%E5%BA%8A%E4%BB%93%E5%BA%93%E5%90%8D/%E5%9B%BE%E7%89%87%E8%B7%AF%E5%BE%84%E3%80%91%E5%8A%A0%E9%80%9F%E8%AE%BF%E9%97%AE%E6%88%91%E4%BB%AC%E7%9A%84%E5%9B%BE%E7%89%87%E4%BA%86">https://cdn.jsdelivr.net/gh/用户名/图床仓库名/图片路径】加速访问我们的图片了</a></p></li><li><p>填入需要的数据，点确定，即可完成设置。</p></li><li><p>在相册中即可看到上传的图片</p></li></ul><head>  <script src='//cdn.jsdelivr.net/npm/@waline/client/dist/Waline.min.js'></script></head><body>  <div id="waline"></div>  <script>    new Waline({      el: '#waline',      path: location.pathname,      serverURL: 'https://comments-api.vercel.app'    });  </script></body><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      
        <tags>
            
            <tag> 性能优化 </tag>
            
            <tag> CDN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【笔记】盒模型及应用</title>
      <link href="2021/01/08/%E7%9B%92%E6%A8%A1%E5%9E%8B%E5%BA%94%E7%94%A8/"/>
      <url>2021/01/08/%E7%9B%92%E6%A8%A1%E5%9E%8B%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="盒模型"><a href="#盒模型" class="headerlink" title="盒模型"></a>盒模型</h1><p>box：盒子，每个元素在页面中都会生成一个矩形区域（盒子）</p><p>盒子类型：</p><ol><li>行盒，display等于inline的元素</li><li>块盒，display等于block的元素</li></ol><p>行盒在页面中不换行、块盒独占一行</p><p>display默认值为inline</p><p>浏览器默认样式表设置的块盒：容器元素、h1~h6、p</p><p>常见的行盒：span、a、img、video、audio</p><h2 id="盒子的组成部分"><a href="#盒子的组成部分" class="headerlink" title="盒子的组成部分"></a>盒子的组成部分</h2><p>无论是行盒、还是块盒，都由下面几个部分组成，从内到外分别是：</p><ol><li>内容  content</li></ol><p>width、height，设置的是盒子内容的宽高</p><p>内容部分通常叫做整个盒子的<strong>内容盒 content-box</strong></p><ol start="2"><li>填充(内边距)  padding</li></ol><p>盒子边框到盒子内容的距离</p><p>padding-left、padding-right、padding-top、padding-bottom</p><p>padding: 简写属性</p><p>padding: 上 右 下 左</p><p>填充区+内容区 = <strong>填充盒 padding-box</strong></p><ol start="3"><li>边框  border</li></ol><p>边框 = 边框样式 + 边框宽度 + 边框颜色</p><p>边框样式：border-style<br>边框宽度：border-width<br>边框颜色：border-color</p><p>边框+填充区+内容区 = <strong>边框盒 border-box</strong></p><ol start="4"><li>外边距  margin</li></ol><p>边框到其他盒子的距离</p><p>margin-top、margin-left、margin-right、margin-bottom</p><p>速写属性margin</p><h1 id="盒模型应用"><a href="#盒模型应用" class="headerlink" title="盒模型应用"></a>盒模型应用</h1><h2 id="改变宽高范围"><a href="#改变宽高范围" class="headerlink" title="改变宽高范围"></a>改变宽高范围</h2><p>默认情况下，width 和 height 设置的是内容盒宽高。</p><blockquote><p>页面重构师：将psd文件（设计稿）制作为静态页面</p></blockquote><p>衡量设计稿尺寸的时候，往往使用的是边框盒，但设置width和height，则设置的是内容盒</p><ol><li>精确计算</li><li>CSS3：box-sizing</li></ol><h2 id="改变背景覆盖范围"><a href="#改变背景覆盖范围" class="headerlink" title="改变背景覆盖范围"></a>改变背景覆盖范围</h2><p>默认情况下，背景覆盖边框盒</p><p>可以通过background-clip进行修改</p><h2 id="溢出处理"><a href="#溢出处理" class="headerlink" title="溢出处理"></a>溢出处理</h2><p>overflow，控制内容溢出边框盒后的处理方式</p><h2 id="断词规则"><a href="#断词规则" class="headerlink" title="断词规则"></a>断词规则</h2><p>word-break，会影响文字在什么位置被截断换行</p><p>normal：普通。CJK字符（文字位置截断），非CJK字符（单词位置截断）</p><p>break-all：截断所有。所有字符都在文字处截断</p><p>keep-all：保持所有。所有文字都在单词之间截断</p><h2 id="空白处理"><a href="#空白处理" class="headerlink" title="空白处理"></a>空白处理</h2><p>white-space: nowrap</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记录几段常用js代码的实现</title>
      <link href="2021/01/08/%E8%AE%B0%E5%BD%95%E5%87%A0%E6%AE%B5%E5%B8%B8%E7%94%A8js%E4%BB%A3%E7%A0%81%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
      <url>2021/01/08/%E8%AE%B0%E5%BD%95%E5%87%A0%E6%AE%B5%E5%B8%B8%E7%94%A8js%E4%BB%A3%E7%A0%81%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>记录几段常用的js代码实现，掌握了实现原理，就对这些用法会有更加深入的理解。</p><h2 id="一、深拷贝"><a href="#一、深拷贝" class="headerlink" title="一、深拷贝"></a>一、深拷贝</h2><p>深拷贝，<a href="https://www.haorooms.com/post/js_deepcompare">深比较</a>，之前有文章写过，请看：<a href="https://www.haorooms.com/post/js_copy_sq">https://www.haorooms.com/post/js_copy_sq</a></p><p>今天的深copy考虑了Symbol属性，代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">const cloneDeep1 &#x3D; (target, hash &#x3D; new WeakMap()) &#x3D;&gt; &#123;</span><br><span class="line">  &#x2F;&#x2F; 对于传入参数处理</span><br><span class="line">  if (typeof target !&#x3D;&#x3D; &#39;object&#39; || target &#x3D;&#x3D;&#x3D; null) &#123;</span><br><span class="line">    return target;</span><br><span class="line">  &#125;</span><br><span class="line">  &#x2F;&#x2F; 哈希表中存在直接返回</span><br><span class="line">  if (hash.has(target)) return hash.get(target);</span><br><span class="line"></span><br><span class="line">  const cloneTarget &#x3D; Array.isArray(target) ? [] : &#123;&#125;;</span><br><span class="line">  hash.set(target, cloneTarget);</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 针对Symbol属性</span><br><span class="line">  const symKeys &#x3D; Object.getOwnPropertySymbols(target);</span><br><span class="line">  if (symKeys.length) &#123;</span><br><span class="line">    symKeys.forEach(symKey &#x3D;&gt; &#123;</span><br><span class="line">      if (typeof target[symKey] &#x3D;&#x3D;&#x3D; &#39;object&#39; &amp;&amp; target[symKey] !&#x3D;&#x3D; null) &#123;</span><br><span class="line">        cloneTarget[symKey] &#x3D; cloneDeep1(target[symKey]);</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        cloneTarget[symKey] &#x3D; target[symKey];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  for (const i in target) &#123;</span><br><span class="line">    if (Object.prototype.hasOwnProperty.call(target, i)) &#123;</span><br><span class="line">      cloneTarget[i] &#x3D;</span><br><span class="line">        typeof target[i] &#x3D;&#x3D;&#x3D; &#39;object&#39; &amp;&amp; target[i] !&#x3D;&#x3D; null</span><br><span class="line">        ? cloneDeep1(target[i], hash)</span><br><span class="line">        : target[i];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return cloneTarget;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、Promise实现"><a href="#二、Promise实现" class="headerlink" title="二、Promise实现"></a>二、Promise实现</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 模拟实现Promise</span><br><span class="line">&#x2F;&#x2F; Promise利用三大手段解决回调地狱：</span><br><span class="line">&#x2F;&#x2F; 1. 回调函数延迟绑定</span><br><span class="line">&#x2F;&#x2F; 2. 返回值穿透</span><br><span class="line">&#x2F;&#x2F; 3. 错误冒泡</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 定义三种状态</span><br><span class="line">const PENDING &#x3D; &#39;PENDING&#39;;      &#x2F;&#x2F; 进行中</span><br><span class="line">const FULFILLED &#x3D; &#39;FULFILLED&#39;;  &#x2F;&#x2F; 已成功</span><br><span class="line">const REJECTED &#x3D; &#39;REJECTED&#39;;    &#x2F;&#x2F; 已失败</span><br><span class="line"></span><br><span class="line">class Promise &#123;</span><br><span class="line">  constructor(exector) &#123;</span><br><span class="line">    &#x2F;&#x2F; 初始化状态</span><br><span class="line">    this.status &#x3D; PENDING;</span><br><span class="line">    &#x2F;&#x2F; 将成功、失败结果放在this上，便于then、catch访问</span><br><span class="line">    this.value &#x3D; undefined;</span><br><span class="line">    this.reason &#x3D; undefined;</span><br><span class="line">    &#x2F;&#x2F; 成功态回调函数队列</span><br><span class="line">    this.onFulfilledCallbacks &#x3D; [];</span><br><span class="line">    &#x2F;&#x2F; 失败态回调函数队列</span><br><span class="line">    this.onRejectedCallbacks &#x3D; [];</span><br><span class="line"></span><br><span class="line">    const resolve &#x3D; value &#x3D;&gt; &#123;</span><br><span class="line">      &#x2F;&#x2F; 只有进行中状态才能更改状态</span><br><span class="line">      if (this.status &#x3D;&#x3D;&#x3D; PENDING) &#123;</span><br><span class="line">        this.status &#x3D; FULFILLED;</span><br><span class="line">        this.value &#x3D; value;</span><br><span class="line">        &#x2F;&#x2F; 成功态函数依次执行</span><br><span class="line">        this.onFulfilledCallbacks.forEach(fn &#x3D;&gt; fn(this.value));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    const reject &#x3D; reason &#x3D;&gt; &#123;</span><br><span class="line">      &#x2F;&#x2F; 只有进行中状态才能更改状态</span><br><span class="line">      if (this.status &#x3D;&#x3D;&#x3D; PENDING) &#123;</span><br><span class="line">        this.status &#x3D; REJECTED;</span><br><span class="line">        this.reason &#x3D; reason;</span><br><span class="line">        &#x2F;&#x2F; 失败态函数依次执行</span><br><span class="line">        this.onRejectedCallbacks.forEach(fn &#x3D;&gt; fn(this.reason))</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    try &#123;</span><br><span class="line">      &#x2F;&#x2F; 立即执行executor</span><br><span class="line">      &#x2F;&#x2F; 把内部的resolve和reject传入executor，用户可调用resolve和reject</span><br><span class="line">      exector(resolve, reject);</span><br><span class="line">    &#125; catch(e) &#123;</span><br><span class="line">      &#x2F;&#x2F; executor执行出错，将错误内容reject抛出去</span><br><span class="line">      reject(e);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  then(onFulfilled, onRejected) &#123;</span><br><span class="line">    onFulfilled &#x3D; typeof onFulfilled &#x3D;&#x3D;&#x3D; &#39;function&#39; ? onFulfilled : value &#x3D;&gt; value;</span><br><span class="line">    onRejected &#x3D; typeof onRejected &#x3D;&#x3D;&#x3D; &#39;function&#39;? onRejected :</span><br><span class="line">      reason &#x3D;&gt; &#123; throw new Error(reason instanceof Error ? reason.message : reason) &#125;</span><br><span class="line">    &#x2F;&#x2F; 保存this</span><br><span class="line">    const self &#x3D; this;</span><br><span class="line">    return new Promise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class="line">      if (self.status &#x3D;&#x3D;&#x3D; PENDING) &#123;</span><br><span class="line">        self.onFulfilledCallbacks.push(() &#x3D;&gt; &#123;</span><br><span class="line">          &#x2F;&#x2F; try捕获错误</span><br><span class="line">          try &#123;</span><br><span class="line">            &#x2F;&#x2F; 模拟微任务</span><br><span class="line">            setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">              const result &#x3D; onFulfilled(self.value);</span><br><span class="line">              &#x2F;&#x2F; 分两种情况：</span><br><span class="line">              &#x2F;&#x2F; 1. 回调函数返回值是Promise，执行then操作</span><br><span class="line">              &#x2F;&#x2F; 2. 如果不是Promise，调用新Promise的resolve函数</span><br><span class="line">              result instanceof Promise ? result.then(resolve, reject) : resolve(result);</span><br><span class="line">            &#125;)</span><br><span class="line">          &#125; catch(e) &#123;</span><br><span class="line">            reject(e);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        self.onRejectedCallbacks.push(() &#x3D;&gt; &#123;</span><br><span class="line">          &#x2F;&#x2F; 以下同理</span><br><span class="line">          try &#123;</span><br><span class="line">            setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">              const result &#x3D; onRejected(self.reason);</span><br><span class="line">              &#x2F;&#x2F; 不同点：此时是reject</span><br><span class="line">              result instanceof Promise ? result.then(resolve, reject) : reject(result);</span><br><span class="line">            &#125;)</span><br><span class="line">          &#125; catch(e) &#123;</span><br><span class="line">            reject(e);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125; else if (self.status &#x3D;&#x3D;&#x3D; FULFILLED) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">          setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">            const result &#x3D; onFulfilled(self.value);</span><br><span class="line">            result instanceof Promise ? result.then(resolve, reject) : resolve(result);</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125; catch(e) &#123;</span><br><span class="line">          reject(e);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; else if (self.status &#x3D;&#x3D;&#x3D; REJECTED) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">          setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">            const result &#x3D; onRejected(self.reason);</span><br><span class="line">            result instanceof Promise ? result.then(resolve, reject) : resolve(result);</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125; catch(e) &#123;</span><br><span class="line">          reject(e);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  catch(onRejected) &#123;</span><br><span class="line">    return this.then(null, onRejected);</span><br><span class="line">  &#125;</span><br><span class="line">  static resolve(value) &#123;</span><br><span class="line">    if (value instanceof Promise) &#123;</span><br><span class="line">      &#x2F;&#x2F; 如果是Promise实例，直接返回</span><br><span class="line">      return value;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      &#x2F;&#x2F; 如果不是Promise实例，返回一个新的Promise对象，状态为FULFILLED</span><br><span class="line">      return new Promise((resolve, reject) &#x3D;&gt; resolve(value));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  static reject(reason) &#123;</span><br><span class="line">    return new Promise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class="line">      reject(reason);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  static all(promiseArr) &#123;</span><br><span class="line">    const len &#x3D; promiseArr.length;</span><br><span class="line">    const values &#x3D; new Array(len);</span><br><span class="line">    &#x2F;&#x2F; 记录已经成功执行的promise个数</span><br><span class="line">    let count &#x3D; 0;</span><br><span class="line">    return new Promise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class="line">      for (let i &#x3D; 0; i &lt; len; i++) &#123;</span><br><span class="line">        &#x2F;&#x2F; Promise.resolve()处理，确保每一个都是promise实例</span><br><span class="line">        Promise.resolve(promiseArr[i]).then(</span><br><span class="line">          val &#x3D;&gt; &#123;</span><br><span class="line">            values[i] &#x3D; val;</span><br><span class="line">            count++;</span><br><span class="line">            &#x2F;&#x2F; 如果全部执行完，返回promise的状态就可以改变了</span><br><span class="line">            if (count &#x3D;&#x3D;&#x3D; len) resolve(values);</span><br><span class="line">          &#125;,</span><br><span class="line">          err &#x3D;&gt; reject(err),</span><br><span class="line">        );</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  static race(promiseArr) &#123;</span><br><span class="line">    return new Promise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class="line">      promiseArr.forEach(p &#x3D;&gt; &#123;</span><br><span class="line">        Promise.resolve(p).then(</span><br><span class="line">          val &#x3D;&gt; resolve(val),</span><br><span class="line">          err &#x3D;&gt; reject(err),</span><br><span class="line">        )</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、Promise并行限制"><a href="#三、Promise并行限制" class="headerlink" title="三、Promise并行限制"></a>三、Promise并行限制</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">class Scheduler &#123;</span><br><span class="line">  constructor() &#123;</span><br><span class="line">    this.queue &#x3D; [];</span><br><span class="line">    this.maxCount &#x3D; 2;</span><br><span class="line">    this.runCounts &#x3D; 0;</span><br><span class="line">  &#125;</span><br><span class="line">  add(promiseCreator) &#123;</span><br><span class="line">    this.queue.push(promiseCreator);</span><br><span class="line">  &#125;</span><br><span class="line">  taskStart() &#123;</span><br><span class="line">    for (let i &#x3D; 0; i &lt; this.maxCount; i++) &#123;</span><br><span class="line">      this.request();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  request() &#123;</span><br><span class="line">    if (!this.queue || !this.queue.length || this.runCounts &gt;&#x3D; this.maxCount) &#123;</span><br><span class="line">      return;</span><br><span class="line">    &#125;</span><br><span class="line">    this.runCounts++;</span><br><span class="line"></span><br><span class="line">    this.queue.shift()().then(() &#x3D;&gt; &#123;</span><br><span class="line">      this.runCounts--;</span><br><span class="line">      this.request();</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const timeout &#x3D; time &#x3D;&gt; new Promise(resolve &#x3D;&gt; &#123;</span><br><span class="line">  setTimeout(resolve, time);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">const scheduler &#x3D; new Scheduler();</span><br><span class="line"></span><br><span class="line">const addTask &#x3D; (time,order) &#x3D;&gt; &#123;</span><br><span class="line">  scheduler.add(() &#x3D;&gt; timeout(time).then(()&#x3D;&gt;console.log(order)))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">addTask(1000, &#39;1&#39;);</span><br><span class="line">addTask(500, &#39;2&#39;);</span><br><span class="line">addTask(300, &#39;3&#39;);</span><br><span class="line">addTask(400, &#39;4&#39;);</span><br><span class="line">scheduler.taskStart()</span><br><span class="line">&#x2F;&#x2F; 2</span><br><span class="line">&#x2F;&#x2F; 3</span><br><span class="line">&#x2F;&#x2F; 1</span><br><span class="line">&#x2F;&#x2F; 4</span><br></pre></td></tr></table></figure><h2 id="四、JSONP的实现"><a href="#四、JSONP的实现" class="headerlink" title="四、JSONP的实现"></a>四、JSONP的实现</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">const jsonp &#x3D; (&#123; url, params, callbackName &#125;) &#x3D;&gt; &#123;</span><br><span class="line">  const generateUrl &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">    let dataSrc &#x3D; &#39;&#39;;</span><br><span class="line">    for (let key in params) &#123;</span><br><span class="line">      if (Object.prototype.hasOwnProperty.call(params, key)) &#123;</span><br><span class="line">        dataSrc +&#x3D; &#96;$&#123;key&#125;&#x3D;$&#123;params[key]&#125;&amp;&#96;;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dataSrc +&#x3D; &#96;callback&#x3D;$&#123;callbackName&#125;&#96;;</span><br><span class="line">    return &#96;$&#123;url&#125;?$&#123;dataSrc&#125;&#96;;</span><br><span class="line">  &#125;</span><br><span class="line">  return new Promise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class="line">    const scriptEle &#x3D; document.createElement(&#39;script&#39;);</span><br><span class="line">    scriptEle.src &#x3D; generateUrl();</span><br><span class="line">    document.body.appendChild(scriptEle);</span><br><span class="line">    window[callbackName] &#x3D; data &#x3D;&gt; &#123;</span><br><span class="line">      resolve(data);</span><br><span class="line">      document.removeChild(scriptEle);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="五、event模块实现"><a href="#五、event模块实现" class="headerlink" title="五、event模块实现"></a>五、event模块实现</h2><p>实现node中回调函数的机制，node中回调函数其实是内部使用了观察者模式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">function EventEmitter() &#123;</span><br><span class="line">  this.events &#x3D; new Map();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 需要实现的一些方法：</span><br><span class="line">&#x2F;&#x2F; addListener、removeListener、once、removeAllListeners、emit</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 模拟实现addlistener方法</span><br><span class="line">const wrapCallback &#x3D; (fn, once &#x3D; false) &#x3D;&gt; (&#123; callback: fn, once &#125;);</span><br><span class="line">EventEmitter.prototype.addListener &#x3D; function(type, fn, once &#x3D; false) &#123;</span><br><span class="line">  const hanlder &#x3D; this.events.get(type);</span><br><span class="line">  if (!hanlder) &#123;</span><br><span class="line">    &#x2F;&#x2F; 没有type绑定事件</span><br><span class="line">    this.events.set(type, wrapCallback(fn, once));</span><br><span class="line">  &#125; else if (hanlder &amp;&amp; typeof hanlder.callback &#x3D;&#x3D;&#x3D; &#39;function&#39;) &#123;</span><br><span class="line">    &#x2F;&#x2F; 目前type事件只有一个回调</span><br><span class="line">    this.events.set(type, [hanlder, wrapCallback(fn, once)]);</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    &#x2F;&#x2F; 目前type事件数&gt;&#x3D;2</span><br><span class="line">    hanlder.push(wrapCallback(fn, once));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 模拟实现removeListener</span><br><span class="line">EventEmitter.prototype.removeListener &#x3D; function(type, listener) &#123;</span><br><span class="line">  const hanlder &#x3D; this.events.get(type);</span><br><span class="line">  if (!hanlder) return;</span><br><span class="line">  if (!Array.isArray(this.events)) &#123;</span><br><span class="line">    if (hanlder.callback &#x3D;&#x3D;&#x3D; listener.callback) this.events.delete(type);</span><br><span class="line">    else return;</span><br><span class="line">  &#125;</span><br><span class="line">  for (let i &#x3D; 0; i &lt; hanlder.length; i++) &#123;</span><br><span class="line">    const item &#x3D; hanlder[i];</span><br><span class="line">    if (item.callback &#x3D;&#x3D;&#x3D; listener.callback) &#123;</span><br><span class="line">      hanlder.splice(i, 1);</span><br><span class="line">      i--;</span><br><span class="line">      if (hanlder.length &#x3D;&#x3D;&#x3D; 1) &#123;</span><br><span class="line">        this.events.set(type, hanlder[0]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 模拟实现once方法</span><br><span class="line">EventEmitter.prototype.once &#x3D; function(type, listener) &#123;</span><br><span class="line">  this.addListener(type, listener, true);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 模拟实现emit方法</span><br><span class="line">EventEmitter.prototype.emit &#x3D; function(type, ...args) &#123;</span><br><span class="line">  const hanlder &#x3D; this.events.get(type);</span><br><span class="line">  if (!hanlder) return;</span><br><span class="line">  if (Array.isArray(hanlder)) &#123;</span><br><span class="line">    hanlder.forEach(item &#x3D;&gt; &#123;</span><br><span class="line">      item.callback.apply(this, args);</span><br><span class="line">      if (item.once) &#123;</span><br><span class="line">        this.removeListener(type, item);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    hanlder.callback.apply(this, args);</span><br><span class="line">    if (hanlder.once) &#123;</span><br><span class="line">      this.events.delete(type);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return true;</span><br><span class="line">&#125;</span><br><span class="line">EventEmitter.prototype.removeAllListeners &#x3D; function(type) &#123;</span><br><span class="line">  const hanlder &#x3D; this.events.get(type);</span><br><span class="line">  if (!hanlder) return;</span><br><span class="line">  this.events.delete(type);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="六、一次性渲染几万条数据数据，页面不算很卡的方法"><a href="#六、一次性渲染几万条数据数据，页面不算很卡的方法" class="headerlink" title="六、一次性渲染几万条数据数据，页面不算很卡的方法"></a>六、一次性渲染几万条数据数据，页面不算很卡的方法</h2><p>几万条数据，假如不是滚动加载，一次性渲染到页面中，单单是节点，都会很慢。下面方法可以渲染出来。但是节点很多，也会比较慢，但是是一次性渲染几万条数据比较好的方式了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">  &#x2F;&#x2F; 插入十万条数据</span><br><span class="line">  const total &#x3D; 100000;</span><br><span class="line">  &#x2F;&#x2F; 一次插入的数据</span><br><span class="line">  const once &#x3D; 20;</span><br><span class="line">  &#x2F;&#x2F; 插入数据需要的次数</span><br><span class="line">  const loopCount &#x3D; Math.ceil(total &#x2F; once);</span><br><span class="line">  let countOfRender &#x3D; 0;</span><br><span class="line">  const ul &#x3D; document.querySelector(&#39;ul&#39;);</span><br><span class="line">  &#x2F;&#x2F; 添加数据的方法</span><br><span class="line">  function add() &#123;</span><br><span class="line">    const fragment &#x3D; document.createDocumentFragment();</span><br><span class="line">    for(let i &#x3D; 0; i &lt; once; i++) &#123;</span><br><span class="line">      const li &#x3D; document.createElement(&#39;li&#39;);</span><br><span class="line">      li.innerText &#x3D; Math.floor(Math.random() * total);</span><br><span class="line">      fragment.appendChild(li);</span><br><span class="line">    &#125;</span><br><span class="line">    ul.appendChild(fragment);</span><br><span class="line">    countOfRender +&#x3D; 1;</span><br><span class="line">    loop();</span><br><span class="line">  &#125;</span><br><span class="line">  function loop() &#123;</span><br><span class="line">    if(countOfRender &lt; loopCount) &#123;</span><br><span class="line">      window.requestAnimationFrame(add);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  loop();</span><br><span class="line">&#125;, 0)</span><br></pre></td></tr></table></figure><p>这个方法使用createDocumentFragment和requestAnimationFrame，将操作切分为一小段一小段执行。</p><h2 id="七、将VirtualDom转化为真实DOM结构"><a href="#七、将VirtualDom转化为真实DOM结构" class="headerlink" title="七、将VirtualDom转化为真实DOM结构"></a>七、将VirtualDom转化为真实DOM结构</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; vnode结构：</span><br><span class="line">&#x2F;&#x2F; &#123;</span><br><span class="line">&#x2F;&#x2F;   tag,</span><br><span class="line">&#x2F;&#x2F;   attrs,</span><br><span class="line">&#x2F;&#x2F;   children,</span><br><span class="line">&#x2F;&#x2F; &#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Virtual DOM &#x3D;&gt; DOM</span><br><span class="line">function render(vnode, container) &#123;</span><br><span class="line">  container.appendChild(_render(vnode));</span><br><span class="line">&#125;</span><br><span class="line">function _render(vnode) &#123;</span><br><span class="line">  &#x2F;&#x2F; 如果是数字类型转化为字符串</span><br><span class="line">  if (typeof vnode &#x3D;&#x3D;&#x3D; &#39;number&#39;) &#123;</span><br><span class="line">    vnode &#x3D; String(vnode);</span><br><span class="line">  &#125;</span><br><span class="line">  &#x2F;&#x2F; 字符串类型直接就是文本节点</span><br><span class="line">  if (typeof vnode &#x3D;&#x3D;&#x3D; &#39;string&#39;) &#123;</span><br><span class="line">    return document.createTextNode(vnode);</span><br><span class="line">  &#125;</span><br><span class="line">  &#x2F;&#x2F; 普通DOM</span><br><span class="line">  const dom &#x3D; document.createElement(vnode.tag);</span><br><span class="line">  if (vnode.attrs) &#123;</span><br><span class="line">    &#x2F;&#x2F; 遍历属性</span><br><span class="line">    Object.keys(vnode.attrs).forEach(key &#x3D;&gt; &#123;</span><br><span class="line">      const value &#x3D; vnode.attrs[key];</span><br><span class="line">      dom.setAttribute(key, value);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  &#x2F;&#x2F; 子数组进行递归操作</span><br><span class="line">  vnode.children.forEach(child &#x3D;&gt; render(child, dom));</span><br><span class="line">  return dom;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="八、字符串解析问题"><a href="#八、字符串解析问题" class="headerlink" title="八、字符串解析问题"></a>八、字符串解析问题</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var a &#x3D; &#123;</span><br><span class="line">    b: 123,</span><br><span class="line">    c: &#39;456&#39;,</span><br><span class="line">    e: &#39;789&#39;,</span><br><span class="line">&#125;</span><br><span class="line">var str&#x3D;&#96;a&#123;a.b&#125;aa&#123;a.c&#125;aa &#123;a.d&#125;aaaa&#96;;</span><br><span class="line">&#x2F;&#x2F; &#x3D;&gt; &#39;a123aa456aa &#123;a.d&#125;aaaa&#39;</span><br></pre></td></tr></table></figure><p>实现函数使得将str字符串中的{}内的变量替换，如果属性不存在保持原样（比如{a.d}） 类似于模版字符串，但有一点出入，实际上原理大差不差</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">const fn1 &#x3D; (str, obj) &#x3D;&gt; &#123;</span><br><span class="line">    let res &#x3D; &#39;&#39;;</span><br><span class="line">    &#x2F;&#x2F; 标志位，标志前面是否有&#123;</span><br><span class="line">    let flag &#x3D; false;</span><br><span class="line">    let start;</span><br><span class="line">    for (let i &#x3D; 0; i &lt; str.length; i++) &#123;</span><br><span class="line">        if (str[i] &#x3D;&#x3D;&#x3D; &#39;&#123;&#39;) &#123;</span><br><span class="line">            flag &#x3D; true;</span><br><span class="line">            start &#x3D; i + 1;</span><br><span class="line">            continue;</span><br><span class="line">        &#125;</span><br><span class="line">        if (!flag) res +&#x3D; str[i];</span><br><span class="line">        else &#123;</span><br><span class="line">            if (str[i] &#x3D;&#x3D;&#x3D; &#39;&#125;&#39;) &#123;</span><br><span class="line">                flag &#x3D; false;</span><br><span class="line">                res +&#x3D; match(str.slice(start, i), obj);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return res;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 对象匹配操作</span><br><span class="line">const match &#x3D; (str, obj) &#x3D;&gt; &#123;</span><br><span class="line">    const keys &#x3D; str.split(&#39;.&#39;).slice(1);</span><br><span class="line">    let index &#x3D; 0;</span><br><span class="line">    let o &#x3D; obj;</span><br><span class="line">    while (index &lt; keys.length) &#123;</span><br><span class="line">        const key &#x3D; keys[index];</span><br><span class="line">        if (!o[key]) &#123;</span><br><span class="line">            return &#96;&#123;$&#123;str&#125;&#125;&#96;;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            o &#x3D; o[key];</span><br><span class="line">        &#125;</span><br><span class="line">        index++;</span><br><span class="line">    &#125;</span><br><span class="line">    return o;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="九、数组扁平化"><a href="#九、数组扁平化" class="headerlink" title="九、数组扁平化"></a>九、数组扁平化</h2><p>数组扁平化是指将一个多维数组变为一个一维数组</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const arr &#x3D; [1, [2, [3, [4, 5]]], 6];</span><br><span class="line">&#x2F;&#x2F; &#x3D;&gt; [1, 2, 3, 4, 5, 6]</span><br></pre></td></tr></table></figure><p>方法一：使用flat()</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const res1 &#x3D; arr.flat(Infinity);</span><br></pre></td></tr></table></figure><p>方法二：正则</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const res3 &#x3D; JSON.parse(&#39;[&#39; + JSON.stringify(arr).replace(&#x2F;\[|\]&#x2F;g, &#39;&#39;) + &#39;]&#39;);</span><br></pre></td></tr></table></figure><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack运行项目时报错</title>
      <link href="2021/01/08/webpack%E6%8A%A5%E9%94%99/"/>
      <url>2021/01/08/webpack%E6%8A%A5%E9%94%99/</url>
      
        <content type="html"><![CDATA[<h4 id="运行项目时报错-‘webpack’-不是内部或外部命令-也不是可运行的程序-或批处理文"><a href="#运行项目时报错-‘webpack’-不是内部或外部命令-也不是可运行的程序-或批处理文" class="headerlink" title="运行项目时报错: ‘webpack’ 不是内部或外部命令,也不是可运行的程序 或批处理文"></a>运行项目时报错: ‘webpack’ 不是内部或外部命令,也不是可运行的程序 或批处理文</h4><p>因为当时报错到时候没截图,我这里就不放图片了</p><p>报这个错时因为没有全局安装webpack,</p><h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法:"></a>解决方法:</h4><p>1.确保nodeJS已安装</p><p>2.找到nodejs目录,我的目录是图片上这个,你的可能不一样,看下有没有以下两个文件,没有就新建</p><p><img src="https://img2018.cnblogs.com/blog/1349812/201908/1349812-20190804192312618-1152562711.png" alt="img"></p><ol start="3"><li>修改全局路径,需要把默认的安装包路径改成nodejs里面这两个新建的文件</li></ol><p>配置全局路径：npm config set prefix “C:\Program Files\nodejs\node_global”<br>配置缓存路径：npm config set cache “C:\Program Files\nodejs\node_cache” </p><p>注意: 这里的路径是你刚刚新建的文件的路径,你可以在文件处右击–&gt;复制当前路径</p><ol start="4"><li>修改系统的环境变量</li></ol><p>桌面–&gt; 我的电脑 –&gt; 右击 属性 –&gt; 高级系统设置 –&gt; 环境变量(或者直接打开控制面板)</p><p><img src="https://img2018.cnblogs.com/blog/1349812/201908/1349812-20190804193028346-1384018523.png" alt="img"></p><p>点击新建,创建一个NODE_PATH的系统变量,路径为你创建的node_global文件路径再增一级node_modules,如图</p><p><img src="https://img2018.cnblogs.com/blog/1349812/201908/1349812-20190804193317838-1331095144.png" alt="img"></p><p>在系统变量的path中增加刚刚添加的路径</p><p><img src="https://img2018.cnblogs.com/blog/1349812/201908/1349812-20190804193659892-1021753831.png" alt="img"></p><p>在用户变量中新增一个PATH,路径和NODE_PATH一样</p><p><img src="https://img2018.cnblogs.com/blog/1349812/201908/1349812-20190804194005124-816826517.png" alt="img"></p><ol start="5"><li>全局安装webpack</li></ol><p>npm install webpack -g</p><p>注意: 如果安装的是较高版本的webpack,(现在安装的版本都比较高),还需要安装webpack-cli</p><p>npm install webpack-cli -g</p><p>安装的时候可能有一些warn警告,不影响,只要安装好包就可以</p><p>安装之后你可以到nodejs的文件夹下看下是否有webpack包了</p><p><img src="https://img2018.cnblogs.com/blog/1349812/201908/1349812-20190804194352185-1659318888.png" alt="img"></p><ol start="6"><li>运行webpack -v查看当前版本</li></ol><p><img src="https://img2018.cnblogs.com/blog/1349812/201908/1349812-20190804194511188-1080499621.png" alt="img"></p><p>这样就安装好了,(这里我安装的版本比较低),可以到项目中使用</p><p>注意: 安装之后如果没关闭运行窗口,直接webpack-v,还是会报’webpack’不是内部或外部命令……,一定要把运行窗口关闭后,重新打开运行,项目中也是,先把运行窗口关闭在使用webpack的命令.我安装的时候没关闭窗口,结果一直报错,我删了安装了好几遍,,,坑死了</p><p>在项目中运行:</p><p><img src="https://img2018.cnblogs.com/blog/1349812/201908/1349812-20190804195055164-1172256410.png" alt="img"></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>table-cell绝对是一个现代的布局神器</title>
      <link href="2021/01/07/%E5%B8%83%E5%B1%80%E7%A5%9E%E5%99%A8----displaytable-cell/"/>
      <url>2021/01/07/%E5%B8%83%E5%B1%80%E7%A5%9E%E5%99%A8----displaytable-cell/</url>
      
        <content type="html"><![CDATA[<p>##用float来做布局触发的问题比较多，例如要清除浮动，元素浮动后还会导致该元素脱离文档流，即使你清除float，该元素依旧是脱离文档流。**</p><p>左右布局能用<code>display:inline-block;</code>布局我就用它来布局，但是还是无法完全不使用它，很多布局例如需要靠左和靠右的布局场景下就没办法不去使用float来布局。</p><h2 id="元素两端对齐"><a href="#元素两端对齐" class="headerlink" title="元素两端对齐"></a>元素两端对齐</h2><p>第一个案例是让两个元素分别向左和向右对齐，如果是过去，我一定会用float来实现，但其实用table可以这么做：</p><p><img src="https://ooo.0o0.ooo/2016/08/26/57bfff8e9c83e.png" alt="img"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">  <span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line">          *&#123;</span><br><span class="line"><span class="css">              <span class="selector-tag">box-sizing</span><span class="selector-pseudo">:border-box</span>;</span></span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">          <span class="selector-class">.content</span>&#123;</span></span><br><span class="line">              display: table;</span><br><span class="line"><span class="css">              <span class="selector-tag">border</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-id">#06c</span>;</span></span><br><span class="line"><span class="css">              <span class="selector-tag">padding</span><span class="selector-pseudo">:15px</span> 15<span class="selector-tag">px</span>;</span></span><br><span class="line">              max-width: 1000px;</span><br><span class="line"><span class="css">              <span class="selector-tag">margin</span><span class="selector-pseudo">:10px</span> <span class="selector-tag">auto</span>;</span></span><br><span class="line">              min-width: 320px;</span><br><span class="line"><span class="css">              <span class="selector-tag">width</span><span class="selector-pseudo">:100</span>%;</span></span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">          <span class="selector-class">.box</span>&#123;</span></span><br><span class="line"><span class="css">              <span class="selector-tag">width</span><span class="selector-pseudo">:100px</span>;</span></span><br><span class="line"><span class="css">              <span class="selector-tag">height</span><span class="selector-pseudo">:100px</span>;</span></span><br><span class="line"><span class="css">              <span class="selector-tag">border</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line">              text-align: center;</span><br><span class="line">              display: inline-block;</span><br><span class="line">              font-size: 40px;</span><br><span class="line">              line-height: 100px;</span><br><span class="line">          &#125;</span><br><span class="line"><span class="css">         <span class="selector-class">.right</span>&#123;</span></span><br><span class="line">              text-align: right;</span><br><span class="line">              display: table-cell;</span><br><span class="line">          &#125;</span><br><span class="line"><span class="css">         <span class="selector-class">.left</span>&#123;</span></span><br><span class="line">              text-align: left;</span><br><span class="line">              display: table-cell;</span><br><span class="line">          &#125;     </span><br><span class="line">      <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span>B<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span>A<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="自动平均划分每个小模块，使其一行显示"><a href="#自动平均划分每个小模块，使其一行显示" class="headerlink" title="自动平均划分每个小模块，使其一行显示"></a>自动平均划分每个小模块，使其一行显示</h2><p>第二个案例我们先看看图：</p><p><img src="https://ooo.0o0.ooo/2016/08/26/57c002f096392.png" alt="img"></p><p>遇到上面这种布局，一般会用<code>float</code>来做，或者把每个<code>li</code>设置成<code>display:inline-block;</code>来做，并且都要设置给他们设置一个宽度，而且最痛苦的是5个<code>li</code>如果你设置<code>width:20%;</code>他们一定会掉下来，如果<code>li</code>都设置成<code>display:table-cell；</code>就不会出现这种情况，即使不设置宽度他们也会在一行显示，你在加多一行他也不会掉下来，依旧会在一样显示。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">   &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">   &lt;title&gt;&lt;/title&gt;</span><br><span class="line">   &lt;style <span class="built_in">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><br><span class="line">         *&#123;</span><br><span class="line">           box-sizing:border-box;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">         .content&#123;</span><br><span class="line">             display: table;</span><br><span class="line">             border:1px solid <span class="comment">#06c;</span></span><br><span class="line">             padding:15px 15px;</span><br><span class="line">             max-width: 1000px;</span><br><span class="line">             margin:10px auto;</span><br><span class="line">             min-width:320px;</span><br><span class="line">             width:100%;</span><br><span class="line">         &#125;</span><br><span class="line">        .content ul&#123;</span><br><span class="line">             display: table;</span><br><span class="line">             width:100%;</span><br><span class="line">             padding:0;</span><br><span class="line">             border-right:1px solid <span class="comment">#ccc;</span></span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">        .content ul li&#123;</span><br><span class="line">            display: table-cell;</span><br><span class="line">            border:1px solid <span class="comment">#ccc;</span></span><br><span class="line">            text-align: center;</span><br><span class="line">            height:100px;</span><br><span class="line">            border-right: none;</span><br><span class="line">            line-height: 100px;</span><br><span class="line">         &#125;</span><br><span class="line">   &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">   &lt;div class=<span class="string">&quot;content&quot;</span>&gt;</span><br><span class="line">       &lt;ul&gt;</span><br><span class="line">         &lt;li&gt;1&lt;/li&gt;</span><br><span class="line">         &lt;li&gt;2&lt;/li&gt;</span><br><span class="line">         &lt;li&gt;3&lt;/li&gt;</span><br><span class="line">         &lt;li&gt;4&lt;/li&gt;</span><br><span class="line">         &lt;li&gt;5&lt;/li&gt;</span><br><span class="line">      &lt;/ul&gt;</span><br><span class="line">   &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="图片垂直居中于元素"><a href="#图片垂直居中于元素" class="headerlink" title="图片垂直居中于元素"></a>图片垂直居中于元素</h2><p><img src="https://ooo.0o0.ooo/2016/08/26/57c00719bf4c5.png" alt="img"></p><p>有时候我们需要让图片垂直水平都居中于某个元素，用常规写法比较复杂，但用table-cell则相对简单：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">       &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">       &lt;title&gt;&lt;/title&gt;</span><br><span class="line">       &lt;style <span class="built_in">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><br><span class="line">        *&#123;</span><br><span class="line">            box-sizing:border-box;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">        .content&#123;</span><br><span class="line">            display: table;</span><br><span class="line">            border:1px solid <span class="comment">#06c;</span></span><br><span class="line">            padding:15px 15px;</span><br><span class="line">            max-width: 1000px;</span><br><span class="line">            margin:10px auto;</span><br><span class="line">            min-width:320px;</span><br><span class="line">            width:100%;</span><br><span class="line">         &#125;</span><br><span class="line">        .img-box&#123;</span><br><span class="line">            height:150px;</span><br><span class="line">            width:100px;</span><br><span class="line">            border:1px solid red;</span><br><span class="line">            display: table-cell;</span><br><span class="line">            vertical-align: middle;</span><br><span class="line">            text-align: center;</span><br><span class="line">            background-color: <span class="comment">#4679bd;</span></span><br><span class="line">        &#125;</span><br><span class="line">       &lt;/style&gt;</span><br><span class="line"> &lt;/head&gt;</span><br><span class="line"> &lt;body&gt;</span><br><span class="line">      &lt;div class=<span class="string">&quot;content&quot;</span>&gt;</span><br><span class="line">            &lt;div class=<span class="string">&quot;img-box&quot;</span>&gt;</span><br><span class="line">               ![logo](http://upload-images.jianshu.io/upload_images/1432546-53d1c7f44dc6e873.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;  </span><br><span class="line"> &lt;/body&gt;</span><br><span class="line"> &lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="两box实现等高对齐"><a href="#两box实现等高对齐" class="headerlink" title="两box实现等高对齐"></a>两box实现等高对齐</h2><p>上图中的左侧的box的高度始终跟随右侧的box的高度变化而变化</p><p><img src="https://ooo.0o0.ooo/2016/08/26/57c00c4b0e43b.png" alt="img"></p><p><img src="https://ooo.0o0.ooo/2016/08/26/57c00c820ac9f.png" alt="img"></p><p>上面的案例我故意不对右侧的box设置<code>display:table-cell</code>，只对左侧，所以就会出现左侧跟随右侧高度变化而变化，如果要实现不管两个box哪个高度产生变化另一个就跟随，只需要把右侧的box也设置成<code>display:table－cell</code>就可以实现了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">     &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">     &lt;title&gt;&lt;/title&gt;</span><br><span class="line">     &lt;style <span class="built_in">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><br><span class="line">       *&#123;</span><br><span class="line">           box-sizing:border-box;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .content&#123;</span><br><span class="line">           display: table;</span><br><span class="line">           border:1px solid <span class="comment">#06c;</span></span><br><span class="line">           padding:15px 15px;</span><br><span class="line">           max-width: 1000px;</span><br><span class="line">           margin:10px auto;</span><br><span class="line">           min-width:320px;</span><br><span class="line">           width:100%;</span><br><span class="line">        &#125;</span><br><span class="line">        .img-box&#123;</span><br><span class="line">           height:150px;</span><br><span class="line">           width:100px;</span><br><span class="line">           border:1px solid red;</span><br><span class="line">           display: table-cell;</span><br><span class="line">           vertical-align: middle;</span><br><span class="line">           text-align: center;</span><br><span class="line">           background-color: <span class="comment">#4679bd;</span></span><br><span class="line">        &#125;</span><br><span class="line">        .text-box&#123;</span><br><span class="line">           margin-left: 20px;</span><br><span class="line">           border:1px solid <span class="comment">#ddd;</span></span><br><span class="line">           padding:10px;</span><br><span class="line">        &#125;</span><br><span class="line">     &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div class=<span class="string">&quot;content&quot;</span>&gt;</span><br><span class="line">       &lt;div class=<span class="string">&quot;img-box&quot;</span>&gt;</span><br><span class="line">          ![logo](http://upload-images.jianshu.io/upload_images/1432546-53d1c7f44dc6e873.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</span><br><span class="line">       &lt;/div&gt;</span><br><span class="line">       &lt;div class=<span class="string">&quot;text-box&quot;</span>&gt;</span><br><span class="line">          &lt;span&gt;</span><br><span class="line">              王尼玛和陈尼玛都是年轻有为的骚年，有一天他们相遇了，然后发现都对对方一见钟情后，所以就愉快的生活在了一起。。。。。王尼玛和陈尼玛都是年轻有为的骚年，有一天他们相遇了，然后发现都对对方一见钟情后，所以就愉快的生活在了一起。。。。。王尼玛和陈尼玛都是年轻有为的骚年，有一天他们相遇了，然后发现都对对方一见钟情后，所以就愉快的生活在了一起。。。。。王尼玛和陈尼玛都是年轻有为的骚年，有一天他们相遇了，然后发现都对对方一见钟情后，所以就愉快的生活在了一起。。。。。王尼玛和陈尼玛都是年轻有为的骚年，有一天他们相遇了，然后发现都对对方一见钟情后，所以就愉快的生活在了一起。。。。。王尼玛和陈尼玛都是年轻有为的骚年，有一天他们相遇了，然后发现都对对方一见钟情后，所以就愉快的生活在了一起。。。。。</span><br><span class="line">          &lt;/span&gt;</span><br><span class="line">       &lt;/div&gt;</span><br><span class="line">     &lt;/div&gt; </span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="弹性、响应式布局"><a href="#弹性、响应式布局" class="headerlink" title="弹性、响应式布局"></a>弹性、响应式布局</h2><p><img src="https://ooo.0o0.ooo/2016/08/26/57c00fca9d805.gif" alt="img"></p></img><p>上面的demo中大家只要改变浏览器宽度就会发现他们其实都是会随高度变化自动变化高度的，其实上面内容我大部分没有设置绝对单位，即使设置了也只设置其中一个box另一个就让他去自适应父元素的剩余留下来的宽度，其实布局的时候设置宽度是一件很痛苦的事情，因为除了大量计算有时候可能在多浏览器下还算不准，可能你在chrome设好的宽度在ie下就坑爹了，要写hack才能解决。最后一个案例，据不靠谱的传言faceboox曾经也这么使用过：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">   &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">   &lt;title&gt;&lt;/title&gt;</span><br><span class="line">   &lt;style <span class="built_in">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><br><span class="line">      *&#123;</span><br><span class="line">        box-sizing:border-box;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      .content&#123;</span><br><span class="line">         display: table;</span><br><span class="line">         border:1px solid <span class="comment">#06c;</span></span><br><span class="line">         padding:15px 15px;</span><br><span class="line">         max-width: 1000px;</span><br><span class="line">         margin:10px auto;</span><br><span class="line">         min-width:320px;</span><br><span class="line">         width:100%;</span><br><span class="line">      &#125;</span><br><span class="line">      .left-box&#123;</span><br><span class="line">         <span class="built_in">float</span>:left;</span><br><span class="line">         margin-right: 10px;</span><br><span class="line">         padding-top: 5px;</span><br><span class="line">      &#125;</span><br><span class="line">      .right-box&#123;</span><br><span class="line">         display: table-cell;</span><br><span class="line">         padding:10px;</span><br><span class="line">         border:1px solid <span class="comment">#ccc;</span></span><br><span class="line">         margin-right: 10px;</span><br><span class="line">         vertical-align: top;</span><br><span class="line">      &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">     &lt;div class=<span class="string">&quot;content&quot;</span>&gt;</span><br><span class="line">          &lt;div class=<span class="string">&quot;img-box&quot;</span>&gt;</span><br><span class="line">            ![logo](http://upload-images.jianshu.io/upload_images/1432546-53d1c7f44dc6e873.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">          &lt;div class=<span class="string">&quot;right-box&quot;</span>&gt;</span><br><span class="line">             &lt;span&gt;王尼玛和陈尼玛都是年轻有为的骚年，有一天他们相遇了，然后发现都对对方一见钟情后，所以就愉快的生活在了一起。。。。。王尼玛和陈尼玛都是年轻有为的骚年，有一天他们相遇了，然后发现都对对方一见钟情后，所以就愉快的生活在了一起。。。。。王尼玛和陈尼玛都是年轻有为的骚年，有一天他们相遇了，然后发现都对对方一见钟情后，所以就愉快的生活在了一起。。。。。王尼玛和陈尼玛都是年轻有为的骚年，有一天他们相遇了，然后发现都对对方一见钟情后，所以就愉快的生活在了一起。。。。。王尼玛和陈尼玛都是年轻有为的骚年，有一天他们相遇了，然后发现都对对方一见钟情后，所以就愉快的生活在了一起。。。。。王尼玛和陈尼玛都是年轻有为的骚年，有一天他们相遇了，然后发现都对对方一见钟情后，所以就愉快的生活在了一起。。。。。王尼玛和陈尼玛都是年轻有为的骚年，有一天他们相遇了，然后发现都对对方一见钟情后，所以就愉快的生活在了一起。。。。。王尼玛和陈尼玛都是年轻有为的骚年，有一天他们相遇了，然后发现都对对方一见钟情后，所以就愉快的生活在了一起。。。。。王尼玛和陈尼玛都是年轻有为的骚年，有一天他们相遇了，然后发现都对对方一见钟情后，所以就愉快的生活在了一起。。。。。王尼玛和陈尼玛都是年轻有为的骚年，有一天他们相遇了，然后发现都对对方一见钟情后，所以就愉快的生活在了一起。。。。。王尼玛和陈尼玛都是年轻有为的骚年，有一天他们相遇了，然后发现都对对方一见钟情后，所以就愉快的生活在了一起。。。。。&lt;/span&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;    </span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>移动端布局因为有display:box这等属性，所以table-cell相对就排不上什么大用场，不过在移动端你要用table-cell也不是不可以，根据自己对属性的理解去使用就可以了。</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Promise入门</title>
      <link href="2021/01/05/Promise%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3/"/>
      <url>2021/01/05/Promise%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="异步调用"><a href="#异步调用" class="headerlink" title="异步调用"></a>异步调用</h2><h3 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h3><p>JavaScript 的执行环境是<strong>单线程</strong>。</p><p>所谓单线程，是指 JS 引擎中负责解释和执行 JavaScript 代码的线程只有一个，也就是一次只能完成一项任务，这个任务执行完后才能执行下一个，它会「阻塞」其他任务。这个任务可称为主线程。</p><p>异步模式可以一起执行<strong>多个任务</strong>。</p><p>常见的异步模式有以下几种：</p><ul><li><p>定时器</p></li><li><p>接口调用</p></li><li><p>事件函数</p></li></ul><p>今天这篇文章，我们重点讲一下<strong>接口调用</strong>。接口调用里，重点讲一下<strong>Promise</strong>。</p><h3 id="接口调用的方式"><a href="#接口调用的方式" class="headerlink" title="接口调用的方式"></a>接口调用的方式</h3><p>js 中常见的接口调用方式，有以下几种：</p><ul><li>原生 ajax</li><li>基于 jQuery 的 ajax</li><li>Fetch</li><li>Promise</li><li>axios</li></ul><h3 id="多次异步调用的依赖分析"><a href="#多次异步调用的依赖分析" class="headerlink" title="多次异步调用的依赖分析"></a>多次异步调用的依赖分析</h3><ul><li><p>多次异步调用的结果，顺序可能不同步。</p></li><li><p>异步调用的结果如果<strong>存在依赖</strong>，则需要嵌套。</p></li></ul><p>在 ES5 中，当进行多层嵌套回调时，会导致代码层次过多，很难进行维护和二次开发；而且会导致<strong>回调地狱</strong>的问题。ES6 中的 Promise 就可以解决这两个问题。</p><h2 id="Promise-概述"><a href="#Promise-概述" class="headerlink" title="Promise 概述"></a>Promise 概述</h2><h3 id="Promise-的介绍和优点"><a href="#Promise-的介绍和优点" class="headerlink" title="Promise 的介绍和优点"></a>Promise 的介绍和优点</h3><p>ES6 中的 Promise 是异步编程的一种方案。从语法上讲，Promise 是一个对象，它可以获取异步操作的消息。</p><p>Promise 对象, 可以<strong>用同步的表现形式来书写异步代码</strong>（也就是说，代码看起来是同步的，但本质上的运行过程是异步的）。使用 Promise 主要有以下好处：</p><ul><li><p>可以很好地解决<strong>回调地狱</strong>的问题（避免了层层嵌套的回调函数）。</p></li><li><p>语法非常简洁、可读性强。Promise 对象提供了简洁的 API，使得控制异步操作更加容易。</p></li></ul><h3 id="回调地狱的举例"><a href="#回调地狱的举例" class="headerlink" title="回调地狱的举例"></a>回调地狱的举例</h3><p>假设买菜、做饭、洗碗、倒厨余垃圾都是异步的。</p><p>但真实的场景中，实际的操作流程是：买菜成功之后，才能开始做饭。做饭成功后，才能开始洗碗。洗碗结束后， 再倒厨余垃圾。这里的一系列动作就涉及到了多层嵌套调用，也就是回调地狱。</p><h2 id="Promise-的基本用法"><a href="#Promise-的基本用法" class="headerlink" title="Promise 的基本用法"></a>Promise 的基本用法</h2><p>（1）使用 new 实例化一个 Promise 对象，Promise 的构造函数中传递一个参数。这个参数是一个函数，该函数用于处理异步任务。</p><p>（2）并且传入两个参数：resolve 和 reject，分别表示异步执行成功后的回调函数和异步执行失败后的回调函数；</p><p>（3）通过 promise.then() 处理返回结果。这里的 <code>promise</code> 指的是 Promise 实例。</p><h3 id="Promise-处理异步任务"><a href="#Promise-处理异步任务" class="headerlink" title="Promise 处理异步任务"></a>Promise 处理异步任务</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 第一步：model层的接口封装</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 这里做异步任务（比如ajax 请求接口。这里暂时用定时器代替）</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">var</span> data = &#123; <span class="attr">retCode</span>: <span class="number">0</span>, <span class="attr">msg</span>: <span class="string">&#x27;qianguyihao&#x27;</span> &#125;; <span class="comment">// 接口返回的数据</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">if</span> (data.retCode == <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 接口请求成功时调用</span></span></span><br><span class="line">            resolve(data);</span><br><span class="line"><span class="javascript">          &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 接口请求失败时调用</span></span></span><br><span class="line"><span class="javascript">            reject(&#123; <span class="attr">retCode</span>: -<span class="number">1</span>, <span class="attr">msg</span>: <span class="string">&#x27;network error&#x27;</span> &#125;);</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;, 100);</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="comment">// 第二步：业务层的接口调用。这里的 data 就是 从 resolve 和 reject 传过来的，也就是从接口拿到的数据</span></span></span><br><span class="line">      promise</span><br><span class="line"><span class="javascript">        .then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">// 从 resolve 获取正常结果</span></span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(data);</span></span><br><span class="line">        &#125;)</span><br><span class="line"><span class="javascript">        .catch(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">// 从 reject 获取异常结果</span></span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(data);</span></span><br><span class="line">        &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上方代码中，当从接口返回的数据<code>data.retCode</code>的值不同时，可能会走 resolve，也可能会走 reject，这个由你自己的业务决定。</p><h3 id="Promise-封装-Ajax-请求"><a href="#Promise-封装-Ajax-请求" class="headerlink" title="Promise 封装 Ajax 请求"></a>Promise 封装 Ajax 请求</h3><p>写法1：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> request = <span class="built_in">require</span>(<span class="string">&#x27;request&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Promise 封装接口</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">request1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        request(<span class="string">&#x27;https://www.baidu.com&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (response.retCode == <span class="number">200</span>) &#123;</span><br><span class="line">                <span class="comment">// 这里的 response 是接口1的返回结果</span></span><br><span class="line">                resolve(<span class="string">&#x27;request1 success&#x27;</span> + response);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                reject(<span class="string">&#x27;接口请求失败&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">request1().then(<span class="function">(<span class="params">res1</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 接口1请求成功后，打印接口1的返回结果</span></span><br><span class="line">    <span class="built_in">console</span>.log(res1);</span><br><span class="line">    <span class="keyword">return</span> request2();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>写法2：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> request = <span class="built_in">require</span>(<span class="string">&#x27;request&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Promise 封装接口1</span></span><br><span class="line"><span class="keyword">const</span> request1 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        request(<span class="string">&#x27;https://www.baidu.com&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (response.retCode == <span class="number">200</span>) &#123;</span><br><span class="line">                <span class="comment">// 这里的 response 是接口1的返回结果</span></span><br><span class="line">                resolve(<span class="string">&#x27;request1 success&#x27;</span> + response);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                reject(<span class="string">&#x27;接口请求失败&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> promise;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 先发起request1，等resolve后再发起request2；紧接着，等 request2有了 resolve之后，再发起 request3</span></span><br><span class="line">request1().then(<span class="function">(<span class="params">res1</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 接口1请求成功后，打印接口1的返回结果</span></span><br><span class="line">    <span class="built_in">console</span>.log(res1);</span><br><span class="line">    <span class="keyword">return</span> request2();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="promise-对象的-3-个状态（了解即可）"><a href="#promise-对象的-3-个状态（了解即可）" class="headerlink" title="promise 对象的 3 个状态（了解即可）"></a>promise 对象的 3 个状态（了解即可）</h2><ul><li><p>初始化状态（等待状态）：pending</p></li><li><p>成功状态：fulfilled</p></li><li><p>失败状态：rejected</p></li></ul><p>（1）当 new Promise()执行之后，promise 对象的状态会被初始化为<code>pending</code>，这个状态是初始化状态。<code>new Promise()</code>这行代码，括号里的内容是同步执行的。括号里定义一个 function，function 有两个参数：resolve 和 reject。如下：</p><ul><li><p>如果请求成功了，则执行 resolve()，此时，promise 的状态会被自动修改为 fulfilled。</p></li><li><p>如果请求失败了，则执行 reject()，此时，promise 的状态会被自动修改为 rejected</p></li></ul><p>（2）promise.then()方法，括号里面有两个参数，分别代表两个函数 function1 和 function2：</p><ul><li><p>如果 promise 的状态为 fulfilled（意思是：如果请求成功），则执行 function1 里的内容</p></li><li><p>如果 promise 的状态为 rejected（意思是，如果请求失败），则执行 function2 里的内容</p></li></ul><p>另外，resolve()和 reject()这两个方法，是可以给 promise.then()传递参数的。</p><p>完整代码举例如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//进来之后，状态为pending</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;111&#x27;</span>); <span class="comment">//这行代码是同步的</span></span><br><span class="line">  <span class="comment">//开始执行异步操作（这里开始，写异步的代码，比如ajax请求 or 开启定时器）</span></span><br><span class="line">  <span class="keyword">if</span> (异步的ajax请求成功) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;333&#x27;</span>);</span><br><span class="line">    resolve(<span class="string">&#x27;haha&#x27;</span>); <span class="comment">//如果请求成功了，请写resolve()，此时，promise的状态会被自动修改为fulfilled</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    reject(<span class="string">&#x27;555&#x27;</span>); <span class="comment">//如果请求失败了，请写reject()，此时，promise的状态会被自动修改为rejected</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;222&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用promise的then()</span></span><br><span class="line">promise.then(</span><br><span class="line">  (successMsg) =&gt; &#123;</span><br><span class="line">    <span class="comment">//如果promise的状态为fulfilled，则执行这里的代码</span></span><br><span class="line">    <span class="built_in">console</span>.log(successMsg, <span class="string">&#x27;成功了&#x27;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  (errorMsg) =&gt; &#123;</span><br><span class="line">    <span class="comment">//如果promise的状态为rejected，则执行这里的代码</span></span><br><span class="line">    <span class="built_in">console</span>.log(errorMsg, <span class="string">&#x27;失败了&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="基于-Promise-处理多次-Ajax-请求（链式调用）【重要】"><a href="#基于-Promise-处理多次-Ajax-请求（链式调用）【重要】" class="headerlink" title="基于 Promise 处理多次 Ajax 请求（链式调用）【重要】"></a>基于 Promise 处理多次 Ajax 请求（链式调用）【重要】</h2><p>实际开发中，我们经常需要同时请求多个接口。比如说：在请求完<code>接口1</code>的数据<code>data1</code>之后，需要根据<code>data1</code>的数据，继续请求接口 2，获取<code>data2</code>；然后根据<code>data2</code>的数据，继续请求接口 3。</p><p>换而言之，现在有三个网络请求，请求 2 必须依赖请求 1 的结果，请求 3 必须依赖请求 2 的结果，如果按照往常的写法，会有三层回调，会陷入“回调地狱”。</p><p>这种场景其实就是接口的多层嵌套调用。有了 Promise 之后，我们可以把多层嵌套调用按照<strong>线性</strong>的方式进行书写，非常优雅。也就是说：Promise 可以把原本的<strong>多层嵌套调用</strong>改进为<strong>链式调用</strong>。</p><p>代码举例：（多次 Ajax 请求，链式调用）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> request = <span class="built_in">require</span>(<span class="string">&#x27;request&#x27;</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="comment">// Promise 封装接口1</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> request1 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          request(<span class="string">&#x27;https://www.baidu.com&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (response.retCode == <span class="number">200</span>) &#123;</span></span><br><span class="line"><span class="javascript">              <span class="comment">// 这里的 response 是接口1的返回结果</span></span></span><br><span class="line"><span class="javascript">              resolve(<span class="string">&#x27;request1 success&#x27;</span> + response);</span></span><br><span class="line"><span class="javascript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">              reject(<span class="string">&#x27;接口请求失败&#x27;</span>);</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> promise;</span></span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="comment">// Promise 封装接口2</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> request2 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          request(<span class="string">&#x27;https://www.jd.com&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (response.retCode == <span class="number">200</span>) &#123;</span></span><br><span class="line"><span class="javascript">              <span class="comment">// 这里的 response 是接口2的返回结果</span></span></span><br><span class="line"><span class="javascript">              resolve(<span class="string">&#x27;request2 success&#x27;</span> + response);</span></span><br><span class="line"><span class="javascript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">              reject(<span class="string">&#x27;接口请求失败&#x27;</span>);</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> promise;</span></span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="comment">// Promise 封装接口3</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> request3 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          request(<span class="string">&#x27;https://www.taobao.com&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (response.retCode == <span class="number">200</span>) &#123;</span></span><br><span class="line"><span class="javascript">              <span class="comment">// 这里的 response 是接口3的返回结果</span></span></span><br><span class="line"><span class="javascript">              resolve(<span class="string">&#x27;request3 success&#x27;</span> + response);</span></span><br><span class="line"><span class="javascript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">              reject(<span class="string">&#x27;接口请求失败&#x27;</span>);</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> promise;</span></span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="comment">// 先发起request1，等resolve后再发起request2；紧接着，等 request2有了 resolve之后，再发起 request3</span></span></span><br><span class="line">      request1()</span><br><span class="line"><span class="javascript">        .then(<span class="function">(<span class="params">res1</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">// 接口1请求成功后，打印接口1的返回结果</span></span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(res1);</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> request2();</span></span><br><span class="line">        &#125;)</span><br><span class="line"><span class="javascript">        .then(<span class="function">(<span class="params">res2</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">// 接口2请求成功后，打印接口2的返回结果</span></span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(res2);</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> request3();</span></span><br><span class="line">        &#125;)</span><br><span class="line"><span class="javascript">        .then(<span class="function">(<span class="params">res3</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">// 接口3请求成功后，打印接口3的返回结果</span></span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(res3);</span></span><br><span class="line">        &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面代码中，then 是可以链式调用的，后面的 then 可以拿到前面 resolve 出来的数据。</p><p>这个举例很经典，需要多看几遍。</p><h2 id="return-的函数返回值"><a href="#return-的函数返回值" class="headerlink" title="return 的函数返回值"></a>return 的函数返回值</h2><p>return 后面的返回值，有两种情况：</p><ul><li><p>情况 1：返回 Promise 实例对象。返回的该实例对象会调用下一个 then。</p></li><li><p>情况 2：返回普通值。返回的普通值会直接传递给下一个 then，通过 then 参数中函数的参数接收该值。</p></li></ul><p>我们针对上面这两种情况，详细解释一下。</p><h3 id="情况-1：返回-Promise-实例对象"><a href="#情况-1：返回-Promise-实例对象" class="headerlink" title="情况 1：返回 Promise 实例对象"></a>情况 1：返回 Promise 实例对象</h3><p>举例如下：（这个例子，跟上一段 Ajax 链式调用 的例子差不多）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line">      /*</span><br><span class="line"><span class="javascript">              基于<span class="built_in">Promise</span>发送Ajax请求</span></span><br><span class="line">            */</span><br><span class="line"><span class="javascript">      <span class="function"><span class="keyword">function</span> <span class="title">queryData</span>(<span class="params">url</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="javascript">          xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (xhr.readyState != <span class="number">4</span>) <span class="keyword">return</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (xhr.readyState == <span class="number">4</span> &amp;&amp; xhr.status == <span class="number">200</span>) &#123;</span></span><br><span class="line"><span class="javascript">              <span class="comment">// 处理正常情况</span></span></span><br><span class="line">              resolve(xhr.responseText);</span><br><span class="line"><span class="javascript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">              <span class="comment">// 处理异常情况</span></span></span><br><span class="line"><span class="javascript">              reject(<span class="string">&#x27;接口请求失败&#x27;</span>);</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;;</span><br><span class="line"><span class="javascript">          xhr.responseType = <span class="string">&#x27;json&#x27;</span>; <span class="comment">// 设置返回的数据类型</span></span></span><br><span class="line"><span class="javascript">          xhr.open(<span class="string">&#x27;get&#x27;</span>, url);</span></span><br><span class="line"><span class="javascript">          xhr.send(<span class="literal">null</span>); <span class="comment">// 请求接口</span></span></span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line"><span class="javascript">      <span class="comment">// 发送多个ajax请求并且保证顺序</span></span></span><br><span class="line"><span class="javascript">      queryData(<span class="string">&#x27;http://localhost:3000/api1&#x27;</span>)</span></span><br><span class="line">        .then(</span><br><span class="line">          (data1) =&gt; &#123;</span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(data1));</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> queryData(<span class="string">&#x27;http://localhost:3000/api2&#x27;</span>);</span></span><br><span class="line">          &#125;,</span><br><span class="line">          (error1) =&gt; &#123;</span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(error1);</span></span><br><span class="line">          &#125;</span><br><span class="line">        )</span><br><span class="line">        .then(</span><br><span class="line">          (data2) =&gt; &#123;</span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(data2));</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 这里的 return，返回的是 Promise 实例对象</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">              resolve(<span class="string">&#x27;qianguyihao&#x27;</span>);</span></span><br><span class="line">            &#125;);</span><br><span class="line">          &#125;,</span><br><span class="line">          (error2) =&gt; &#123;</span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(error2);</span></span><br><span class="line">          &#125;</span><br><span class="line">        )</span><br><span class="line"><span class="javascript">        .then(<span class="function">(<span class="params">data3</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(data3);</span></span><br><span class="line">        &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="情况-2：返回-普通值"><a href="#情况-2：返回-普通值" class="headerlink" title="情况 2：返回 普通值"></a>情况 2：返回 普通值</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line">      /*</span><br><span class="line"><span class="javascript">              基于<span class="built_in">Promise</span>发送Ajax请求</span></span><br><span class="line">            */</span><br><span class="line"><span class="javascript">      <span class="function"><span class="keyword">function</span> <span class="title">queryData</span>(<span class="params">url</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="javascript">          xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (xhr.readyState != <span class="number">4</span>) <span class="keyword">return</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (xhr.readyState == <span class="number">4</span> &amp;&amp; xhr.status == <span class="number">200</span>) &#123;</span></span><br><span class="line"><span class="javascript">              <span class="comment">// 处理正常情况</span></span></span><br><span class="line">              resolve(xhr.responseText);</span><br><span class="line"><span class="javascript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">              <span class="comment">// 处理异常情况</span></span></span><br><span class="line"><span class="javascript">              reject(<span class="string">&#x27;接口请求失败&#x27;</span>);</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;;</span><br><span class="line"><span class="javascript">          xhr.responseType = <span class="string">&#x27;json&#x27;</span>; <span class="comment">// 设置返回的数据类型</span></span></span><br><span class="line"><span class="javascript">          xhr.open(<span class="string">&#x27;get&#x27;</span>, url);</span></span><br><span class="line"><span class="javascript">          xhr.send(<span class="literal">null</span>); <span class="comment">// 请求接口</span></span></span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line"><span class="javascript">      <span class="comment">// 发送多个ajax请求并且保证顺序</span></span></span><br><span class="line"><span class="javascript">      queryData(<span class="string">&#x27;http://localhost:3000/api1&#x27;</span>)</span></span><br><span class="line">        .then(</span><br><span class="line">          (data1) =&gt; &#123;</span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(data1));</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> queryData(<span class="string">&#x27;http://localhost:3000/api2&#x27;</span>);</span></span><br><span class="line">          &#125;,</span><br><span class="line">          (error1) =&gt; &#123;</span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(error1);</span></span><br><span class="line">          &#125;</span><br><span class="line">        )</span><br><span class="line">        .then(</span><br><span class="line">          (data2) =&gt; &#123;</span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(data2));</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 返回普通值</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="string">&#x27;qianguyihao&#x27;</span>;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          (error2) =&gt; &#123;</span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(error2);</span></span><br><span class="line">          &#125;</span><br><span class="line">        )</span><br><span class="line">        /*</span><br><span class="line">                    既然上方返回的是 普通值，那么，这里的 then 是谁来调用呢？</span><br><span class="line">                    答案是：这里会产生一个新的 默认的 promise实例，来调用这里的then，确保可以继续进行链式操作。</span><br><span class="line">                */</span><br><span class="line"><span class="javascript">        .then(<span class="function">(<span class="params">data3</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">// 这里的 data3 接收的是 普通值 &#x27;qianguyihao&#x27;</span></span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(data3);</span></span><br><span class="line">        &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Promise-的常用-API：实例方法【重要】"><a href="#Promise-的常用-API：实例方法【重要】" class="headerlink" title="Promise 的常用 API：实例方法【重要】"></a>Promise 的常用 API：实例方法【重要】</h2><p>Promise 自带的 API 提供了如下实例方法：</p><ul><li><p>promise.then()：获取异步任务的正常结果。</p></li><li><p>promise.catch()：获取异步任务的异常结果。</p></li><li><p>promise.finaly()：异步任务无论成功与否，都会执行。</p></li></ul><p>代码举例如下。</p><p>写法 1：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="keyword">function</span> <span class="title">queryData</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> data = &#123; <span class="attr">retCode</span>: <span class="number">0</span>, <span class="attr">msg</span>: <span class="string">&#x27;qianguyihao&#x27;</span> &#125;; <span class="comment">// 接口返回的数据</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (data.retCode == <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="javascript">              <span class="comment">// 接口请求成功时调用</span></span></span><br><span class="line">              resolve(data);</span><br><span class="line"><span class="javascript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">              <span class="comment">// 接口请求失败时调用</span></span></span><br><span class="line"><span class="javascript">              reject(&#123; <span class="attr">retCode</span>: -<span class="number">1</span>, <span class="attr">msg</span>: <span class="string">&#x27;network error&#x27;</span> &#125;);</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;, 100);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      queryData()</span><br><span class="line"><span class="javascript">        .then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">// 从 resolve 获取正常结果</span></span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(<span class="string">&#x27;接口请求成功时，走这里&#x27;</span>);</span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(data);</span></span><br><span class="line">        &#125;)</span><br><span class="line"><span class="javascript">        .catch(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">// 从 reject 获取异常结果</span></span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(<span class="string">&#x27;接口请求失败时，走这里&#x27;</span>);</span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(data);</span></span><br><span class="line">        &#125;)</span><br><span class="line"><span class="javascript">        .finally(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(<span class="string">&#x27;无论接口请求成功与否，都会走这里&#x27;</span>);</span></span><br><span class="line">        &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>写法 2：（和上面的写法 1 等价）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="keyword">function</span> <span class="title">queryData</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> data = &#123; <span class="attr">retCode</span>: <span class="number">0</span>, <span class="attr">msg</span>: <span class="string">&#x27;qianguyihao&#x27;</span> &#125;; <span class="comment">// 接口返回的数据</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (data.retCode == <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="javascript">              <span class="comment">// 接口请求成功时调用</span></span></span><br><span class="line">              resolve(data);</span><br><span class="line"><span class="javascript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">              <span class="comment">// 接口请求失败时调用</span></span></span><br><span class="line"><span class="javascript">              reject(&#123; <span class="attr">retCode</span>: -<span class="number">1</span>, <span class="attr">msg</span>: <span class="string">&#x27;network error&#x27;</span> &#125;);</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;, 100);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      queryData()</span><br><span class="line">        .then(</span><br><span class="line">          (data) =&gt; &#123;</span><br><span class="line"><span class="javascript">            <span class="comment">// 从 resolve 获取正常结果</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&#x27;接口请求成功时，走这里&#x27;</span>);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(data);</span></span><br><span class="line">          &#125;,</span><br><span class="line">          (data) =&gt; &#123;</span><br><span class="line"><span class="javascript">            <span class="comment">// 从 reject 获取异常结果</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&#x27;接口请求失败时，走这里&#x27;</span>);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(data);</span></span><br><span class="line">          &#125;</span><br><span class="line">        )</span><br><span class="line"><span class="javascript">        .finally(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(<span class="string">&#x27;无论接口请求成功与否，都会走这里&#x27;</span>);</span></span><br><span class="line">        &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>：写法 1 和写法 2 的作用是完全等价的。只不过，写法 2 是把 catch 里面的代码作为 then 里面的第二个参数而已。</p><h2 id="Promise-的常用-API：对象方法【重要】"><a href="#Promise-的常用-API：对象方法【重要】" class="headerlink" title="Promise 的常用 API：对象方法【重要】"></a>Promise 的常用 API：对象方法【重要】</h2><p>Promise 自带的 API 提供了如下对象方法：</p><ul><li><p>Promise.all()：并发处理多个异步任务，所有任务都执行成功，才能得到结果。</p></li><li><p>Promise.race(): 并发处理多个异步任务，只要有一个任务执行成功，就能得到结果。</p></li></ul><p>下面来详细介绍。</p><h3 id="Promise-all-代码举例"><a href="#Promise-all-代码举例" class="headerlink" title="Promise.all() 代码举例"></a>Promise.all() 代码举例</h3><p>代码举例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line">      /*</span><br><span class="line"><span class="javascript">              封装 <span class="built_in">Promise</span> 接口调用</span></span><br><span class="line">            */</span><br><span class="line"><span class="javascript">      <span class="function"><span class="keyword">function</span> <span class="title">queryData</span>(<span class="params">url</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="javascript">          xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (xhr.readyState != <span class="number">4</span>) <span class="keyword">return</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (xhr.readyState == <span class="number">4</span> &amp;&amp; xhr.status == <span class="number">200</span>) &#123;</span></span><br><span class="line"><span class="javascript">              <span class="comment">// 处理正常结果</span></span></span><br><span class="line">              resolve(xhr.responseText);</span><br><span class="line"><span class="javascript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">              <span class="comment">// 处理异常结果</span></span></span><br><span class="line"><span class="javascript">              reject(<span class="string">&#x27;服务器错误&#x27;</span>);</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;;</span><br><span class="line"><span class="javascript">          xhr.open(<span class="string">&#x27;get&#x27;</span>, url);</span></span><br><span class="line"><span class="javascript">          xhr.send(<span class="literal">null</span>);</span></span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> promise1 = queryData(<span class="string">&#x27;http://localhost:3000/api1&#x27;</span>);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> promise2 = queryData(<span class="string">&#x27;http://localhost:3000/api2&#x27;</span>);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> promise3 = queryData(<span class="string">&#x27;http://localhost:3000/api3&#x27;</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="built_in">Promise</span>.all([promise1, promise2, promise3]).then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(result);</span></span><br><span class="line">      &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Promise-race-代码举例"><a href="#Promise-race-代码举例" class="headerlink" title="Promise.race() 代码举例"></a>Promise.race() 代码举例</h3><p>代码举例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line">      /*</span><br><span class="line"><span class="javascript">              封装 <span class="built_in">Promise</span> 接口调用</span></span><br><span class="line">            */</span><br><span class="line"><span class="javascript">      <span class="function"><span class="keyword">function</span> <span class="title">queryData</span>(<span class="params">url</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="javascript">          xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (xhr.readyState != <span class="number">4</span>) <span class="keyword">return</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (xhr.readyState == <span class="number">4</span> &amp;&amp; xhr.status == <span class="number">200</span>) &#123;</span></span><br><span class="line"><span class="javascript">              <span class="comment">// 处理正常结果</span></span></span><br><span class="line">              resolve(xhr.responseText);</span><br><span class="line"><span class="javascript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">              <span class="comment">// 处理异常结果</span></span></span><br><span class="line"><span class="javascript">              reject(<span class="string">&#x27;服务器错误&#x27;</span>);</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;;</span><br><span class="line"><span class="javascript">          xhr.open(<span class="string">&#x27;get&#x27;</span>, url);</span></span><br><span class="line"><span class="javascript">          xhr.send(<span class="literal">null</span>);</span></span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> promise1 = queryData(<span class="string">&#x27;http://localhost:3000/api1&#x27;</span>);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> promise2 = queryData(<span class="string">&#x27;http://localhost:3000/api2&#x27;</span>);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> promise3 = queryData(<span class="string">&#x27;http://localhost:3000/api3&#x27;</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="built_in">Promise</span>.race([promise1, promise2, promise3]).then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(result);</span></span><br><span class="line">      &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>了解这些内容之后， Promise 的基本用法，你就已经掌握了。</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 Hexo+GitHub 搭建个人免费博客教程（小白向）</title>
      <link href="2021/01/03/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%85%8D%E8%B4%B9%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/"/>
      <url>2021/01/03/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%85%8D%E8%B4%B9%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li>简介：GitHub Pages 和 Hexo &amp; 原理</li></ul><ol><li>准备：环境搭建<br>1.1. 注意事项<br>1.2. 环境搭建</li><li>连接 Github</li><li>创建 Github Pages 仓库</li><li>本地安装 Hexo 博客程序<br>4.1. 安装 Hexo<br>4.2. Hexo 初始化和本地预览</li><li>部署 Hexo 到 GitHub Pages</li><li>绑定域名（可选）</li><li>开始使用<br>7.1. 发布文章<br>7.2. 网站设置<br>7.3. 更换主题<br>7.4. 常用代码<br>7.4. 常用设置</li><li>常见问题</li></ol><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h3 id="GitHub-Pages-是什么？"><a href="#GitHub-Pages-是什么？" class="headerlink" title="# GitHub Pages 是什么？"></a><strong># GitHub Pages 是什么？</strong></h3><ul><li><a href="https://help.github.com/en/articles/what-is-github-pages">What is GitHub Pages? - GitHub Help</a></li></ul><p>GitHub Pages 是由 GitHub 官方提供的一种免费的静态站点托管服务，让我们可以在 GitHub 仓库里托管和发布自己的静态网站页面。</p><h3 id="Hexo-是什么？"><a href="#Hexo-是什么？" class="headerlink" title="# Hexo 是什么？"></a><strong># Hexo 是什么？</strong></h3><ul><li>官网：<a href="https://hexo.io/zh-cn/">hexo.io</a></li></ul><p>Hexo 是一个快速、简洁且高效的静态博客框架，它基于 Node.js 运行，可以将我们撰写的 Markdown 文档解析渲染成静态的 HTML 网页。</p><h3 id="Hexo-GitHub-文章发布原理"><a href="#Hexo-GitHub-文章发布原理" class="headerlink" title="# Hexo + GitHub 文章发布原理"></a><strong># Hexo + GitHub 文章发布原理</strong></h3><p>在本地撰写 Markdown 格式文章后，通过 Hexo 解析文档，渲染生成具有主题样式的 HTML 静态网页，再推送到 GitHub 上完成博文的发布。</p><p><img src="https://pic3.zhimg.com/v2-a193a47cf70fe6ecf156e5f3d34920ea_r.jpg" alt="img"></p><h3 id="优点和不足"><a href="#优点和不足" class="headerlink" title="# 优点和不足"></a><strong># 优点和不足</strong></h3><p><strong>优点：</strong>完全免费；静态站点，轻量快速；可按需求自由定制改造；托管在 GitHub，安全省心；迁移方便……</p><p><strong>不足：</strong>发文不便，依赖于本地环境；更适合个人博客使用；GitHub 在国内访问速度有点不快。</p><h2 id="1-准备"><a href="#1-准备" class="headerlink" title="1. 准备"></a>1. 准备</h2><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="# 注意事项"></a><strong># 注意事项</strong></h3><ul><li>输入代码时，核对准确，最好切换成英文输入法；</li><li>将文中的 “用户名” 和 “邮箱” 替换为自己的 GitHub 账户名和绑定的邮箱；</li><li>统一使用 Git Bash 进行操作（支持 Win、Mac）；</li><li>小白请严格按步骤进行，不要跳！</li></ul><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="# 环境搭建"></a><strong># 环境搭建</strong></h3><p>Hexo 基于 Node.js，搭建过程中还需要使用 npm（Node.js 已带） 和 git，因此先搭建本地操作环境，安装 Node.js 和 Git。</p><ul><li>Node.js：<a href="https://nodejs.org/zh-cn">https://nodejs.org/zh-cn</a></li><li>Git：<a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a></li></ul><p>下载 Node.js 和 Git 程序并安装，一路点 “下一步” 按默认配置完成安装。</p><p>安装完成后，Win+R 输入 cmd 并打开，依次输入 <code>node -v</code>、<code>npm -v</code> 和 <code>git --version</code> 并回车，如下图出现程序版本号即可。</p><p><img src="https://pic1.zhimg.com/v2-27b47b5ae479ce7987851292a67774b0_b.jpg" alt="img"></p><h2 id="2-连接-Github"><a href="#2-连接-Github" class="headerlink" title="2. 连接 Github"></a>2. 连接 Github</h2><p>使用邮箱注册 <a href="https://github.com/">GitHub</a> 账户，选择免费账户（Free），并完成邮件验证。</p><p>右键 -&gt; Git Bash Here，<strong>设置用户名和邮箱</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;GitHub 用户名&quot;</span><br><span class="line">git config --global user.email &quot;GitHub 邮箱&quot;</span><br></pre></td></tr></table></figure><p><strong>创建 SSH 密匙</strong>：</p><p>输入 <code>ssh-keygen -t rsa -C &quot;GitHub 邮箱&quot;</code>，然后一路回车。</p><p><strong>添加密匙：</strong></p><p>进入 [C:\Users \ 用户名 .ssh] 目录（要勾选显示 “隐藏的项目”），用记事本打开公钥 id_rsa.pub 文件并复制里面的内容。</p><p>登陆 GitHub ，进入 Settings 页面，选择左边栏的 SSH and GPG keys，点击 New SSH key。</p><p>Title 随便取个名字，粘贴复制的 id_rsa.pub 内容到 Key 中，点击 Add SSH key 完成添加。</p><p><img src="https://pic1.zhimg.com/v2-9125065afd24332d7cd84feb6a350730_r.jpg" alt="img"></p><p><strong>验证连接：</strong></p><p>打开 Git Bash，输入 <code>ssh -T git@github.com</code> 出现 “Are you sure……”，输入 yes 回车确认。</p><p><img src="https://pic3.zhimg.com/v2-b4c7524a2451f4ab42f9c22ea3c7b6be_r.jpg" alt="img"></p><p>显示 “Hi xxx! You’ve successfully……” 即连接成功。</p><h2 id="3-创建-Github-Pages-仓库"><a href="#3-创建-Github-Pages-仓库" class="headerlink" title="3. 创建 Github Pages 仓库"></a>3. 创建 Github Pages 仓库</h2><p>GitHub 主页右上角加号 -&gt; New repository：</p><ul><li>Repository name 中输入 <code>用户名.github.io</code></li><li>勾选 “Initialize this repository with a README”</li><li>Description 选填</li></ul><p>填好后点击 Create repository 创建。</p><p><img src="https://pic2.zhimg.com/v2-67a8165154f4c5f4a6333e76e78ed815_r.jpg" alt="img"></p><p>创建后默认自动启用 HTTPS，博客地址为：<code>https://用户名.github.io</code></p><h2 id="4-本地安装-Hexo-博客程序"><a href="#4-本地安装-Hexo-博客程序" class="headerlink" title="4. 本地安装 Hexo 博客程序"></a>4. 本地安装 Hexo 博客程序</h2><p>新建一个文件夹用来存放 Hexo 的程序文件，如 Hexo-Blog。选中该文件夹，按住shift右键-&gt;在此处打开shell，</p><h3 id="4-1-安装-Hexo"><a href="#4-1-安装-Hexo" class="headerlink" title="# 4.1 安装 Hexo"></a><strong># 4.1 安装 Hexo</strong></h3><p>使用 npm 一键安装 Hexo 博客程序：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli </span><br></pre></td></tr></table></figure><p>Mac 用户需要管理员权限（sudo），运行这条命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>安装时间有点久（真的很慢！），界面也没任何反应，<strong>耐心等待</strong>，安装完成后如下图。</p><p><img src="https://pic2.zhimg.com/v2-01e7fc8bb9280437deb437bf73a190a1_r.jpg" alt="img"></p><h3 id="4-2-Hexo-初始化和本地预览"><a href="#4-2-Hexo-初始化和本地预览" class="headerlink" title="# 4.2 Hexo 初始化和本地预览"></a><strong># 4.2 Hexo 初始化和本地预览</strong></h3><p><strong>初始化并安装所需组件：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo init      # 初始化</span><br><span class="line">npm install    # 安装组件</span><br></pre></td></tr></table></figure><p>完成后依次输入下面命令，<strong>启动本地服务器进行预览</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g   # 生成页面</span><br><span class="line">hexo s   # 启动预览</span><br></pre></td></tr></table></figure><p><strong>本地访问</strong> <code>http://localhost:4000</code><strong>，出现 Hexo 默认页面，本地博客安装成功！</strong></p><p><img src="https://pic4.zhimg.com/v2-1c3baeecf1ef3bec5c8ef3f14639f68b_r.jpg" alt="img"></p><p><strong>Tips：</strong>如果出现页面加载不出来，可能是端口被占用了。Ctrl+C 关闭服务器，运行 <code>hexo server -p 5000</code> 更改端口号后重试。</p><p>Hexo 博客文件夹目录结构如下：</p><p><img src="https://pic1.zhimg.com/v2-264c75c0e493ae8cc5f283567c64ff2c_r.jpg" alt="img"></p><h2 id="5-部署-Hexo-到-GitHub-Pages"><a href="#5-部署-Hexo-到-GitHub-Pages" class="headerlink" title="5. 部署 Hexo 到 GitHub Pages"></a>5. 部署 Hexo 到 GitHub Pages</h2><p>本地博客测试成功后，就是上传到 GitHub 进行部署，使其能够在网络上访问。</p><p>首先<strong>安装 hexo-deployer-git</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>然后<strong>修改 _config.yml</strong> 文件末尾的 Deployment 部分，修改成如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@github.com:用户名&#x2F;用户名.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>完成后运行 <code>hexo d</code> 将网站上传部署到 GitHub Pages。</p><p>完成！这时访问我们的 GitHub 域名 <code>https://用户名.github.io</code> 就可以看到 Hexo 网站了。</p><h2 id="6-绑定域名（可选）"><a href="#6-绑定域名（可选）" class="headerlink" title="6. 绑定域名（可选）"></a>6. 绑定域名（可选）</h2><p>博客搭建完成使用的是 GitHub 的子域名（用户名.<a href="http://github.io/">http://github.io</a>），我们可以为 Hexo 博客绑定自己的域名替换 GitHub 域名，更加个性化和专业，也利于 SEO。</p><p>我们使用 <a href="https://www.namesilo.com/?rid=d27fa32do">Namesilo</a> 进行注册，便宜好用没啥套路，使用优惠码 <code>okoff</code> 优惠一美元，com 域名大概 50 块一年。</p><h3 id="6-1-域名注册和解析"><a href="#6-1-域名注册和解析" class="headerlink" title="# 6.1 域名注册和解析"></a><strong># 6.1 域名注册和解析</strong></h3><ul><li>域名注册和解析教程：<a href="https://zhuanlan.zhihu.com/p/33921436">Namesilo 域名购买及使用教程</a></li></ul><p>按上面教程注册并解析域名，在 DNS 设置部分，删除自带的记录，然后添加 CNAME 记录将 www 域名解析指向 <code>用户名.github.io</code>。</p><p><img src="https://pic3.zhimg.com/v2-d5d37c8ad523d8ab5c7c200fabc9585e_r.jpg" alt="img"></p><h3 id="6-2-绑定域名到-Hexo-博客"><a href="#6-2-绑定域名到-Hexo-博客" class="headerlink" title="# 6.2 绑定域名到 Hexo 博客"></a><strong># 6.2 绑定域名到 Hexo 博客</strong></h3><p>进入本地博客文件夹的 source 目录，打开记事本，里面输入自己的域名，如 <a href="http://www.example.com,保存名称为/">http://www.example.com，保存名称为</a> “CNAME”，格式为 “所有文件”（无 .txt 后缀）。</p><p>清除缓存等文件并重新发布网站：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean   # 清除缓存文件等</span><br><span class="line">hexo g       # 生成页面</span><br><span class="line">hexo s       # 启动预览</span><br></pre></td></tr></table></figure><p>现在就可以使用自己的域名访问 Hexo 博客了。</p><h3 id="6-3-开启-HTTPS"><a href="#6-3-开启-HTTPS" class="headerlink" title="# 6.3 开启 HTTPS"></a><strong># 6.3 开启 HTTPS</strong></h3><p>配置自己的域名后，需要我们手动开启 HTTPS。打开博客所在 GitHub 仓库，Settings -&gt; 下拉找到 GitHub Pages -&gt; 勾选 Enforce HTTPS。</p><p><img src="https://pic4.zhimg.com/v2-54f8744afc9746884e6b3acecfc5f8cf_r.jpg" alt="img"></p><p>HTTPS 证书部署成功需要一定时间，等大概几分钟再访问域名，就可以看到域名前面的小绿锁了，HTTPS 配置完成！</p><h2 id="7-开始使用"><a href="#7-开始使用" class="headerlink" title="7. 开始使用"></a>7. 开始使用</h2><h3 id="7-1-发布文章"><a href="#7-1-发布文章" class="headerlink" title="# 7.1 发布文章"></a><strong># 7.1 发布文章</strong></h3><p>进入博客所在目录，右键打开 Git Bash Here，创建博文：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;My New Post&quot;</span><br></pre></td></tr></table></figure><p>然后 source 文件夹中会出现一个 My New Post.md 文件，就可以使用 Markdown 编辑器在该文件中撰写文章了。</p><p>写完后运行下面代码将文章渲染并部署到 GitHub Pages 上完成发布。<strong>以后每次发布文章都是这两条命令。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g   # 生成页面</span><br><span class="line">hexo d   # 部署发布</span><br></pre></td></tr></table></figure><p>也可以不使用命令自己创建 .md 文件，只需在文件开头手动加入如下格式 Front-matter 即可，写完后运行 <code>hexo g</code> 和 <code>hexo d</code> 发布。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hello World # 标题</span><br><span class="line">date: 2019&#x2F;3&#x2F;26 hh:mm:ss # 时间</span><br><span class="line">categories: # 分类</span><br><span class="line">- Diary</span><br><span class="line">tags: # 标签</span><br><span class="line">- PS3</span><br><span class="line">- Games</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">摘要</span><br><span class="line">&lt;!--more--&gt;</span><br><span class="line">正文</span><br></pre></td></tr></table></figure><h3 id="7-2-网站设置"><a href="#7-2-网站设置" class="headerlink" title="# 7.2 网站设置"></a><strong># 7.2 网站设置</strong></h3><p>包括网站名称、描述、作者、链接样式等，全部在网站目录下的 _config.yml 文件中，参考<a href="https://hexo.io/zh-cn/docs/configuration">官方文档</a>按需要编辑。</p><p>注意：冒号后要加一个空格！</p><h3 id="7-3-更换主题"><a href="#7-3-更换主题" class="headerlink" title="# 7.3 更换主题"></a><strong># 7.3 更换主题</strong></h3><p>在 <a href="https://hexo.io/themes/">Themes | Hexo</a> 选择一个喜欢的主题，比如 <a href="http://theme-next.iissnan.com/getting-started.html">NexT</a>，进入网站目录打开 Git Bash Here 下载主题：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;iissnan&#x2F;hexo-theme-next themes&#x2F;next</span><br><span class="line"></span><br><span class="line">git clone -b master https:&#x2F;&#x2F;github.com&#x2F;jerryc127&#x2F;hexo-theme-butterfly.git themes&#x2F;butterfly</span><br><span class="line">页面效果：https:&#x2F;&#x2F;telcruel.gitee.io&#x2F;</span><br></pre></td></tr></table></figure><p>安装比较慢，可以选择安装<a href="https://butterfly.js.org/">butterfly</a></p><p>然后修改 _config.yml 中的 theme 为新主题名称 next，发布。（有的主题需要将 _config.yml 替换为主题自带的，参考主题说明。）</p><h3 id="7-4-常用命令"><a href="#7-4-常用命令" class="headerlink" title="# 7.4 常用命令"></a><strong># 7.4 常用命令</strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;name&quot;       # 新建文章</span><br><span class="line">hexo new page &quot;name&quot;  # 新建页面</span><br><span class="line">hexo g                # 生成页面</span><br><span class="line">hexo d                # 部署</span><br><span class="line">hexo g -d             # 生成页面并部署</span><br><span class="line">hexo s                # 本地预览</span><br><span class="line">hexo clean            # 清除缓存和已生成的静态文件</span><br><span class="line">hexo help             # 帮助</span><br></pre></td></tr></table></figure><h3 id="7-5常用配置"><a href="#7-5常用配置" class="headerlink" title="#7.5常用配置"></a>#7.5常用配置</h3><p>可以在 <code>_config.yml</code> 中修改大部分的配置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">参数描述</span><br><span class="line">title网站标题</span><br><span class="line">subtitle网站副标题</span><br><span class="line">description网站描述</span><br><span class="line">keywords网站的关键词。支援多个关键词。</span><br><span class="line">author您的名字</span><br><span class="line">language网站使用的语言。对于简体中文用户来说，使用不同的主题可能需要设置成不同的值，请参考你的主题的文档自行设置，常见的有 zh-Hans和 zh-CN。</span><br><span class="line">timezone网站时区。Hexo 默认使用您电脑的时区。请参考 时区列表 进行设置，如 America&#x2F;New_York, Japan, 和 UTC 。一般的，对于中国大陆地区可以使用 Asia&#x2F;Shanghai。</span><br></pre></td></tr></table></figure><h2 id="8-常见问题"><a href="#8-常见问题" class="headerlink" title="8 常见问题"></a>8 常见问题</h2><p><strong>1、Hexo 设置显示文章摘要，首页不显示全文</strong></p><p>Hexo 主页文章列表默认会显示文章全文，浏览时很不方便，可以在文章中插入 <code>&lt;!--more--&gt;</code> 进行分段。</p><p>该代码前面的内容会作为摘要显示，而后面的内容会替换为 “Read More” 隐藏起来。</p><p><strong>2、设置网站图标</strong></p><p>进入 themes / 主题 文件夹，打开 _config.yml 配置文件，找到 favicon 修改，一般格式为：<code>favicon: 图标地址</code>。（不同主题可能略有差别）</p><p><strong>3、修改并部署后没有效果</strong></p><p>使用 <code>hexo clean</code> 清理后重新部署。</p><p><strong>4、开启 HTTPS 后访问网站显示连接不安全？</strong></p><p>证书还未部署生效，等待一会儿，清除浏览器缓存再试。</p><p><strong>5、Mac 安装 Hexo 报错无法安装</strong></p><p>Mac 用户需要管理员权限运行，使用 <code>sudo npm install -g hexo-cli</code> 命令安装。</p><p><strong>6、npm 下载速度慢，甚至完全没反应</strong></p><p>使用 npm 安装程序等待很久也没反应，或者下载速度很慢，可以更换 npm 源为国内 npm 镜像。</p><p>临时更换方法：在 npm 安装命令后面加上：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--registry https:&#x2F;&#x2F;registry.npm.taobao.org </span><br></pre></td></tr></table></figure><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      
        <tags>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的博客开通啦</title>
      <link href="2021/01/02/Blogl%E5%BC%80%E5%A7%8B%E4%BA%86/"/>
      <url>2021/01/02/Blogl%E5%BC%80%E5%A7%8B%E4%BA%86/</url>
      
        <content type="html"><![CDATA[<p><strong>一直在电脑本地用Markdown记笔记,</strong><br><strong>突然觉得把笔记或是把自己的学习心得（主要是踩坑心得）放到博客中是一个不错的选择。</strong><br><strong>一来也可以监督自己，好好消化所学知识。</strong><br><strong>二来，要是这些心得能帮到需要的人就更好啦！</strong><br><strong>三来，记录一下自己的生活也不错呀~</strong><br><strong>不定时更新，欢迎加微信交流</strong></p><head>  <script src='//cdn.jsdelivr.net/npm/@waline/client/dist/Waline.min.js'></script></head><body>  <div id="waline"></div>  <script>    new Waline({      el: '#waline',      serverURL: 'https://comments-api.vercel.app',    });  </script></body><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      
        <tags>
            
            <tag> other </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
