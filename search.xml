<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>飞书机器人接入chatGPT</title>
      <link href="/%5Bobject%20Object%5D/2023/03/07/%E9%A3%9E%E4%B9%A6%E6%9C%BA%E5%99%A8%E4%BA%BA%E6%8E%A5%E5%85%A5chatGPT/"/>
      <url>/%5Bobject%20Object%5D/2023/03/07/%E9%A3%9E%E4%B9%A6%E6%9C%BA%E5%99%A8%E4%BA%BA%E6%8E%A5%E5%85%A5chatGPT/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>准备工作</strong>：注册2个飞书账户，一个是企业管理员A账户，一个是加入该企业的B账户。</p><h3 id="1-如何使用本项目代码？"><a href="#1-如何使用本项目代码？" class="headerlink" title="1. 如何使用本项目代码？"></a>1. 如何使用本项目代码？</h3><blockquote><ol><li>分别将上面的2个账号用2个浏览器登陆（如果只一个浏览器登陆，需要注销再登陆比较麻烦）。下面的操作主要是在B账户上面完成。用B账户登陆开发者平台，并获取到 APPID 和 Secret</li></ol></blockquote><p>访问 <a href="https://open.feishu.cn/app?lang=zh-CN">开发者后台</a>，创建一个名为 <strong>ChatGPT</strong> 的应用，并上传应用头像。创建完成后，访问【凭证与基础信息】页面，复制 APPID 和 Secret 备用。</p><p><img src="https://postimg.aliavv.com/picgo/202302100120339.png" alt="image-20230210012031179"></p><h3 id="2-开启机器人能力"><a href="#2-开启机器人能力" class="headerlink" title="2. 开启机器人能力"></a>2. 开启机器人能力</h3><p>打开应用的机器人应用功能</p><p><img src="https://postimg.aliavv.com/picgo/202302100121008.png" alt="image-20230210012110735"></p><h3 id="3-访问-AirCode-，创建一个新的项目"><a href="#3-访问-AirCode-，创建一个新的项目" class="headerlink" title="3. 访问 AirCode ，创建一个新的项目"></a>3. 访问 <a href="https://aircode.io/dashboard">AirCode</a> ，创建一个新的项目</h3><p>登录 <a href="https://aircode.io/dashboard">AirCode</a> ，创建一个新的 Node.js v16 的项目，项目名可以根据你的需要填写，可以填写 ChatGPT</p><p><img src="https://postimg.aliavv.com/picgo/202302100123254.png" alt="image-20230210012334145"></p><h3 id="4-复制本项目下的-event-js-的源码内容，并粘贴到-Aircode-当中"><a href="#4-复制本项目下的-event-js-的源码内容，并粘贴到-Aircode-当中" class="headerlink" title="4. 复制本项目下的 event.js 的源码内容，并粘贴到 Aircode 当中"></a>4. 复制本项目下的 event.js 的源码内容，并粘贴到 Aircode 当中</h3><p>访问<a href="https://github.com/bestony/ChatGPT-Feishu/blob/master/event.js">ChatGPT-Feishu/event.js at master · bestony/ChatGPT-Feishu (github.com)</a>，复制代码</p><p><img src="https://postimg.aliavv.com/picgo/202302100125750.png" alt="image-20230210012555571"></p><p>并把代码粘贴到 AIrcode 默认创建的 hello.js 。然后点击顶部的 deploy ，完成第一次部署。</p><p><img src="https://postimg.aliavv.com/picgo/202302100126536.png" alt="image-20230210012653296"></p><p>部署成功后，可以在下方看到。</p><p><img src="https://postimg.aliavv.com/picgo/202302100128288.png" alt="image-20230210012808063"></p><h3 id="5-安装所需依赖"><a href="#5-安装所需依赖" class="headerlink" title="5. 安装所需依赖"></a>5. 安装所需依赖</h3><p>这个开发过程中，我们使用了飞书开放平台官方提供的 SDK，以及 axios 来完成调用。点击页面左下角的包管理器，安装 <code>axios</code> 和 <code>@larksuiteoapi/node-sdk</code>。安装完成后，点击上方的部署，使其生效。</p><p><img src="https://postimg.aliavv.com/picgo/202302100259761.png" alt="image-20230210025955556"></p><h3 id="6-配置环境变量"><a href="#6-配置环境变量" class="headerlink" title="6. 配置环境变量"></a>6. 配置环境变量</h3><p>接下来我们来配置环境变量，你需要配置三个环境变量 <code>APPID</code> 、<code>SECRET</code> 和 <code>BOTNAME</code>，APPID 填写你刚刚在飞书开放平台获取的 APPID，SECRET 填写你在飞书开放平台获取到的 SECRET，BOTNAME 填写你的机器人的名字。</p><blockquote><p>配置环境变量可能会失败，可以多 deploy 几次，确保配置成功。</p></blockquote><p><img src="https://postimg.aliavv.com/picgo/202302100133798.png" alt="image-20230210013355689"></p><p>配置完成后，点击上方的 <strong>Deploy</strong> 按钮部署，使这些环境变量生效。</p><p><img src="https://postimg.aliavv.com/picgo/202302100135209.png" alt="image-20230210013518142"></p><p>会变成这样的</p><p><img src="https://postimg.aliavv.com/picgo/202302100136124.png" alt="image-20230210013603084"></p><h3 id="7-获取-OpenAI-的-KEY-，并配置环境变量"><a href="#7-获取-OpenAI-的-KEY-，并配置环境变量" class="headerlink" title="7. 获取 OpenAI 的 KEY ，并配置环境变量"></a>7. 获取 OpenAI 的 KEY ，并配置环境变量</h3><p>访问 <a href="https://platform.openai.com/account/api-keys">Account API Keys - OpenAI API</a> ，点击这里的 Create new secret key ，创建一个新的 key ，并保存备用。</p><p><img src="https://postimg.aliavv.com/picgo/202302100137078.png" alt="image-20230210013702015"></p><p>重新回到 Aircode， 配置一个名为 <code>KEY</code> 的环境变量，并填写你刚刚生成的 Key 。配置完成后，点击部署使其生效。</p><p><img src="https://postimg.aliavv.com/picgo/202302100223839.png" alt="image-20230210022322720"></p><h3 id="8-开启权限并配置事件"><a href="#8-开启权限并配置事件" class="headerlink" title="8. 开启权限并配置事件"></a>8. 开启权限并配置事件</h3><p>访问开放平台页面，开通如下 6 个权限：</p><ul><li>im:message</li><li>im:message.group_at_msg</li><li>im:message.group_at_msg:readonly</li><li>im:message.p2p_msg</li><li>im:message.p2p_msg:readonly</li><li>im:message:send_as_bot</li></ul><p><img src="https://postimg.aliavv.com/picgo/202302100224325.png" alt="image-20230210022432066"></p><p>然后回到 AirCode ，复制函数的调用地址。</p><p><img src="https://postimg.aliavv.com/picgo/202302100226846.png" alt="image-20230210022628784"></p><p>然后回到事件订阅界面，添加事件。</p><p><img src="https://postimg.aliavv.com/picgo/202302100227786.png" alt="image-20230210022720552"></p><h3 id="9-发布版本，等待审核（用企业管理员的账户审核）"><a href="#9-发布版本，等待审核（用企业管理员的账户审核）" class="headerlink" title="9. 发布版本，等待审核（用企业管理员的账户审核）"></a>9. 发布版本，等待审核（用企业管理员的账户审核）</h3><p>上述这些都配置完成后，你的机器人就配置好了，接下来只需要在飞书开放平台后台找到应用发布，创建一个全新的版本并发布版本即可。<br>打开登陆有A账户的浏览器，在飞书开发者管理后台通过B账户提交的该审核即可。</p><h2 id="效果预览"><a href="#效果预览" class="headerlink" title="效果预览"></a>效果预览</h2><p><img src="https://img1.imgtp.com/2023/03/07/GYiNiioI.png"></p><p><img src="https://img1.imgtp.com/2023/03/07/wte6niR1.png"></p><h2 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h2><h3 id="1-提交事件订阅地址时提示-Challenge-Code-没有返回？"><a href="#1-提交事件订阅地址时提示-Challenge-Code-没有返回？" class="headerlink" title="1. 提交事件订阅地址时提示 Challenge Code 没有返回？"></a>1. 提交事件订阅地址时提示 Challenge Code 没有返回？</h3><p>可以看看是不是配置了  Encrypt Key ，暂时不支持对加密数据解密。路径是应用后台 - 事件订阅</p><p><img src="https://user-images.githubusercontent.com/13283837/218002249-362a40ab-3f5d-493b-80ec-a2b0efa2b5c9.png" alt="image"></p><h3 id="2-可以私聊回复，但没办法群聊回复？"><a href="#2-可以私聊回复，但没办法群聊回复？" class="headerlink" title="2. 可以私聊回复，但没办法群聊回复？"></a>2. 可以私聊回复，但没办法群聊回复？</h3><p>确保 6 项开放平台权限都已经开通且已经发布版本，权限进入可用状态。</p><p>另一情况是飞书机器人名称与 BOTNAME 变量不一致。由于 aircode 的环境变量<strong>不支持中文</strong>，如果机器人名称为中文也会造成部署失败。</p><p>解决办法：修改飞书机器人的名称为英文，或直接修改代码中的 BOTNAME 值。</p><h3 id="3-aircode-提示报错-failed-to-obtain-token"><a href="#3-aircode-提示报错-failed-to-obtain-token" class="headerlink" title="3. aircode 提示报错 failed to obtain token?"></a>3. aircode 提示报错 failed to obtain token?</h3><p>说明你的 aircode 的环境变量配置没成功，可以重新配置一下，然后再部署一下。</p><h3 id="4-cannot-set-propoertis-of-undefined-setting-‘event-type’"><a href="#4-cannot-set-propoertis-of-undefined-setting-‘event-type’" class="headerlink" title="4. cannot set propoertis of undefined (setting ‘event_type’)?"></a>4. cannot set propoertis of undefined (setting ‘event_type’)?</h3><p>说明你用 HTTP 发起请求 / 或者用了 aircode 的debug 功能，是正常现象。</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      
        <tags>
            
            <tag> chatGPT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac环境配置和优化</title>
      <link href="/%5Bobject%20Object%5D/2023/02/23/Mac%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%92%8C%E4%BC%98%E5%8C%96/"/>
      <url>/%5Bobject%20Object%5D/2023/02/23/Mac%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%92%8C%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>此文记录 Mac 的上手和常备软件等事宜… 仅供参考</p><h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00. 前言"></a>0x00. 前言</h2><p>首先看看全览图, 有个基本认识, 参考自网络:</p><p><a href="http://img.tingtattoo.cn/mac/dTRNbJ.png"><img src="http://img.tingtattoo.cn/mac/dTRNbJ.png" alt="dTRNbJ"></a></p><p>为了简化描述, 后文快捷键中如果出现 <code>cmd</code> 标识的都是 <code>command</code> 的缩写, 然后 MacOS 版本基于 <code>10.15</code>, 后续本质没有太大差别, 但是 ARM 和 11.x 后对不少小众软件存在兼容和适配的问题 (不过参考 macwk 网站会有相关兼容提示), 注意确认</p><h2 id="0x01-系统配置"><a href="#0x01-系统配置" class="headerlink" title="0x01. 系统配置"></a>0x01. 系统配置</h2><h4 id="A-触控板"><a href="#A-触控板" class="headerlink" title="A. 触控板"></a>A. 触控板</h4><ul><li>开启“轻点点按”, 修改查询数据为“三指轻点”(可以快速启用内置翻译)</li><li>是否关闭自然滚动看你个人习惯</li></ul><h4 id="B-Apple服务"><a href="#B-Apple服务" class="headerlink" title="B. Apple服务"></a>B. Apple服务</h4><ol><li>注册 iCloud 账号, 开启 iCloud 云盘, 这样很多配置你至少有一份<strong>备份</strong>和同步</li><li>开启触控 ID 指纹登录, 这样各种验证解锁<strong>快很多</strong> (有些时候密码要求十几位)</li></ol><h4 id="C-优化设置"><a href="#C-优化设置" class="headerlink" title="C. 优化设置"></a>C. 优化设置</h4><ul><li><code>option + cmd + p</code> <strong>打开</strong>文件管理器 Finder 中默认的<strong>全路径</strong>显示, 用 <code>cmd + 上/下</code> 可前/后切换目录层级.</li><li>取消设置-安全性隐私中的分析与改进“共享数据”, 以及<strong>勾选</strong>广告选项里的“限制广告跟踪”. <strong>关闭</strong>定位服务</li><li>跳过<a href="https://imageslr.github.io/2020/03/19/mac-initialization.html#%E5%85%B3%E9%97%AD%E6%96%87%E4%BB%B6%E9%AA%8C%E8%AF%81app-%E9%AA%8C%E8%AF%81">文件验证</a>和第三方 APP 这个就自行考虑了 (前者我打算保留)</li><li>设置的 “键盘快捷键” 中设置 Tab 切换聚焦, 这样可以更好的用键盘控制窗口</li><li>电池电量显示<strong>百分比</strong> (双击电池), 然后选项里设置<strong>电池供电</strong>时优化视频/推送, 并关闭<strong>电源供电</strong>时磁盘休眠/睡眠</li><li>设置中开启“夜览”, 我时间设置的是晚 6 点~早上 9 点. 再配合定时休息提醒软件即可.</li><li>Finder 中 <code>cmd + shift + .</code> 可显示/关闭隐藏文件和扩展名, 设置里修改侧边栏(增加 Home 等), 去掉<strong>不常用</strong>的标签.</li></ul><h4 id="D-按键-amp-快捷键"><a href="#D-按键-amp-快捷键" class="headerlink" title="D. 按键 &amp; 快捷键"></a>D. 按键 &amp; 快捷键</h4><p>首先熟悉 <code>Win</code> 的同学肯定需要<strong>一段时间</strong>来适应, 因为有几个重大的设定键位的改变，肌肉记忆需要时间来调整，熟悉最大的自然就是 <code>Alt</code> —&gt; <code>command(cmd)</code>， 然后导致绝大部分的快捷键都会改变，说几个最主要的：</p><ol><li>快速搜索: <code>command + 空格</code> (活动监视器/任务管理器调出方式)</li><li>全屏最大化：<code>control + command +f</code> (full)</li><li>缩小到后台随时唤醒: <code>command + h</code></li><li>跳到行尾/行头(<code>command + ← / →</code>), 加上 <code>shift</code> 后可以快速选中操作</li><li>跳到左右一个单词 <code>option + ← / →</code>, 加上 shift 后快速选中单词</li><li>同理, command + 上/下可以平滑的向上/向下翻页, 加上 shift 后选中整体</li><li>删除当前光标后文字: <code>control + k</code></li><li>锁屏: <code>control + command + q</code></li><li>复制 Finder 中的文件路径: <code>option + command + c</code></li><li>删除文件: <code>cmd + 回退键</code> (Win 上的 Delete 没用, 简易 Key 插件替换, 见后文)</li><li><code>ctrl + ↑</code> 可以快速显示当前所有窗口 (等同“三指上滑”)</li><li>Finder 中没提供直接的<strong>剪切</strong>项, 而是统一先复制, 然后 <code>cmd + opt + v</code> 剪切.</li></ol><p>特别注意, Win 键盘中的 Home 和 End 键位在 Mac 中基本<strong>失效</strong>或者不合适,如果用<strong>外接键盘</strong>, 建议下个 <a href="https://www.macwk.com/soft/karabiner-elements">KEY</a> 软件修改工具调整为期望的效果, 其他全面的快捷键查看可以参考 <a href="https://support.apple.com/zh-cn/HT201236">Apple 官方文档</a>, 或者使用快捷键提示的应用.</p><h4 id="E-输入法"><a href="#E-输入法" class="headerlink" title="E. 输入法"></a>E. 输入法</h4><p>首先我不太建议使用自带输入法, 因为并不好用, 也少了很多功能, 中文下使用英文标点都不支持, 选中某狗/Du还是其他三方输入法看大家喜好, 但是有<strong>几个</strong>必备功能我觉得有和没有差别很大, 建议开启:</p><ol><li>中文输入时使用<strong>英文</strong>标点</li><li>中英文前后自动加入<strong>空格</strong> (数字符号也加更好)</li><li>自动切换到英文输入 (指定 App)</li></ol><p>然后, 如果使用其他输入法后, 基于方便<strong>切换</strong>的考虑, 建议至少<strong>删去</strong>自带的中文输入法 (En 版看个人喜好可保留)</p><p>删除系统内置中/英输入法并不那么简单, 需要单独处理, 步骤如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 1. 重启系统</span><br><span class="line">command + r # 进入恢复模式</span><br><span class="line"></span><br><span class="line"># 2. Terminal中关闭SIP(System Integrity Protection)</span><br><span class="line">csrutil disable</span><br><span class="line"></span><br><span class="line"># 3. 查看并删除 ABC 对应的系统输入法</span><br><span class="line">&#x2F;usr&#x2F;libexec&#x2F;PlistBuddy -c &quot;print :AppleEnabledInputSources&quot; ~&#x2F;Library&#x2F;Preferences&#x2F;com.apple.HIToolbox.plist # 使用内置方式查看</span><br><span class="line"># 删除 ABD 对应的键值组 (如果是ABC的话)</span><br><span class="line">&#x2F;usr&#x2F;libexec&#x2F;PlistBuddy -c &quot;delete :AppleEnabledInputSources:0&quot; ~&#x2F;Library&#x2F;Preferences&#x2F;com.apple.HIToolbox.plist # 使用内置方式查看</span><br><span class="line"></span><br><span class="line"># 3.2 推荐还是使用专门的 PlistEditor 编辑, 以免删除后 ABC 又被添加回来</span><br><span class="line"></span><br><span class="line"># 4. 完成后重启Mac, 看是否生效 (测试 10.15.7 有效)</span><br></pre></td></tr></table></figure><p>然后下面是几个可能遇到的问题:</p><ul><li>输入法<strong>提示框</strong>没有了, 可能是触发了 bug, 解决办法就是<code>cmd + space</code>打开<strong>活动监视器</strong>杀掉<strong>对应</strong>输入法的进程就好了</li><li>Windows 上的 mspaint (画图) 在 Mac 上是<strong>预览</strong>来代替了, 它的使用看看说明就能上手, 简易的做图没什么问题, 合并剪切图不如画图顺手, 我目前也没找到特别<strong>简易</strong>的画图工具.. (望推荐)</li><li><code>ctrl + cmd + space</code> 快速输入Mac 上的表情, 特殊符号和箭头等 (比如 <code>⌘/⌥/⌃/⌫/↓</code> )</li><li>智能输入单/双引号 <code>&quot;&quot;</code> 是斜体版本, 容易造成大坑 (在键盘–&gt;文本–&gt;智能引号那可以修改为正常的)</li></ul><h2 id="0x02-网络配置"><a href="#0x02-网络配置" class="headerlink" title="0x02. 网络配置"></a>0x02. 网络配置</h2><p><strong>科学上网</strong>意义不用多说, 后续的下载环境也需要它, 否则会寸步难行么, 建议自行配置好先 (公司内可走 <code>pac/vpn</code> 方式)</p><h4 id="0-科学上网"><a href="#0-科学上网" class="headerlink" title="0. 科学上网"></a>0. 科学上网</h4><p>这部分单独参考之前の文章, 或自有资源.</p><h4 id="1-配置-Github-等-host-映射"><a href="#1-配置-Github-等-host-映射" class="headerlink" title="1. 配置 Github 等 host 映射"></a>1. 配置 Github 等 host 映射</h4><p>由于不可知的原因, 类似 github 这类没有被 ban, 但是 DNS 经常被污染或者影响的网站, 会很影响日常使用开发, 两个思路解决:</p><ol><li>使用科学上网方式</li><li>使用 DNS 优化方式 (推荐)<ul><li>原始方式: 自查 github 等网站对应的最新最低延时的 ip, 然后手动写入 <code>hosts</code> 文件 (win 同理)</li><li>优雅方式: 使用 <code>SwitchHost</code> 来帮我们自行获取最新的地址, 也方便设置管理修改, 详见<a href="https://brew.idayer.com/guide/github/">此文</a>, 最新 Github 里面也有, 如果你从 Github 下太慢, 同样也可以用MacWk 的<a href="https://www.macwk.com/soft/switchhosts">国内源</a>下载.</li></ul></li></ol><p>安装完成后, 新建一个专门针对 Github 的规则: (参考<a href="https://brew.idayer.com/guide/github">原文</a>)</p><ul><li>方案名：GitHub Latest IP (可自命名)</li><li>类型：远程</li><li>URL 地址：<a href="https://cdn.jsdelivr.net/gh/ineo6/hosts/hosts">https://cdn.jsdelivr.net/gh/ineo6/hosts/hosts</a> 或 <a href="https://github.com/521xueweihan/GitHub520">https://github.com/521xueweihan/GitHub520</a></li><li>自动更新：1小时</li></ul><p>配置完后稍等一会就会看到自动拉取了最新的 IP 地址, 然后你可以<code>ping domain</code> 看看时延和显示 IP 就知道是否生效了, 浏览器如果没有自己清一下缓存, 另外这样你可以很方便的给 hosts 分组定制开关, 如图所示:</p><p><a href="http://img.tingtattoo.cn/mac/image-20210722154148974.png"><img src="http://img.tingtattoo.cn/mac/image-20210722154148974.png" alt="image-20210722154148974"></a></p><h4 id="2-防火墙"><a href="#2-防火墙" class="headerlink" title="2. 防火墙"></a>2. 防火墙</h4><p>网络配置OK, 从 Github 下载或者是 <code>homebrew</code> 安装应该有 <code>1MB/s</code> 以上下载速度 (不设置几十 KB 完全没法用)</p><p>然后为了网络相关安全, 我建议配置一下开源的轻量级<strong>防火墙</strong>, 控制软件的网络使用等同于从根本控制了 OS 安全, 这部分移至[0x04](#0x04. 系统插件)开头</p><h2 id="0x03-开发环境"><a href="#0x03-开发环境" class="headerlink" title="0x03. 开发环境"></a>0x03. 开发环境</h2><p>说完了系统内置的环境和网络, 再说一下系统未自带, 但是实际会经常用到的组件/工具, 也很有必要配置一下.</p><h3 id="0-基本配置"><a href="#0-基本配置" class="headerlink" title="0. 基本配置"></a>0. 基本配置</h3><p>首先就是包管理工具 <a href="https://brew.sh/">Homebrew</a>, 安装后软件管理会方便许多, 但是你网络如果不配置好, 它基本是不可能一次下载成功的, 也不建议使用各种<strong>野路子</strong>手动装, 个人推荐直接用国内源. 参考下面的<strong>方法二</strong>: (科学上网等全局配置好可以用方法1)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># (首选) 官方方式安装一下包管理工具Homebrew</span><br><span class="line">&#x2F;bin&#x2F;bash -c &quot;$(curl -fsSL https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;Homebrew&#x2F;install&#x2F;HEAD&#x2F;install.sh)&quot;</span><br><span class="line"></span><br><span class="line"># (方法二) 如果实在没有全局的科学网络环境, 用中科大的源下载 (速度快百倍)</span><br><span class="line"># 官方地址: https:&#x2F;&#x2F;github.com&#x2F;ineo6&#x2F;homebrew-install</span><br><span class="line">&#x2F;bin&#x2F;bash -c &quot;$(curl -fsSL https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;ineo6&#x2F;homebrew-install&#x2F;install.sh)&quot;</span><br><span class="line"></span><br><span class="line"># 安装完成, 有问题可以先自检 (非官方源会有警告)</span><br><span class="line">brew doctor</span><br><span class="line"></span><br><span class="line"># 然后手动配置下bottles镜像 (以zsh为例. 必须)</span><br><span class="line">echo &#39;export HOMEBREW_BOTTLE_DOMAIN&#x3D;https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;homebrew-bottles&#39; &gt;&gt; ~&#x2F;.zshrc</span><br><span class="line"># 关闭 HomeBrew 的自动更新, 这个经常卡很久.</span><br><span class="line">echo &quot;export HOMEBREW_NO_AUTO_UPDATE&#x3D;true&quot; &gt;&gt; ~&#x2F;.zshrc &amp;&amp; source ~&#x2F;.zshrc</span><br><span class="line"></span><br><span class="line"># 查看配置</span><br><span class="line">brew config</span><br></pre></td></tr></table></figure><h3 id="1-IDEA-配置"><a href="#1-IDEA-配置" class="headerlink" title="1. IDEA 配置"></a>1. IDEA 配置</h3><ol><li>首先官网下载最新稳定版的 IDEA 专业版, 然后配合你自己觉得简单的方式激活. (crack or edu)</li><li>(可选) <strong>导入</strong>以前使用过的 IDEA 配置, 避免大量操作 (在之前电脑上<strong>提前</strong>导出为 jar 包, 可参考<a href="https://blog.csdn.net/qq_33404395/article/details/82910272">此文</a>)</li><li>关闭你暂时不用的所有插件, 按需开启 (包括 Spring/Kotlin/Android/Go 等)</li><li>代码风格 (code style) 也可以单独导出文件保存</li><li>新版的 IDEA 可以代替大部分场景的 Postman 发送 HTTP 请求了, 还能关联代码. 详细可看官方文档. (简略可参考<a href="https://juejin.cn/post/6844904005064196110">此篇</a> )</li></ol><h3 id="2-iTerm2-配置-待独立"><a href="#2-iTerm2-配置-待独立" class="headerlink" title="2. iTerm2 配置 (待独立)"></a>2. iTerm2 配置 (待独立)</h3><p>命令行环境自然是 Unix 类必备的核心工具之一, 包括不限于配置 bash, 命令行工具等. 虽然有付费的工具, 但大家一般推荐 <a href="https://iterm2.com/downloads.html">iTerm2</a> , 我觉得也的确够用了, 但是要注意大量**优化配置才会好用许多, 首先开启默认的 vim 高亮:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cp &#x2F;usr&#x2F;share&#x2F;vim&#x2F;vimrc ~&#x2F;.vimrc &amp;&amp; vi ~&#x2F;.vimrc</span><br><span class="line"># 添加下面行</span><br><span class="line">syntax on</span><br></pre></td></tr></table></figure><p>然后主题和后续各种配置, 我参考的 Github 的<a href="https://github.com/PegasusWang/linux_config/tree/master/mac">文档</a>, 首先下载了还挺好看的一个主题, 然后配置 <code>zsh</code> 及其衍生插件, 配置好后, 命令行 的使用效率和优雅度会高得多, 可以更高效的匹配和查找, 也有更好的自动化辅助, 步骤如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"># 0. 这几年的 Mac 都自带了zsh, 不过还是推荐用 brew 管理升级方便</span><br><span class="line"># 请先备份 ~&#x2F;.zshrc 否则很可能会被覆盖</span><br><span class="line">brew install zsh zsh-completions</span><br><span class="line"></span><br><span class="line"># 1. 参考官方安装方式, </span><br><span class="line">sh -c &quot;$(curl -fsSL https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;ohmyzsh&#x2F;ohmyzsh&#x2F;master&#x2F;tools&#x2F;install.sh)&quot;</span><br><span class="line"></span><br><span class="line"># 2. 安装字体, 注意新版brew里cask变为配置, 然后iTerm中启用</span><br><span class="line">brew tap homebrew&#x2F;cask-fonts</span><br><span class="line">brew install --cask font-hack-nerd-font # 这个爷有点耗时, 可以让它单独跑</span><br><span class="line"></span><br><span class="line"># 3. 安装zplug管理插件</span><br><span class="line">brew install zplug</span><br><span class="line"></span><br><span class="line"># 4. 安装命令行工具</span><br><span class="line">brew install fzf</span><br><span class="line"># 然后开启它, 全YES</span><br><span class="line">$(brew --prefix)&#x2F;opt&#x2F;fzf&#x2F;install</span><br><span class="line">brew install thefuck autojump wget</span><br><span class="line"></span><br><span class="line"># 5. 使用社区作者提供的配置, 最后再把你个人配置加入</span><br><span class="line">wget --no-check-certificate https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;PegasusWang&#x2F;linux_config&#x2F;master&#x2F;mac&#x2F;mac_zshrc</span><br><span class="line"># 补充, 建议也引入 vim 相关配置</span><br><span class="line"></span><br><span class="line"># 6. 应用新的配置, 然后退出 iTerm 重启进入, zplug 应该就开始安装工作了</span><br><span class="line">cp mac_zshrc  ~&#x2F;.zshrc &amp;&amp; source ~&#x2F;.zshrc</span><br><span class="line"># 取消主题栏的注释, 选泽此款配置, 挺好看</span><br><span class="line">ZSH_THEME&#x3D;powerlevel10k&#x2F;powerlevel10k</span><br></pre></td></tr></table></figure><p>上述配置完就把 zsh 和相关插件大部分搞定了, 接下来是一些我自己设置的优化和<strong>提醒</strong>: (仅供参考)</p><p>首先 iTerm2的全局可<strong>简单</strong>分为这三: <code>Window —&gt; Tab —&gt; Session</code>, 一般我就用后面两个, 然后同一类窗口放一个 Tab 下:</p><ul><li><p>修改切换窗口的快捷键 <code>option/cmd + ←/→</code>, 这个易误操作, 默认选中复制是<strong>中键</strong>粘贴 (注意不是 Win 中的右键)</p></li><li><p>然后 Vim 中快捷键默认并不通用: <code>shift + ←/→</code> 代表单词跳转, <code>fn + ←/→</code> 代表行头/尾, <a href="https://stackoverflow.com/questions/9595633/how-to-get-cmd-left-right-working-with-iterm2-and-vim-without-requiring-vimrc/9611698#9611698">定制修改参考StackOverflow</a>, 很多国内博客互相 copy 全是错的或<strong>不通用</strong>的….下面是我验证可用的方式:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 1.首选 profiles -&gt; Keys --&gt; Presets --&gt; Nature Text Editing</span><br><span class="line"># iTerm 首选项 -&gt; Keys -&gt; 修改快捷键</span><br><span class="line"># 1. 修改 cmd + ←&#x2F;→ 与其他保持一致</span><br><span class="line">cmd + ← --&gt; 改为 sent escape code: [1~ # hex code: 0x01 # vim中无效</span><br><span class="line">cmd + → --&gt; 改为 sent escape code: [4~ # hex code: 0x05 # 同上</span><br><span class="line"></span><br><span class="line"># 2.修改 option + ←&#x2F;→ 保持一致</span><br><span class="line">#  - 先删去已有设定, Profiles -&gt; Keys删掉</span><br><span class="line">#  - 再修改, 否则会提示冲突</span><br><span class="line">#  - escape code 下</span><br><span class="line">option + ← --&gt; 改为 sent hex code: 0x1b 0x62 # escape code: [1;5D</span><br><span class="line">option + → --&gt; 改为 sent escape code: [1;5C # 其它写法有误或无法在 vim 中生效</span><br></pre></td></tr></table></figure></li><li><p>快捷键设置取消 <code>cmd + w</code> 和 <code>cmd + q</code> 关闭/退出当前 session, 很容易误按, 有跳板机时不能一键恢复很蛋疼.</p></li><li><p>快捷键 <code>F1~Fn</code> 设置发送字符串, 存储常用字符串(密码)/操作等. (<strong>高频</strong>, 通 Xshell 发送字符串)</p></li><li><p><code>Apperance --&gt; Dimming</code> 中<strong>取消</strong>模糊非活动窗口 (常需要同时观察)</p></li><li><p>Advanced 中开启 <code>Scroll wheel sends arrow keys when in alternate screen mode</code>, 允许滚轮查看日志 (棒)</p></li><li><p><code>View</code> 中开启<code>Show cursor guide</code>, <code>Auto cmd complete</code>, 至于时间戳是否开看你屏幕大小 (zsh插件自带)</p></li><li><p><code>Session</code> 中提供快捷键可以显示最近的命令/目录等</p></li><li><p><code>Toolbelt</code> 可以显示一个快速命令/历史栏, 这个看个人需要</p></li><li><p>在会话里也可以使用全局<strong>搜索</strong>, 然后通过 Tab 键组合可以快速复制对应的字符串</p></li></ul><p>总之直接参考开源的方案, 只要<strong>网络环境</strong>配置好了, 整体下来还是很快的, 之后就可以愉快的使用 iTerm2 来交互了. 你会发现的确是全新, 令人舒适的 <code>bash</code> 使用体验, 推荐试试.</p><p>如果希望配置更多的个性化设置, 包括别名, 可参考博主的 <a href="https://raw.githubusercontent.com/PegasusWang/linux_config/master/mac/env.sh">env.sh</a> , 后续想深度查看其他 zsh 的插件, 可参考<a href="https://asmcn.icopy.site/awesome/awesome-zsh-plugins/">汇总</a>, 或者了解具体的使用配置等, 简单列举几个好用的特性:</p><ul><li>git 插件自带大量好用的缩写, 在<code>~/.oh-my-zsh/plugins/git/git.plugin.zsh</code> 中, 分支时间信息也都全了.</li><li>所有命令的二级提示, 也都可用自动提示补全, 不用去<code>--help</code>, 然后命令正确/错误显示颜色不同. (错误红, 正确绿)</li><li><code>↑ / →</code> 键可从历史<strong>输出</strong>中自动补全可能的命令, <code>ctrl + t</code> 可以全 PC 快速搜索, 很好用</li><li>跳转目录无需输入<code>cd</code> , <code>ctrl + r</code> 全面优化</li><li>输入<code>j + 部分path</code> 可以快速跳转全路径 (很好用, 可试试)</li></ul><p>以上只是我简单了解后发现的, 其他包括未安装的插件大家可以根据自己需要了解, 对使用 terminal 效率提升挺大, 用起来也舒服得多.</p><p>另外有个常见的需要是是配置<strong>上传/下载</strong>文件, scp 没有 rz/sz 好用, 但是<code>iTerm</code>上需要单独配置一下, 不能直接使用:</p><ol><li>自行在本地安装 <code>brew install lzrsz</code></li><li>下载两个<a href="https://github.com/snow-sprite/rzsz">脚本</a>丢环境变量 <code>/usr/local/bin</code> 下, 给可执行权限, 为之后触发<a href="https://iterm2.com/documentation-triggers.html">动作</a>使用</li><li>iTerm2 中设置 Trigger, 然后测试生效.</li></ol><p>另外推荐在常用<strong>服务端</strong>机器配置 <a href="https://iterm2.com/documentation-shell-integration.html">iTerm2 Integration</a>, iTerm 官方出品, 可以拖拽上传下载, 安装成功后有三角箭头, 附带其他增强功能, 也挺不错.</p><h4 id="高亮-cat"><a href="#高亮-cat" class="headerlink" title="高亮 cat"></a>高亮 cat</h4><p>这里参考菩提前辈的高亮和使用方法, 很好解决 cat 默认没有高亮的问题, linux 上可直接使用, mac 上需要安装一下包:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 优先使用 pip3 而不是 brew</span><br><span class="line">pip3 install pygments # pip3 失败再尝试 brew</span><br><span class="line"># 在 zshrc 里加入 (linux 则是 bashrc)</span><br><span class="line">alias cat&#x3D;&#39;pygmentize -P style&#x3D;monokai -P tabsize&#x3D;4 -f terminal256 -g&#39;</span><br><span class="line">alias c&#x3D;&#39;cat&#39;</span><br></pre></td></tr></table></figure><p>然后就可以优雅的使用 cat 而无需在 vim 中复制粘贴了, 建议开启.</p><p><em>PS: 鉴于 iTerm2可定制化的地方非常多, 而且大部分都很好用, 之后会单独分拆为一篇 <a href="http://imbajin.com/">iTerm2定制指南</a>来单独说.</em></p><h3 id="3-Typora-配置"><a href="#3-Typora-配置" class="headerlink" title="3. Typora 配置"></a>3. Typora 配置</h3><p>除了代码之外, 文档的流畅编写自然也是非常重要的, 首选 Typora 就不多说了, 主要是调整同步一下配置, 最主要的就是设置图床, Mac 上的选中有三:</p><ul><li>iPic (限Mac, 部分收费)</li><li><a href="https://github.com/gee1k/uPic">uPic</a> (限Mac, 开源免费)</li><li>PicGo (跨平台, 开源免费, 暂不原生支持 M1)</li></ul><p>那到底选中哪个呢? 首先时间来说, uPic 是最晚出的, 用原生 swift 编写, 然后全部免费开源, 并且作者之前也用过其他两个, 更像是后起之秀, 所以我更倾向选中它. 详细安装配置参考<a href="https://github.com/gee1k/uPic">官方文档</a>, 不再复述, 配置简单且图形化完善, 完成后可以达到粘贴截图到 typora 中自动上传到图床的效果.</p><p>注: 这几个软件目前有一个问题是不能动态监控文件夹, 比如监控 <code>img</code> 文件夹, 存入一个图片, 就自动上传获取地址的效果. 如果只是从剪切板粘贴, 本地就<strong>缺少备份</strong>, 或需要保存再手动上传一次, 所以建议配合<strong>截图工具</strong>来使用 (例如 iShot 等)</p><h2 id="0x04-系统插件"><a href="#0x04-系统插件" class="headerlink" title="0x04. 系统插件"></a>0x04. 系统插件</h2><p>Mac 上有许多好用的工具软件, 我也是一直比较中意见, 包括画图类的 Sketch ,效率类的等, 那么就需要一些 crack 的网站地址, 不然可能很多都是收费的, 就比如上面修改系统 <code>plist</code> 文件都需要, 以下是几个可能还行的网站, 有自检测, 可以禁止联网等, 仅供参考, 大家自行甄别细节:</p><ol><li><a href="https://www.macwk.com/">MacWk</a>: 网站 UI 做的很不错, 宣称无广告, 无后门, 只收录精品应用 (目前使用它较多, 体验还不错)</li><li><a href="https://xclient.info/">XClient</a>: 相对老牌一点的经典Mac 下载站点, 不过后续维护是否及时还待确定</li></ol><p>然后选择了你自己相对可信的站点后, 你就可以开始配置一些很强大的软件/插件了, 建议<strong>最先装上</strong>开源的防火墙控制<strong>禁止</strong>不必要的 App 联网.</p><h4 id="A-网络防火墙"><a href="#A-网络防火墙" class="headerlink" title="A. 网络防火墙"></a>A. 网络防火墙</h4><p>因为 Mac 本身系统权限控制严格, 轻易访问不了磁盘或者其他核心组件, 用了 crack 后的 Mac 软件后最需要注意的就是禁止工具类软件<strong>联网</strong>, 这样就避免了不少后门和发送数据的可能了. 然后防火墙这里正好可使用<strong>开源</strong>的, 也是最小信任原则的体现</p><p>那么有一款出自 <code>Defcon</code> 安全研究员的 <a href="https://www.macwk.com/soft/lulu">LuLu</a> 就比较推荐, 而且一直在维护更新, 安装好之后可以很简单的设置允许/禁止网络通讯 &amp; 实时查看, 个人觉得已经足矣, 有网络请求会弹出提示, 简洁好用:</p><p><a href="http://img.tingtattoo.cn/mac/image-20210722161123745.png"><img src="http://img.tingtattoo.cn/mac/image-20210722161123745.png" alt="image-20210722161123745"></a></p><h4 id="B-截图和-GIF"><a href="#B-截图和-GIF" class="headerlink" title="B. 截图和 GIF"></a>B. 截图和 GIF</h4><p>首先自带的图床工具都非常强大好用了, 但是唯一的不足就是截图上传没有自己设置<strong>文件名</strong>, 只是生成随机的名字保存, 这样不太合理, 也没有本地备份, 加之偶尔也有录制 GIF 的需求, 所以最好是有一款单独的截图 + 录制整合的工具来帮忙完成这些, 例如收费的 <a href="https://www.macwk.com/soft/cleanshot-x">CleanShot</a>, 但是目前 crack 版暂时没有可信的. 所以我们还是选传统的 <code>Xnip</code> 或者 <code>iShot</code> 了. 因为前者有收费, 所以目前就选中免费的 <a href="https://www.macwk.com/soft/ishot">iShot</a> (最新版需同时使用它家的压缩和键鼠快捷键软件), 有收费的激活码还是推荐 CleanShot 一点. 重点说一下iShot 的几个优点:</p><ul><li>支持常见的截图标记, 支持<strong>高亮</strong>显示某个区域</li><li>截屏有提示, 支持多快捷键, 支持<strong>长截图</strong>, 可把截图 pin 住并组合</li><li>支持 GIF 动图录制, 并且还算挺方便, 也可以控制大小分辨率</li></ul><p>因为 uPic 或类似工具也不支持监视某个图片文件夹的功能, 所以以前那种把截图丢在特定文件夹的自动监视做法就行不通了, 直接剪贴板上传简单但是本地没有<strong>备份</strong>… 可能是因为这样需要文件读取磁盘的权限, 风险比较大吧推测</p><h4 id="C-压缩软件"><a href="#C-压缩软件" class="headerlink" title="C. 压缩软件"></a>C. 压缩软件</h4><p>Mac 自带的解压软件平常也倒够用, 但是我没找到加密压缩的地方, 用起来还是蛋疼. 然后大文件压缩速度也远不如专门的软件, 所以换一款还是需要的. (比如性能很好的 <a href="https://www.macwk.com/soft/myzip-pro">MyZip Pro</a>, 免费的 <a href="https://www.macwk.com/soft/ezip">MacZip</a>), 看了下评测选中 <code>MyZip Pro</code>, 支持极限压缩 + <code>7z</code> 的<strong>固实压缩</strong>,,测试 <code>200MB</code> 的数据压缩到了仅有 <code>2MB</code> (对比 zip 极限也有22MB) ,让我也是大为吃惊.. 发现 <code>iShot</code> 也是它家的</p><h4 id="N-效率软件Alfred-TODO"><a href="#N-效率软件Alfred-TODO" class="headerlink" title="N. 效率软件Alfred (TODO)"></a>N. 效率软件Alfred (TODO)</h4><p>Mac 上的独占工作流软件 <a href="https://www.macwk.com/soft/alfred-4">Alfred</a> 的名声早在 N 年前就很大了, 自然还是想试试看神奇在哪, 不过这里稍微繁杂一些, 之后列在 TODO 里有空单独来说吧.</p><h4 id="X-Sketch-画图"><a href="#X-Sketch-画图" class="headerlink" title="X. Sketch 画图"></a>X. Sketch 画图</h4><p>偶然从<a href="https://draveness.me/sketch-and-sketch/">Dravebess</a>的文章中发现如此统一美观的画图风格, 想也有一套自己的统一风格画图, 苦于 Win 并没有Sketch 使用, 现在换了 Mac 必须安排上, 这里是 <a href="https://www.macwk.com/soft/sketch?__cf_chl_jschl_tk__=9c8db3731ea871d7f4fc208baacdf82c6b67e9b2-1617705873-0-AY--IhlOudpL-SKkKo7pAr7AfFgfuzfF2pctE-RzW_Zuw4Wvf2qcKJCTrQF5KU7wxVcS6gUPruIRuDJX056zYo4eQf75d4SdrUwuFqCRBdOxNY3aN0DTGOURrtWYek47DQYyGSR2OT3mffoyzdzgdaScvb_fEnwAwz7Bm-hRKHO7aVuHPcEuKCDIPVoVTzoJlJbM6NMim-Drmb2g9LdgNt-ciT1oOCDrBFgNNizsqQuKVncpwGW7oelZ0EAmepYzLWVTt7JrEZikqb-9U5Ub3v7OAo2lmAjxBvWuM5YHYA4zmKpI2s8Ide02zde4H16kLnSDoLSTsIRVojOz22Xb9VQ">V71.1下载</a>, 如果遇到不稳定, 建议降级到评论区说的稳定版本, 无需追新. 我们来关注一下如何使用它来画技术图片, 当然也有不少同学推荐使用 <a href="https://figmachina.com/articles/learn-about-figma.html">Figma</a> 代替 Sketch, 降低上手成本, 后续可以关注.</p><p>对我来说, 目前它们两也都还挺重, processon 或免费的 draw.io 就比较够用了 (虽然不够系统统一)</p><h4 id="Y-鼠标滚动"><a href="#Y-鼠标滚动" class="headerlink" title="Y. 鼠标滚动"></a>Y. 鼠标滚动</h4><p>如果你是使用外置的鼠标, 默认滚动效果比原生丝滑顺畅差不少, 可以试试这款开源的<a href="https://github.com/Caldis/Mos">Mos</a>. 能让你的鼠标滚动也丝滑起来</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install mos --cask</span><br></pre></td></tr></table></figure><p><strong>更新:</strong> BetterAndBetter 也可以提供这样的功能, 如果使用了BAB, 就无需使用 mos</p><h2 id="0x05-其他"><a href="#0x05-其他" class="headerlink" title="0x05. 其他"></a>0x05. 其他</h2><h4 id="A-可选系统优化"><a href="#A-可选系统优化" class="headerlink" title="A. 可选系统优化"></a>A. 可选系统优化</h4><h5 id="1-去除系统设置的更新小红点"><a href="#1-去除系统设置的更新小红点" class="headerlink" title="1. 去除系统设置的更新小红点"></a>1. 去除系统设置的更新小红点</h5><p>需要注意的是, 重启之后这个可能还会出现, 不过鉴于 Mac 不升级基本也不重启, 所以值得去除红点干扰, 根本做法是底部<strong>不显示</strong>设置:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 处理方式就是设置然后重启dock进程</span><br><span class="line"># 为了避免偶尔再次出现, crontab每h定时执行</span><br><span class="line">0 *&#x2F;2 * * * defaults write com.apple.systempreferences AttentionPrefBundleIDs 0 &amp;&amp; Killall Dock</span><br></pre></td></tr></table></figure><h4 id="2-外接键盘优化-建议"><a href="#2-外接键盘优化-建议" class="headerlink" title="2. 外接键盘优化 (建议)"></a>2. 外接键盘优化 (建议)</h4><p>如果外接了一个机械键盘, 一般都是 Win 布局, 有两个问题:</p><ul><li>一些键位 Win 和 Mac不一样, 放着不习惯还占位置</li><li>F1~Fn 可能不符合自己需要, Home/End/Delete 也不够好用, 或没启用</li></ul><p>这些问题, 就特别适合用神器 <a href="https://www.macwk.com/soft/karabiner-elements">Karabiner</a> 来实现, 如果 “权限 - 键盘监视” 中少了一个软件需要的, 就<strong>手动加入</strong>即可. 否则会一直弹出权限不足提示. 然后推荐以下配置:</p><ul><li>F6设置为静音, 默认似乎没有功能</li><li>其他 F1~Fn 根据自己需要调整</li></ul><p>除了单按键调整, 更重要好用的映射多键位(Complex mod), 并且官方已经帮你都提供好了<strong>一键</strong>的方案, 非常贴心, 首先<a href="https://ke-complex-modifications.pqrs.org/?q=printscreen">下载官方</a>设定好的模板, 然后我选中了以下:</p><ul><li>Home/End 键设置为跳到行前/尾, 命令行下挺好用的. (但在 vim 中似乎不生效)</li><li>Shift + Insert 视为粘贴</li><li>Cmd + E 打开电脑 (Finder)</li><li>Delete 设置为 FInder 中<a href="https://ke-complex-modifications.pqrs.org/?q=windows">直接删除</a></li><li>Option/cmd + L <a href="https://ke-complex-modifications.pqrs.org/?q=lock">锁屏</a> (后者可一键黑屏, 更省电)</li><li>Backspace 设置为回到上一级 (仅在 Finder 中有效)</li><li>PrintScreen 键设置为全屏截图</li><li>Control + v/x/z/y 设置为 粘贴/剪切/撤销 (<strong>可选</strong>, 注意 ctrl + c 最好别设置, 易冲突)</li><li><code>F1 ~ F12</code> 使用原始对应, 否则它会自动识别为<strong>Fn + F1</strong>, 在(Function keys 中, 最下面勾选 <code>Use all as standard</code> )即可.</li></ul><p>其他绝大部分的<strong>转换类</strong>快捷键我都不太推荐设定, 还可能有冲突, 设置的主要是 Mac 没有但是实际也比较好用的. 另外如果高版本的 MacOS 不支持 Karabiner 这个神器, 可以使用免费的国产 <code>BetterAndBetter</code> 代替一部分功能 (当然后者主要是可提供更多的手势类操作, 其实也可以可 KB 组合使用)</p><h4 id="3-护眼注意"><a href="#3-护眼注意" class="headerlink" title="3. 护眼注意"></a>3. 护眼注意</h4><p>因为每天看屏幕的时间平均超过10h, 所以护眼相关的措施必不可少, 而且它是潜移默化长期影响的, 并且休息时间也应该走动, 站/坐切换一下.</p><p>自动定时提醒休息的软件有个<a href="https://www.macwk.com/soft/breaks-for-eyes">break for eyes</a>, 配合系统自动的色温调节(“夜览”)大致够用, 其他单独色温调节之后考虑.</p><h4 id="B-可选软件替代"><a href="#B-可选软件替代" class="headerlink" title="B. 可选软件替代"></a>B. 可选软件替代</h4><p>这里的是有些替代系统原有不够好用的软件, 比如 Finder 可能很多同学上手有点费解, 因为它的快捷键比较复杂, 而且不太兼容, 我个人是建议先使用上面提到的 Karabiner 来切换为你习惯的模式, 然后熟悉核心的快捷键, 人总是要敢于跳出舒适区的.</p><h4 id="1-WeChat-Extention"><a href="#1-WeChat-Extention" class="headerlink" title="1. WeChat-Extention"></a>1. <a href="https://github.com/MustangYM/WeChatExtension-ForMac">WeChat-Extention</a></h4><p>默认的 WeChat 客户端显然是很不好用的, 也缺乏很多定制化操作, 好在有前辈开源的功能很强大的版本, 详见标题 Github 链接, 这里不再重复文档内已有内容, 不过要注意更新和官方的屏蔽等.</p><h4 id="2-Others"><a href="#2-Others" class="headerlink" title="2. Others"></a>2. Others</h4><p>然后, 偶然也看到单独的分享来讲 Mac 上使用的软件之类的, 详见此<a href="https://github.com/rfyiamcool/share_ppt/blob/master/drunbility.pdf">slide</a>, 后续此文也会不断更新, 站在前辈的肩膀上, 力求打造一个更舒适的体验. (也欢迎大家反馈觉得简洁好用的配置或软件, thanks)</p><h4 id="3-压缩软件"><a href="#3-压缩软件" class="headerlink" title="3. 压缩软件"></a>3. 压缩软件</h4><p>考虑到稳定性, 多线程压缩/解压和是否免费, 目前选择的是 <strong>FastZip</strong>, 可以直接从 app store 安装即可. 默认自带的压缩解压效率的确太低, 有些必要的格式和功能支持也太弱了.</p><hr><p><strong>参考资料:</strong></p><ol><li><a href="https://support.apple.com/zh-cn/HT201236">Apple 官方常用快捷键文档</a></li><li><a href="https://www.jianshu.com/p/0ba1292441b9">Mac 删除自带输入法</a></li><li><a href="https://brew.idayer.com/guide/github/">HomeBrew 国内源安装</a></li><li><a href="https://imageslr.github.io/2020/03/19/mac-initialization.html">从零开始配置高效 Mac 开发环境</a></li><li><a href="https://support.apple.com/zh-cn/guide/mac-help/cpmh0152/mac">Apple 官方Win键盘转换文档</a></li><li><a href="https://zhuanlan.zhihu.com/p/33166580">少数派-Mac 使用外接键盘</a></li><li><a href="https://github.com/PegasusWang/linux_config/tree/master/mac">Mac 配置 ITerm2 主题与插件</a></li><li><a href="https://github.com/rfyiamcool/share_ppt/blob/master/drunbility.pdf">峰云的Mac 相关分享Slide</a></li><li><a href="https://iyaozhen.com/iterm2-tips.html#">iTerm2-带跳板机的 SSH 自动化设置</a></li><li><a href="https://stackoverflow.com/questions/9595633/how-to-get-cmd-left-right-working-with-iterm2-and-vim-without-requiring-vimrc/9611698#9611698">Stackoverflow — how to get cmd left work in vim</a></li></ol><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      
        <tags>
            
            <tag> other </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git的常见事项(Git篇)</title>
      <link href="/%5Bobject%20Object%5D/2023/02/23/%E5%8F%82%E4%B8%8E%E5%BC%80%E6%BA%90%E7%A4%BE%E5%8C%BA%E7%9A%84%E5%B8%B8%E8%A7%81%E4%BA%8B%E9%A1%B9-Git%E7%AF%87/"/>
      <url>/%5Bobject%20Object%5D/2023/02/23/%E5%8F%82%E4%B8%8E%E5%BC%80%E6%BA%90%E7%A4%BE%E5%8C%BA%E7%9A%84%E5%B8%B8%E8%A7%81%E4%BA%8B%E9%A1%B9-Git%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>而关于Git的一些棘手问题, 参考<a href="http://imbajin.com/2018-05-25-Git-flow%E4%B8%8E%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98">以前篇</a>, 关于开源社区中的Git事项参考<a href="http://imbajin.com/2020-01-01-%E5%8F%82%E4%B8%8E%E5%BC%80%E6%BA%90%E7%A4%BE%E5%8C%BA%E7%9A%84%E5%B8%B8%E8%A7%81%E4%BA%8B%E9%A1%B9-Git%E7%AF%87">此篇</a></p><h2 id="00-前言"><a href="#00-前言" class="headerlink" title="00. 前言"></a>00. 前言</h2><p>在最初的 git 篇提过, 最常见的 git 基础这里不会再单独说, 本文主要关注一些”不常见的常见”问题</p><p>比如说各种<strong>误操作</strong>导致的回退, 冲突, 迁移, 这种虽然不会常发生, 但是发生一次就很头疼的问题, 以前我是遇到的时候再去现查, 但是由于有些命令风险很大, 甚至具有不可逆性, 加上人总是要成长的, 不能一直停留在只会使用 <code>add commit push pull</code> 的阶段. 这是本文开启的重要缘由之一. 另外也是方便自己, 其他同学遇到这些问题, 不那么惧怕, 或者被各种<strong>不靠谱</strong>的文章误导. 下面说一下大体的几个部分:</p><ol><li>更新</li><li><strong>回滚</strong> (核心)</li><li><strong>修改</strong> (核心)</li><li>清理</li><li>迁移</li><li>别名</li></ol><p>有少部分在上一篇开源事项里提到过, 为了方便查阅, 还是再写一下.</p><h2 id="01-更新"><a href="#01-更新" class="headerlink" title="01. 更新"></a>01. 更新</h2><h4 id="A-快速更新"><a href="#A-快速更新" class="headerlink" title="A. 快速更新"></a>A. 快速更新</h4><p>上面讲的是正常的PR/更新流程, 你可能觉得更新一次怎么这么麻烦, 这还有更<strong>简单粗暴</strong>的.. 如果 fork 的项目本地是<strong>毫无修改</strong>的, 在确定我们可以直接<strong>覆盖</strong>的前提下, 可以用 reset 大法实现三板斧更新:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#1.更新全部远端分支</span><br><span class="line">git fetch --all</span><br><span class="line"></span><br><span class="line">#2.强制把远端分支覆盖到本地 (比如你当前在dev分支)</span><br><span class="line">git reset --hard upstream&#x2F;dev</span><br><span class="line"></span><br><span class="line">#3.强制推送到fork的远端, 三板斧可以日常也好用</span><br><span class="line">git push -f origin</span><br></pre></td></tr></table></figure><p>当然这个做法在代码的场景下很好用, 不会存在 <code>git pull</code>后还要手动解决冲突的问题, 简单快速.</p><h4 id="B-多远端更新"><a href="#B-多远端更新" class="headerlink" title="B. 多远端更新"></a>B. 多远端更新</h4><p>这个场景也很常见, 你需要设置多个 <code>remote</code> 对象, 梳理好关系, 对你后续做patch合并, 查看会有很大帮助.</p><p>比如说社区的公开仓库命名为 <code>github</code> , 你本地的仓库是 <code>origin</code>, 你本地对应的内网私有仓库是 <code>gitlab</code>. 实际就有了至少<strong>三个</strong>不同的仓库, 而且有些官方仓库保留了许多分支, 如果你直接简单的一键关联, 会导致你的分支/仓库列表非常杂乱冗长. 所以如何正确的让这三方运作好还是需要点技巧的.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add # 这后面可以补上许多参数, 而不是直接一个远端地址</span><br></pre></td></tr></table></figure><h4 id="C-小修小补"><a href="#C-小修小补" class="headerlink" title="C. 小修小补"></a>C. 小修小补</h4><p>这就要隆重介绍一位大将 <code>cherry-pick</code>, 它一个单独的命令, 平常用到的地方可能不多, 但是在<strong>跟进社区</strong>, 社区合作里尤为常见/重要.</p><p>简单说，它可以<strong>跨不同分支</strong>进行合并, 比如我现在使用的是稳定版的分支<code>stable</code> , 我需要从最新分支<code>dev</code> 上合并一个最新修复的Bug, 那么<code>merge/rebase</code> 就不适合, 应该使用<code>cherry-pick</code> 命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 基本用法, -n表示不会自动提交 (默认会自动提交)</span><br><span class="line">git cherry-pick -n shaxxx   # 某次提交的hash(sha)值</span><br></pre></td></tr></table></figure><p>合并一个提交很简单, 也很舒服, 下一个关键问题是, 如果我要合并的是一个功能, 它分化成了<strong>多次提交</strong>, 而且跨度还挺大, 比如可能一年以上. 这时该怎么使用, 如果新的补丁还引用了其他的提交 (并不想合并) 该怎么办, 这部分放<a href="http://imbajin.com/2020-01-01-%E5%8F%82%E4%B8%8E%E5%BC%80%E6%BA%90%E7%A4%BE%E5%8C%BA%E7%9A%84%E5%B8%B8%E8%A7%81%E4%BA%8B%E9%A1%B9-Git%E7%AF%87">社区参与篇</a>说, 因为基本只有参与社区会遇到这种问题.</p><h4 id="D-版本更新"><a href="#D-版本更新" class="headerlink" title="D. 版本更新"></a>D. 版本更新</h4><p><code>git</code> 每年需要更新一下版本, 以避免一些很棘手的bug, 它提供了内置的更新命令直接升级, 最为推荐: <code>git update</code> (根据不同OS会提示输入具体命令)</p><h2 id="02-Git-回滚"><a href="#02-Git-回滚" class="headerlink" title="02.Git 回滚"></a>02.Git 回滚</h2><p>这个涉及到大量生产环境修改<code>git log</code> / 提交历史, 文件回滚等操作, 比较<strong>复杂</strong>且很有些<strong>危险</strong>, 觉得应该单独开一篇文章来讲, 不过因为我接触的也不全, 就先说说比较简单/常见的案例吧.</p><h4 id="A-错误的add提交"><a href="#A-错误的add提交" class="headerlink" title="A. 错误的add提交"></a>A. 错误的add提交</h4><p>因为大家习惯使用<code>git add .</code> 来添加所有变动文件, 一不小心就容易把不该加的文件添加进去了, 这个时候如果还<strong>没有commit</strong> , 那么可以这样来操作删掉添加的错误文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#--cached只会从缓存区中移除文件,不会从磁盘移除</span><br><span class="line">git rm --cached fileName # 可以从git status 看到</span><br></pre></td></tr></table></figure><p>如果已经提交了, 不管是在本地还是已经push了, 最简单的做法其实都是<code>revert commitId</code> 了, 所以尽量别到这样…</p><h4 id="B-错误的邮箱和用户名"><a href="#B-错误的邮箱和用户名" class="headerlink" title="B. 错误的邮箱和用户名"></a>B. 错误的邮箱和用户名</h4><p>在内部和github之间, 你很可能有两套git用户, 比如<strong>gitlab &amp; github</strong> , 在PR和本地提交之间很容易没注意写错了邮箱, 如果你发现及时, 这是你最近一次提交, 那可以这样操作:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git commit --amend --author&#x3D;&quot;usrname &lt;mail&gt;&quot; </span><br><span class="line">#如果你已经一步到位,push到了git服务器端,那么你会发现不能直接push,需要force</span><br><span class="line">git push -f  #默认是origin,如非自己补充.</span><br></pre></td></tr></table></figure><p>然后你最好给你需要设置不同用户名的项目单独设置一个用户名+邮箱 (和全局不冲突):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config user.name &quot;xx&quot;</span><br><span class="line">git config user.email &quot;xx&quot;</span><br></pre></td></tr></table></figure><p>这样就可以愉快的在多个项目间自由使用不同的邮箱+用户名了 ,也不怕搞错了.</p><h4 id="C-修改提交信息"><a href="#C-修改提交信息" class="headerlink" title="C. 修改提交信息"></a>C. 修改提交信息</h4><p>先说简单的, 大家常用的是<code>git commit -m &quot;msg&quot;</code> 来记录这次提交的信息, 有时候需要填<strong>写一段内容</strong>, 其实最简单的就是直接<code>git commit</code> , 它会默认打开一个文本编辑框, 你可以输入信息, 注意#代表此行是不显示的.</p><p>然后</p><p>在执行commit操作的时候, 一般至少会带上一个基本信息, 如果这个信息写错了, 但是你已经push到了server端呢? 分两种情况</p><ol><li>提交信息少了, 我想<strong>补充</strong>一点 (简单) : <code>git commit -a --amend</code> ,这样不会重新开启一个commit ,而是整合到一个. (如果已经提交了多个分支, 那么在本地先reset到第一个, 然后重新<code>push -f</code> 覆盖.)</li><li>提交信息错误, 我希望<strong>覆盖</strong>新的信息 :</li></ol><h4 id="D-修改分支名"><a href="#D-修改分支名" class="headerlink" title="D. 修改分支名"></a>D. 修改分支名</h4><p>有些时候开发就需要定一个新的分支名, 但是很可能后面觉得名字不太合适, 就需要修改, 如果分支还没有提交到远端, 那很简单 : <code>git branch -m oldName newName</code> 就行了, 如果和远端不一致的话呢~</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#1.先修改本地名字</span><br><span class="line">git branch -m oldName newName</span><br><span class="line"></span><br><span class="line">#2.删除远程已有的分支</span><br><span class="line">git push --delete origin oldName</span><br><span class="line"></span><br><span class="line">#3.推送新的本地分支</span><br><span class="line">git push origin newName</span><br><span class="line"></span><br><span class="line">#4.修改后的分支与本地关联(可选)</span><br><span class="line">git branch --set-upstream-to origin&#x2F;newName</span><br></pre></td></tr></table></figure><h4 id="E-回滚rebase-merge等操作"><a href="#E-回滚rebase-merge等操作" class="headerlink" title="E. 回滚rebase/merge等操作"></a>E. 回滚rebase/merge等操作</h4><p>这里也是比较棘手的. 首先, 推荐多用<code>rebase</code>命令, 少用<code>pull/merge</code>(pull自动触发merge, 所以也慎重), 下面以rebase为例, 讲一下相关的撤回操作.</p><ol><li><p>如果是在rebase生效的途中, 提示你被中断, 需要解决冲突, 然后你后悔了, 你可以很简单的通过<code>git rebase --abort</code> 取消回滚.</p></li><li><p>如果是rebase已经完全生效, 那么目前没有直接的回滚<code>undo</code> 命令, 都需要使用<code>reset</code> 这种危险操作. (注意<strong>备份</strong>)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 1.通过reflog这个强大的命令, 查看所有的操作过程</span><br><span class="line">git reflog</span><br><span class="line"></span><br><span class="line"># 2.强制reset回某个时间点</span><br><span class="line"># 这里使用soft的效果就是先只回滚指针,而没有变更数据.需要手动再处理一下暂存区的数据(丢弃&#x2F;添加), 安全一些.</span><br><span class="line">git reset --soft HEAD@&#123;id&#125;  # 这里id是具体的数,别看错了..</span><br><span class="line"></span><br><span class="line"># 2.1 慎重</span><br><span class="line">git reset --hard HEAD@&#123;id&#125; # 如果熟悉确定, 可以直接reset --hard一次到位...建议提前备份:)</span><br></pre></td></tr></table></figure><p>Git的回滚整个生效的原理, 一般也都是基于这整个的记录, 所以遇到错误提交, 先别慌张.. 只要没做一些把日志记录也一并误删的情况, 都是有救的. 不过建议养成危险操作先备份的习惯.</p></li></ol><h2 id="03-初始化与迁移"><a href="#03-初始化与迁移" class="headerlink" title="03. 初始化与迁移"></a>03. 初始化与迁移</h2><h4 id="A-创建新的空分支"><a href="#A-创建新的空分支" class="headerlink" title="A. 创建新的空分支"></a>A. 创建新的空分支</h4><p>默认情况下, 你直接<code>git checkout -b newBranch</code> , 会同时得到所有的当前分支的文件和提交记录, 而有些时候, 我们需要特定分支单独用于其他场景, 比如备份/文档等等. 这时我们就需要学会单独创建一个新的空分支, 然后清空数据了.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#1.使用--orphan参数, 详情可参考help&#x2F;man</span><br><span class="line">git checkout --orphan newBranch  #注意不需要提前创建, 也就不能带-b参数了.</span><br><span class="line"></span><br><span class="line">#2.清空之前的文件, 瞬间干净, 优雅安全~</span><br><span class="line">git rm -rf .</span><br></pre></td></tr></table></figure><h4 id="B-仓库迁移-mirror"><a href="#B-仓库迁移-mirror" class="headerlink" title="B. 仓库迁移 (mirror)"></a>B. 仓库迁移 (mirror)</h4><p>首先要明白自己的需求, 别照着任何网上命令一顿敲. 最后发现云里雾里, 这样就算歪打正着, 也一直不能理解自己到底做了什么.. 确定一下几点:</p><ol><li><p>迁移的仓库是否在同一个作用域, 比如从<code>github --&gt; github</code> , 还是从<code>gitlab --&gt; github</code>, 还是从<code>gitlab8 --&gt; gitlab10</code></p><ul><li>如果是同一个作用域, 那你应该优先选用项目自带的<code>Tranfer</code>功能, 它可以把issue/pr等配置一并完整迁移, <strong>最理想</strong></li><li>如果不是, 看看是否可以用”导出(export)” 和 “导入(方式)” + 代码的迁移 (比如<code>gitlab8--&gt;gitlab10</code>)</li><li>如果以上都不能满足, 再考虑用纯git命令操作, 见2</li></ul></li><li><p>确认原有项目(old)的提交信息是否需要保留?</p><ul><li>需要, 使用<code>git clone mirror</code> 作为核心迁移, 两步走</li><li>不需要, 待补充</li></ul></li><li><p>首先, 镜像克隆<strong>旧项目</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone --mirror  git@..&#x2F;old.git old &amp;&amp; cd old</span><br></pre></td></tr></table></figure></li><li><p>然后在<strong>旧项目</strong>设置 —&gt; 推送当前镜像到<strong>新项目</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 确认你当前是origin</span><br><span class="line">git remote set-url --push origin git@..&#x2F;new.git</span><br><span class="line"></span><br><span class="line">git push --mirror</span><br></pre></td></tr></table></figure></li><li><p>最后, 新的仓库迁移完毕, 检查确认无误后, 记得把本地的<strong>远程仓库地址</strong>修改一下 (及时改)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 修改原本的old地址为new</span><br><span class="line">git remote set-url origin git@..&#x2F;new.git</span><br><span class="line"></span><br><span class="line">git remote -v # 确认一下修改成功</span><br></pre></td></tr></table></figure><p>你会看到网上有很多种做法, 但是大部分说的太复杂，还有些使用<code>init bare</code>的, 其实并没有, 想明白自己的需求, 选择最简单易懂的一种就行. 上述操作只有<strong>3步</strong>即可, 非常易实践. <strong>简单则可靠</strong> . 后续有空再对比一下不同做法的区别.</p></li></ol><h2 id="04-清理"><a href="#04-清理" class="headerlink" title="04. 清理"></a>04. 清理</h2><p>仓库里清理相关主要集中在使用过的分支上, 最常见的两个问题</p><ul><li>本地仓库有大量过期分支 (远端已经删除, 但是本地不会自动删除)</li><li>远程仓库有大量过去分支 (早已合并, 但是未删除, 导致其他人拉取一大堆无用分支)</li></ul><p>第一个问题很好解决, <code>git pull</code> 并<strong>不会删除更新</strong>本地的其它不存在的分支, 应该使用 remote 命令的 <code>prune</code> 参数:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 检测有哪些分支远端已经不存在了.dry-run只是告诉你, 不会实际执行</span><br><span class="line">git remote prune github --dry-run</span><br><span class="line"></span><br><span class="line"># 确认无误后, 直接执行,就自动清理了</span><br><span class="line">git remote prune github</span><br><span class="line"></span><br><span class="line"># 如果还有无效的远端分支, 那可以这样批量删除</span><br><span class="line">git branch -d br1 br2 br3 ... brn</span><br></pre></td></tr></table></figure><p>第二个问题, 暂时没想到太好的办法, 目前是依赖于开启 “合并分支时<strong>删除当前分支</strong>“, 然后每次PR/MR 合并后会自动清理, 至于已有的, 似乎只能确认清楚手动清理了.</p><h2 id="05-快捷命名"><a href="#05-快捷命名" class="headerlink" title="05. 快捷命名"></a>05. 快捷命名</h2><h4 id="A-使用别名"><a href="#A-使用别名" class="headerlink" title="A. 使用别名"></a>A. 使用别名</h4><p><strong>配置alias(别名</strong>). 跟bash一样,git有些常用命令也比较冗长,设置一些快捷名是很有裨益的.<code>git config --global alias.cm commit</code> (语法) .以下是我常用的缩写</p><ul><li><code>ck checkout</code></li><li><code>ps push</code></li><li><code>br &quot;branch -a&quot;</code> #注意多个参数需要用双引号括起来,否则只会读第一个</li><li><code>rmt &quot;remote -v&quot;</code></li><li><code>st status</code></li><li><code>lg &quot;log --graph -4&quot;</code> #显示最近4次的log，以及gitflow图</li><li><code>mg &quot;merge --no-ff&quot;</code> #保留合并,推荐</li></ul><p>然后就可以直接git br显示所有分支了. 当然这每次还要输入git,能不能把git也省了呢,也可以做成一个文件存下来, 方面服务器上同步.</p><h4 id="B-使用Tag"><a href="#B-使用Tag" class="headerlink" title="B. 使用Tag"></a>B. 使用Tag</h4><p><strong>打tag</strong>是很简单的事情,<code>git tag 1.0</code> 代表在当前分支打上了和commit对应的一个标签(因为commit好比是ip,很难记忆,而tag好比是域名,做了一层映射.) ,如果想查看tag信息 <code>git show 1.0</code> 即可</p><p><em>此文会随着使用, 持续更新</em></p><h2 id="06-后续"><a href="#06-后续" class="headerlink" title="06. 后续"></a>06. 后续</h2><p>最后, 下一个 Git 的系列, 会抽空去看看学习一下 Git 的整体架构和原理分析, 不过我发现有前辈已经开放了非常好的资料, 大家可以参考:</p><ol><li>Git的设计哲学和<a href="https://zhuanlan.zhihu.com/p/38245039">结构简述</a> (<strong>整体</strong>与设计)</li><li>详细理解Git的原理和实现, 可参考此<a href="http://www.worldhello.net/gotgit/#">电子书</a>的2/3章, 讲的非常细致 <strong>(进阶 + 细节)</strong></li><li>腾讯的 <a href="https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MjM5ODYwMjI2MA==&action=getalbum&album_id=1482980678991478787&subscene=126&scenenote=https://mp.weixin.qq.com/s?__biz=MjM5ODYwMjI2MA==&mid=2649748215&idx=1&sn=cc362cbbb95b1b7de5d64968c664493e&chksm=bed3618c89a4e89a47f7a0a1d179fd6e9c229e91ca152ee76bf916204a609fdf6f293b13bc4&scene=126&sessionid=159804028&key=b9392b7c27e91e197b1f0b6a5493e2c8a4ac92f4a6add0b2507f71e6f2be6b89254e49cc2930ae5f18365e196575d9facd3b949eda42e469a8f26c695b43dc87e7696fd67524d72537173157c1e84227390a4c4d38d4141e716b6f94f210ff0af5d884eeb286d989b3f969702eddd7b80102153302a223cb1dc8741d91711aa9&ascene=1&uin=NTM4MTA1NTQ5&devicetype=Windows+10+x64&version=62090529&lang=en&exportkey=A+P7p3lc0/wsFk9F7YXrVhY=&pass_ticket=o99nC7ulthnujbSK889KaMMAjE+koNyHoRoyuBfIHWycMLbnIEAnJIlJ/Kv9e+CV&winzoom=1#wechat_redirect">Git专栏</a> (共四篇)</li></ol><hr><p><strong>参考资料:</strong></p><ol><li>文中引用过的所有链接</li><li><a href="https://git-scm.com/doc">git官方文档</a></li><li><a href="http://www.worldhello.net/gotgit/#">Git权威指南-online</a></li><li><a href="https://mp.weixin.qq.com/s/qNqZvjy0RXC0MA5WdSUhAA">Git实用技巧(待看)</a></li></ol><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue开发项目常见业务</title>
      <link href="/%5Bobject%20Object%5D/2021/07/02/vue%E5%BC%80%E5%8F%91%E5%B8%B8%E8%A7%81%E4%B8%9A%E5%8A%A1/"/>
      <url>/%5Bobject%20Object%5D/2021/07/02/vue%E5%BC%80%E5%8F%91%E5%B8%B8%E8%A7%81%E4%B8%9A%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-h5底部输入框被键盘遮挡问题"><a href="#1-h5底部输入框被键盘遮挡问题" class="headerlink" title="1.h5底部输入框被键盘遮挡问题"></a>1.<code>h5</code>底部输入框被键盘遮挡问题</h3><p>如果你遇到<code>h5</code>页面这个问题，当输入框在最底部，点击软键盘后输入框会被遮挡，可以如下解决问题：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var getHeight &#x3D; $(document).height();</span><br><span class="line"></span><br><span class="line">$(window).resize(function()&#123;</span><br><span class="line"> if($(document).height() &lt; getHeight) &#123;</span><br><span class="line">  $(&#39;#footer&#39;).css(&#39;position&#39;,&#39;static&#39;);</span><br><span class="line"> &#125;else &#123;</span><br><span class="line">  $(&#39;#footer&#39;).css(&#39;position&#39;,&#39;absolute&#39;);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="2-触屏即播放"><a href="#2-触屏即播放" class="headerlink" title="2.触屏即播放"></a>2.触屏即播放</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(&#39;html&#39;).one(&#39;touchstart&#39;,function()&#123;</span><br><span class="line"> audio.play()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="3-阻止旋转屏幕时自动调整字体大小"><a href="#3-阻止旋转屏幕时自动调整字体大小" class="headerlink" title="3.阻止旋转屏幕时自动调整字体大小"></a>3.阻止旋转屏幕时自动调整字体大小</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">html, body, form, fieldset, p, div, h1, h2, h3, h4, h5, h6 &#123;-webkit-text-size-adjust:none;&#125;</span><br></pre></td></tr></table></figure><h3 id="4-主流网站布局"><a href="#4-主流网站布局" class="headerlink" title="4.主流网站布局"></a>4.主流网站布局</h3><p>页面分为3个部分：页面的顶部<code>header</code>，底部<code>footer</code>，中间部分（侧栏<code>side</code>和主要部分<code>main</code>）。</p><p>下面代码展示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line"> &#x2F;&#x2F; 页面层容器</span><br><span class="line"> &lt;div id&#x3D;&quot;container&quot;&gt;</span><br><span class="line">  &#x2F;&#x2F; 页面头部</span><br><span class="line">  &lt;div id&#x3D;&quot;header&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">  &#x2F;&#x2F; 页面主体</span><br><span class="line">  &lt;div id&#x3D;&quot;main&quot;&gt;&gt;</span><br><span class="line">   &#x2F;&#x2F; 侧边栏</span><br><span class="line">   &lt;div id&#x3D;&quot;side&quot;&gt;</span><br><span class="line">   &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">  &#x2F;&#x2F; 页面底部</span><br><span class="line">  &lt;div id&#x3D;&quot;footer&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line"> &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure><p>设计页面样式代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;style type&#x3D;&quot;text&#x2F;css&quot;&gt;</span><br><span class="line"> body&#123;</span><br><span class="line">  font: 12px 微软雅黑;</span><br><span class="line">  margin: 0px;</span><br><span class="line">  text-align: center;</span><br><span class="line">  background: #fff;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> &#x2F;&#x2F; 页面层容器</span><br><span class="line"> #container &#123;</span><br><span class="line">  width: 100%;</span><br><span class="line"> &#125;</span><br><span class="line"> #header &#123;</span><br><span class="line">  width: 800px;</span><br><span class="line">  margin: 0 auto;</span><br><span class="line">  height: 100px;</span><br><span class="line">  background: #FFCC99;</span><br><span class="line"> &#125;</span><br><span class="line"> #main &#123;</span><br><span class="line">  width: 800px;</span><br><span class="line">  margin: 0 auto;</span><br><span class="line">  height: 400px;</span><br><span class="line"> &#125;</span><br><span class="line"> #side &#123;</span><br><span class="line">  float: left;</span><br><span class="line">  width: 20em;</span><br><span class="line">  background: red;</span><br><span class="line">  padding: 15px 0;</span><br><span class="line"> &#125;</span><br><span class="line"> #foot &#123;</span><br><span class="line">  width: 800px;</span><br><span class="line">  margin: 0 auto;</span><br><span class="line">  height: 50px;</span><br><span class="line">  background: #00ffff;</span><br><span class="line"> &#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><p>效果图如下：<br><img src="https://cdn.jsdelivr.net/gh/luckyu2/imgLibrary/blogImg/vue%20peitu.png"></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Promise入门</title>
      <link href="/%5Bobject%20Object%5D/2021/06/05/Promise%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3/"/>
      <url>/%5Bobject%20Object%5D/2021/06/05/Promise%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="异步调用"><a href="#异步调用" class="headerlink" title="异步调用"></a>异步调用</h2><h3 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h3><p>JavaScript 的执行环境是<strong>单线程</strong>。</p><p>所谓单线程，是指 JS 引擎中负责解释和执行 JavaScript 代码的线程只有一个，也就是一次只能完成一项任务，这个任务执行完后才能执行下一个，它会「阻塞」其他任务。这个任务可称为主线程。</p><p>异步模式可以一起执行<strong>多个任务</strong>。</p><p>常见的异步模式有以下几种：</p><ul><li><p>定时器</p></li><li><p>接口调用</p></li><li><p>事件函数</p></li></ul><p>今天这篇文章，我们重点讲一下<strong>接口调用</strong>。接口调用里，重点讲一下<strong>Promise</strong>。</p><h3 id="接口调用的方式"><a href="#接口调用的方式" class="headerlink" title="接口调用的方式"></a>接口调用的方式</h3><p>js 中常见的接口调用方式，有以下几种：</p><ul><li>原生 ajax</li><li>基于 jQuery 的 ajax</li><li>Fetch</li><li>Promise</li><li>axios</li></ul><h3 id="多次异步调用的依赖分析"><a href="#多次异步调用的依赖分析" class="headerlink" title="多次异步调用的依赖分析"></a>多次异步调用的依赖分析</h3><ul><li><p>多次异步调用的结果，顺序可能不同步。</p></li><li><p>异步调用的结果如果<strong>存在依赖</strong>，则需要嵌套。</p></li></ul><p>在 ES5 中，当进行多层嵌套回调时，会导致代码层次过多，很难进行维护和二次开发；而且会导致<strong>回调地狱</strong>的问题。ES6 中的 Promise 就可以解决这两个问题。</p><h2 id="Promise-概述"><a href="#Promise-概述" class="headerlink" title="Promise 概述"></a>Promise 概述</h2><h3 id="Promise-的介绍和优点"><a href="#Promise-的介绍和优点" class="headerlink" title="Promise 的介绍和优点"></a>Promise 的介绍和优点</h3><p>ES6 中的 Promise 是异步编程的一种方案。从语法上讲，Promise 是一个对象，它可以获取异步操作的消息。</p><p>Promise 对象, 可以<strong>用同步的表现形式来书写异步代码</strong>（也就是说，代码看起来是同步的，但本质上的运行过程是异步的）。使用 Promise 主要有以下好处：</p><ul><li><p>可以很好地解决<strong>回调地狱</strong>的问题（避免了层层嵌套的回调函数）。</p></li><li><p>语法非常简洁、可读性强。Promise 对象提供了简洁的 API，使得控制异步操作更加容易。</p></li></ul><h3 id="回调地狱的举例"><a href="#回调地狱的举例" class="headerlink" title="回调地狱的举例"></a>回调地狱的举例</h3><p>假设买菜、做饭、洗碗、倒厨余垃圾都是异步的。</p><p>但真实的场景中，实际的操作流程是：买菜成功之后，才能开始做饭。做饭成功后，才能开始洗碗。洗碗结束后， 再倒厨余垃圾。这里的一系列动作就涉及到了多层嵌套调用，也就是回调地狱。</p><h2 id="Promise-的基本用法"><a href="#Promise-的基本用法" class="headerlink" title="Promise 的基本用法"></a>Promise 的基本用法</h2><p>（1）使用 new 实例化一个 Promise 对象，Promise 的构造函数中传递一个参数。这个参数是一个函数，该函数用于处理异步任务。</p><p>（2）并且传入两个参数：resolve 和 reject，分别表示异步执行成功后的回调函数和异步执行失败后的回调函数；</p><p>（3）通过 promise.then() 处理返回结果。这里的 <code>promise</code> 指的是 Promise 实例。</p><h3 id="Promise-处理异步任务"><a href="#Promise-处理异步任务" class="headerlink" title="Promise 处理异步任务"></a>Promise 处理异步任务</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 第一步：model层的接口封装</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 这里做异步任务（比如ajax 请求接口。这里暂时用定时器代替）</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">var</span> data = &#123; <span class="attr">retCode</span>: <span class="number">0</span>, <span class="attr">msg</span>: <span class="string">&#x27;qianguyihao&#x27;</span> &#125;; <span class="comment">// 接口返回的数据</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">if</span> (data.retCode == <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 接口请求成功时调用</span></span></span><br><span class="line">            resolve(data);</span><br><span class="line"><span class="javascript">          &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 接口请求失败时调用</span></span></span><br><span class="line"><span class="javascript">            reject(&#123; <span class="attr">retCode</span>: -<span class="number">1</span>, <span class="attr">msg</span>: <span class="string">&#x27;network error&#x27;</span> &#125;);</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;, 100);</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="comment">// 第二步：业务层的接口调用。这里的 data 就是 从 resolve 和 reject 传过来的，也就是从接口拿到的数据</span></span></span><br><span class="line">      promise</span><br><span class="line"><span class="javascript">        .then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">// 从 resolve 获取正常结果</span></span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(data);</span></span><br><span class="line">        &#125;)</span><br><span class="line"><span class="javascript">        .catch(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">// 从 reject 获取异常结果</span></span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(data);</span></span><br><span class="line">        &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上方代码中，当从接口返回的数据<code>data.retCode</code>的值不同时，可能会走 resolve，也可能会走 reject，这个由你自己的业务决定。</p><h3 id="Promise-封装-Ajax-请求"><a href="#Promise-封装-Ajax-请求" class="headerlink" title="Promise 封装 Ajax 请求"></a>Promise 封装 Ajax 请求</h3><p>写法1：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> request = <span class="built_in">require</span>(<span class="string">&#x27;request&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Promise 封装接口</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">request1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        request(<span class="string">&#x27;https://www.baidu.com&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (response.retCode == <span class="number">200</span>) &#123;</span><br><span class="line">                <span class="comment">// 这里的 response 是接口1的返回结果</span></span><br><span class="line">                resolve(<span class="string">&#x27;request1 success&#x27;</span> + response);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                reject(<span class="string">&#x27;接口请求失败&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">request1().then(<span class="function">(<span class="params">res1</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 接口1请求成功后，打印接口1的返回结果</span></span><br><span class="line">    <span class="built_in">console</span>.log(res1);</span><br><span class="line">    <span class="keyword">return</span> request2();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>写法2：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> request = <span class="built_in">require</span>(<span class="string">&#x27;request&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Promise 封装接口1</span></span><br><span class="line"><span class="keyword">const</span> request1 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        request(<span class="string">&#x27;https://www.baidu.com&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (response.retCode == <span class="number">200</span>) &#123;</span><br><span class="line">                <span class="comment">// 这里的 response 是接口1的返回结果</span></span><br><span class="line">                resolve(<span class="string">&#x27;request1 success&#x27;</span> + response);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                reject(<span class="string">&#x27;接口请求失败&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> promise;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 先发起request1，等resolve后再发起request2；紧接着，等 request2有了 resolve之后，再发起 request3</span></span><br><span class="line">request1().then(<span class="function">(<span class="params">res1</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 接口1请求成功后，打印接口1的返回结果</span></span><br><span class="line">    <span class="built_in">console</span>.log(res1);</span><br><span class="line">    <span class="keyword">return</span> request2();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="promise-对象的-3-个状态（了解即可）"><a href="#promise-对象的-3-个状态（了解即可）" class="headerlink" title="promise 对象的 3 个状态（了解即可）"></a>promise 对象的 3 个状态（了解即可）</h2><ul><li><p>初始化状态（等待状态）：pending</p></li><li><p>成功状态：fulfilled</p></li><li><p>失败状态：rejected</p></li></ul><p>（1）当 new Promise()执行之后，promise 对象的状态会被初始化为<code>pending</code>，这个状态是初始化状态。<code>new Promise()</code>这行代码，括号里的内容是同步执行的。括号里定义一个 function，function 有两个参数：resolve 和 reject。如下：</p><ul><li><p>如果请求成功了，则执行 resolve()，此时，promise 的状态会被自动修改为 fulfilled。</p></li><li><p>如果请求失败了，则执行 reject()，此时，promise 的状态会被自动修改为 rejected</p></li></ul><p>（2）promise.then()方法，括号里面有两个参数，分别代表两个函数 function1 和 function2：</p><ul><li><p>如果 promise 的状态为 fulfilled（意思是：如果请求成功），则执行 function1 里的内容</p></li><li><p>如果 promise 的状态为 rejected（意思是，如果请求失败），则执行 function2 里的内容</p></li></ul><p>另外，resolve()和 reject()这两个方法，是可以给 promise.then()传递参数的。</p><p>完整代码举例如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//进来之后，状态为pending</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;111&#x27;</span>); <span class="comment">//这行代码是同步的</span></span><br><span class="line">  <span class="comment">//开始执行异步操作（这里开始，写异步的代码，比如ajax请求 or 开启定时器）</span></span><br><span class="line">  <span class="keyword">if</span> (异步的ajax请求成功) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;333&#x27;</span>);</span><br><span class="line">    resolve(<span class="string">&#x27;haha&#x27;</span>); <span class="comment">//如果请求成功了，请写resolve()，此时，promise的状态会被自动修改为fulfilled</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    reject(<span class="string">&#x27;555&#x27;</span>); <span class="comment">//如果请求失败了，请写reject()，此时，promise的状态会被自动修改为rejected</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;222&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用promise的then()</span></span><br><span class="line">promise.then(</span><br><span class="line">  (successMsg) =&gt; &#123;</span><br><span class="line">    <span class="comment">//如果promise的状态为fulfilled，则执行这里的代码</span></span><br><span class="line">    <span class="built_in">console</span>.log(successMsg, <span class="string">&#x27;成功了&#x27;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  (errorMsg) =&gt; &#123;</span><br><span class="line">    <span class="comment">//如果promise的状态为rejected，则执行这里的代码</span></span><br><span class="line">    <span class="built_in">console</span>.log(errorMsg, <span class="string">&#x27;失败了&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="基于-Promise-处理多次-Ajax-请求（链式调用）【重要】"><a href="#基于-Promise-处理多次-Ajax-请求（链式调用）【重要】" class="headerlink" title="基于 Promise 处理多次 Ajax 请求（链式调用）【重要】"></a>基于 Promise 处理多次 Ajax 请求（链式调用）【重要】</h2><p>实际开发中，我们经常需要同时请求多个接口。比如说：在请求完<code>接口1</code>的数据<code>data1</code>之后，需要根据<code>data1</code>的数据，继续请求接口 2，获取<code>data2</code>；然后根据<code>data2</code>的数据，继续请求接口 3。</p><p>换而言之，现在有三个网络请求，请求 2 必须依赖请求 1 的结果，请求 3 必须依赖请求 2 的结果，如果按照往常的写法，会有三层回调，会陷入“回调地狱”。</p><p>这种场景其实就是接口的多层嵌套调用。有了 Promise 之后，我们可以把多层嵌套调用按照<strong>线性</strong>的方式进行书写，非常优雅。也就是说：Promise 可以把原本的<strong>多层嵌套调用</strong>改进为<strong>链式调用</strong>。</p><p>代码举例：（多次 Ajax 请求，链式调用）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> request = <span class="built_in">require</span>(<span class="string">&#x27;request&#x27;</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="comment">// Promise 封装接口1</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> request1 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          request(<span class="string">&#x27;https://www.baidu.com&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (response.retCode == <span class="number">200</span>) &#123;</span></span><br><span class="line"><span class="javascript">              <span class="comment">// 这里的 response 是接口1的返回结果</span></span></span><br><span class="line"><span class="javascript">              resolve(<span class="string">&#x27;request1 success&#x27;</span> + response);</span></span><br><span class="line"><span class="javascript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">              reject(<span class="string">&#x27;接口请求失败&#x27;</span>);</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> promise;</span></span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="comment">// Promise 封装接口2</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> request2 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          request(<span class="string">&#x27;https://www.jd.com&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (response.retCode == <span class="number">200</span>) &#123;</span></span><br><span class="line"><span class="javascript">              <span class="comment">// 这里的 response 是接口2的返回结果</span></span></span><br><span class="line"><span class="javascript">              resolve(<span class="string">&#x27;request2 success&#x27;</span> + response);</span></span><br><span class="line"><span class="javascript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">              reject(<span class="string">&#x27;接口请求失败&#x27;</span>);</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> promise;</span></span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="comment">// Promise 封装接口3</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> request3 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          request(<span class="string">&#x27;https://www.taobao.com&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (response.retCode == <span class="number">200</span>) &#123;</span></span><br><span class="line"><span class="javascript">              <span class="comment">// 这里的 response 是接口3的返回结果</span></span></span><br><span class="line"><span class="javascript">              resolve(<span class="string">&#x27;request3 success&#x27;</span> + response);</span></span><br><span class="line"><span class="javascript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">              reject(<span class="string">&#x27;接口请求失败&#x27;</span>);</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> promise;</span></span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="comment">// 先发起request1，等resolve后再发起request2；紧接着，等 request2有了 resolve之后，再发起 request3</span></span></span><br><span class="line">      request1()</span><br><span class="line"><span class="javascript">        .then(<span class="function">(<span class="params">res1</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">// 接口1请求成功后，打印接口1的返回结果</span></span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(res1);</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> request2();</span></span><br><span class="line">        &#125;)</span><br><span class="line"><span class="javascript">        .then(<span class="function">(<span class="params">res2</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">// 接口2请求成功后，打印接口2的返回结果</span></span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(res2);</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> request3();</span></span><br><span class="line">        &#125;)</span><br><span class="line"><span class="javascript">        .then(<span class="function">(<span class="params">res3</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">// 接口3请求成功后，打印接口3的返回结果</span></span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(res3);</span></span><br><span class="line">        &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面代码中，then 是可以链式调用的，后面的 then 可以拿到前面 resolve 出来的数据。</p><p>这个举例很经典，需要多看几遍。</p><h2 id="return-的函数返回值"><a href="#return-的函数返回值" class="headerlink" title="return 的函数返回值"></a>return 的函数返回值</h2><p>return 后面的返回值，有两种情况：</p><ul><li><p>情况 1：返回 Promise 实例对象。返回的该实例对象会调用下一个 then。</p></li><li><p>情况 2：返回普通值。返回的普通值会直接传递给下一个 then，通过 then 参数中函数的参数接收该值。</p></li></ul><p>我们针对上面这两种情况，详细解释一下。</p><h3 id="情况-1：返回-Promise-实例对象"><a href="#情况-1：返回-Promise-实例对象" class="headerlink" title="情况 1：返回 Promise 实例对象"></a>情况 1：返回 Promise 实例对象</h3><p>举例如下：（这个例子，跟上一段 Ajax 链式调用 的例子差不多）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line">      /*</span><br><span class="line"><span class="javascript">              基于<span class="built_in">Promise</span>发送Ajax请求</span></span><br><span class="line">            */</span><br><span class="line"><span class="javascript">      <span class="function"><span class="keyword">function</span> <span class="title">queryData</span>(<span class="params">url</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="javascript">          xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (xhr.readyState != <span class="number">4</span>) <span class="keyword">return</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (xhr.readyState == <span class="number">4</span> &amp;&amp; xhr.status == <span class="number">200</span>) &#123;</span></span><br><span class="line"><span class="javascript">              <span class="comment">// 处理正常情况</span></span></span><br><span class="line">              resolve(xhr.responseText);</span><br><span class="line"><span class="javascript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">              <span class="comment">// 处理异常情况</span></span></span><br><span class="line"><span class="javascript">              reject(<span class="string">&#x27;接口请求失败&#x27;</span>);</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;;</span><br><span class="line"><span class="javascript">          xhr.responseType = <span class="string">&#x27;json&#x27;</span>; <span class="comment">// 设置返回的数据类型</span></span></span><br><span class="line"><span class="javascript">          xhr.open(<span class="string">&#x27;get&#x27;</span>, url);</span></span><br><span class="line"><span class="javascript">          xhr.send(<span class="literal">null</span>); <span class="comment">// 请求接口</span></span></span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line"><span class="javascript">      <span class="comment">// 发送多个ajax请求并且保证顺序</span></span></span><br><span class="line"><span class="javascript">      queryData(<span class="string">&#x27;http://localhost:3000/api1&#x27;</span>)</span></span><br><span class="line">        .then(</span><br><span class="line">          (data1) =&gt; &#123;</span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(data1));</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> queryData(<span class="string">&#x27;http://localhost:3000/api2&#x27;</span>);</span></span><br><span class="line">          &#125;,</span><br><span class="line">          (error1) =&gt; &#123;</span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(error1);</span></span><br><span class="line">          &#125;</span><br><span class="line">        )</span><br><span class="line">        .then(</span><br><span class="line">          (data2) =&gt; &#123;</span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(data2));</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 这里的 return，返回的是 Promise 实例对象</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">              resolve(<span class="string">&#x27;qianguyihao&#x27;</span>);</span></span><br><span class="line">            &#125;);</span><br><span class="line">          &#125;,</span><br><span class="line">          (error2) =&gt; &#123;</span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(error2);</span></span><br><span class="line">          &#125;</span><br><span class="line">        )</span><br><span class="line"><span class="javascript">        .then(<span class="function">(<span class="params">data3</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(data3);</span></span><br><span class="line">        &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="情况-2：返回-普通值"><a href="#情况-2：返回-普通值" class="headerlink" title="情况 2：返回 普通值"></a>情况 2：返回 普通值</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line">      /*</span><br><span class="line"><span class="javascript">              基于<span class="built_in">Promise</span>发送Ajax请求</span></span><br><span class="line">            */</span><br><span class="line"><span class="javascript">      <span class="function"><span class="keyword">function</span> <span class="title">queryData</span>(<span class="params">url</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="javascript">          xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (xhr.readyState != <span class="number">4</span>) <span class="keyword">return</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (xhr.readyState == <span class="number">4</span> &amp;&amp; xhr.status == <span class="number">200</span>) &#123;</span></span><br><span class="line"><span class="javascript">              <span class="comment">// 处理正常情况</span></span></span><br><span class="line">              resolve(xhr.responseText);</span><br><span class="line"><span class="javascript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">              <span class="comment">// 处理异常情况</span></span></span><br><span class="line"><span class="javascript">              reject(<span class="string">&#x27;接口请求失败&#x27;</span>);</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;;</span><br><span class="line"><span class="javascript">          xhr.responseType = <span class="string">&#x27;json&#x27;</span>; <span class="comment">// 设置返回的数据类型</span></span></span><br><span class="line"><span class="javascript">          xhr.open(<span class="string">&#x27;get&#x27;</span>, url);</span></span><br><span class="line"><span class="javascript">          xhr.send(<span class="literal">null</span>); <span class="comment">// 请求接口</span></span></span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line"><span class="javascript">      <span class="comment">// 发送多个ajax请求并且保证顺序</span></span></span><br><span class="line"><span class="javascript">      queryData(<span class="string">&#x27;http://localhost:3000/api1&#x27;</span>)</span></span><br><span class="line">        .then(</span><br><span class="line">          (data1) =&gt; &#123;</span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(data1));</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> queryData(<span class="string">&#x27;http://localhost:3000/api2&#x27;</span>);</span></span><br><span class="line">          &#125;,</span><br><span class="line">          (error1) =&gt; &#123;</span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(error1);</span></span><br><span class="line">          &#125;</span><br><span class="line">        )</span><br><span class="line">        .then(</span><br><span class="line">          (data2) =&gt; &#123;</span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(data2));</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 返回普通值</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="string">&#x27;qianguyihao&#x27;</span>;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          (error2) =&gt; &#123;</span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(error2);</span></span><br><span class="line">          &#125;</span><br><span class="line">        )</span><br><span class="line">        /*</span><br><span class="line">                    既然上方返回的是 普通值，那么，这里的 then 是谁来调用呢？</span><br><span class="line">                    答案是：这里会产生一个新的 默认的 promise实例，来调用这里的then，确保可以继续进行链式操作。</span><br><span class="line">                */</span><br><span class="line"><span class="javascript">        .then(<span class="function">(<span class="params">data3</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">// 这里的 data3 接收的是 普通值 &#x27;qianguyihao&#x27;</span></span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(data3);</span></span><br><span class="line">        &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Promise-的常用-API：实例方法【重要】"><a href="#Promise-的常用-API：实例方法【重要】" class="headerlink" title="Promise 的常用 API：实例方法【重要】"></a>Promise 的常用 API：实例方法【重要】</h2><p>Promise 自带的 API 提供了如下实例方法：</p><ul><li><p>promise.then()：获取异步任务的正常结果。</p></li><li><p>promise.catch()：获取异步任务的异常结果。</p></li><li><p>promise.finaly()：异步任务无论成功与否，都会执行。</p></li></ul><p>代码举例如下。</p><p>写法 1：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="keyword">function</span> <span class="title">queryData</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> data = &#123; <span class="attr">retCode</span>: <span class="number">0</span>, <span class="attr">msg</span>: <span class="string">&#x27;qianguyihao&#x27;</span> &#125;; <span class="comment">// 接口返回的数据</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (data.retCode == <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="javascript">              <span class="comment">// 接口请求成功时调用</span></span></span><br><span class="line">              resolve(data);</span><br><span class="line"><span class="javascript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">              <span class="comment">// 接口请求失败时调用</span></span></span><br><span class="line"><span class="javascript">              reject(&#123; <span class="attr">retCode</span>: -<span class="number">1</span>, <span class="attr">msg</span>: <span class="string">&#x27;network error&#x27;</span> &#125;);</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;, 100);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      queryData()</span><br><span class="line"><span class="javascript">        .then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">// 从 resolve 获取正常结果</span></span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(<span class="string">&#x27;接口请求成功时，走这里&#x27;</span>);</span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(data);</span></span><br><span class="line">        &#125;)</span><br><span class="line"><span class="javascript">        .catch(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">// 从 reject 获取异常结果</span></span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(<span class="string">&#x27;接口请求失败时，走这里&#x27;</span>);</span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(data);</span></span><br><span class="line">        &#125;)</span><br><span class="line"><span class="javascript">        .finally(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(<span class="string">&#x27;无论接口请求成功与否，都会走这里&#x27;</span>);</span></span><br><span class="line">        &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>写法 2：（和上面的写法 1 等价）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="keyword">function</span> <span class="title">queryData</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> data = &#123; <span class="attr">retCode</span>: <span class="number">0</span>, <span class="attr">msg</span>: <span class="string">&#x27;qianguyihao&#x27;</span> &#125;; <span class="comment">// 接口返回的数据</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (data.retCode == <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="javascript">              <span class="comment">// 接口请求成功时调用</span></span></span><br><span class="line">              resolve(data);</span><br><span class="line"><span class="javascript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">              <span class="comment">// 接口请求失败时调用</span></span></span><br><span class="line"><span class="javascript">              reject(&#123; <span class="attr">retCode</span>: -<span class="number">1</span>, <span class="attr">msg</span>: <span class="string">&#x27;network error&#x27;</span> &#125;);</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;, 100);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      queryData()</span><br><span class="line">        .then(</span><br><span class="line">          (data) =&gt; &#123;</span><br><span class="line"><span class="javascript">            <span class="comment">// 从 resolve 获取正常结果</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&#x27;接口请求成功时，走这里&#x27;</span>);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(data);</span></span><br><span class="line">          &#125;,</span><br><span class="line">          (data) =&gt; &#123;</span><br><span class="line"><span class="javascript">            <span class="comment">// 从 reject 获取异常结果</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&#x27;接口请求失败时，走这里&#x27;</span>);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(data);</span></span><br><span class="line">          &#125;</span><br><span class="line">        )</span><br><span class="line"><span class="javascript">        .finally(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(<span class="string">&#x27;无论接口请求成功与否，都会走这里&#x27;</span>);</span></span><br><span class="line">        &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>：写法 1 和写法 2 的作用是完全等价的。只不过，写法 2 是把 catch 里面的代码作为 then 里面的第二个参数而已。</p><h2 id="Promise-的常用-API：对象方法【重要】"><a href="#Promise-的常用-API：对象方法【重要】" class="headerlink" title="Promise 的常用 API：对象方法【重要】"></a>Promise 的常用 API：对象方法【重要】</h2><p>Promise 自带的 API 提供了如下对象方法：</p><ul><li><p>Promise.all()：并发处理多个异步任务，所有任务都执行成功，才能得到结果。</p></li><li><p>Promise.race(): 并发处理多个异步任务，只要有一个任务执行成功，就能得到结果。</p></li></ul><p>下面来详细介绍。</p><h3 id="Promise-all-代码举例"><a href="#Promise-all-代码举例" class="headerlink" title="Promise.all() 代码举例"></a>Promise.all() 代码举例</h3><p>代码举例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line">      /*</span><br><span class="line"><span class="javascript">              封装 <span class="built_in">Promise</span> 接口调用</span></span><br><span class="line">            */</span><br><span class="line"><span class="javascript">      <span class="function"><span class="keyword">function</span> <span class="title">queryData</span>(<span class="params">url</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="javascript">          xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (xhr.readyState != <span class="number">4</span>) <span class="keyword">return</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (xhr.readyState == <span class="number">4</span> &amp;&amp; xhr.status == <span class="number">200</span>) &#123;</span></span><br><span class="line"><span class="javascript">              <span class="comment">// 处理正常结果</span></span></span><br><span class="line">              resolve(xhr.responseText);</span><br><span class="line"><span class="javascript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">              <span class="comment">// 处理异常结果</span></span></span><br><span class="line"><span class="javascript">              reject(<span class="string">&#x27;服务器错误&#x27;</span>);</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;;</span><br><span class="line"><span class="javascript">          xhr.open(<span class="string">&#x27;get&#x27;</span>, url);</span></span><br><span class="line"><span class="javascript">          xhr.send(<span class="literal">null</span>);</span></span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> promise1 = queryData(<span class="string">&#x27;http://localhost:3000/api1&#x27;</span>);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> promise2 = queryData(<span class="string">&#x27;http://localhost:3000/api2&#x27;</span>);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> promise3 = queryData(<span class="string">&#x27;http://localhost:3000/api3&#x27;</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="built_in">Promise</span>.all([promise1, promise2, promise3]).then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(result);</span></span><br><span class="line">      &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Promise-race-代码举例"><a href="#Promise-race-代码举例" class="headerlink" title="Promise.race() 代码举例"></a>Promise.race() 代码举例</h3><p>代码举例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line">      /*</span><br><span class="line"><span class="javascript">              封装 <span class="built_in">Promise</span> 接口调用</span></span><br><span class="line">            */</span><br><span class="line"><span class="javascript">      <span class="function"><span class="keyword">function</span> <span class="title">queryData</span>(<span class="params">url</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="javascript">          xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (xhr.readyState != <span class="number">4</span>) <span class="keyword">return</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (xhr.readyState == <span class="number">4</span> &amp;&amp; xhr.status == <span class="number">200</span>) &#123;</span></span><br><span class="line"><span class="javascript">              <span class="comment">// 处理正常结果</span></span></span><br><span class="line">              resolve(xhr.responseText);</span><br><span class="line"><span class="javascript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">              <span class="comment">// 处理异常结果</span></span></span><br><span class="line"><span class="javascript">              reject(<span class="string">&#x27;服务器错误&#x27;</span>);</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;;</span><br><span class="line"><span class="javascript">          xhr.open(<span class="string">&#x27;get&#x27;</span>, url);</span></span><br><span class="line"><span class="javascript">          xhr.send(<span class="literal">null</span>);</span></span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> promise1 = queryData(<span class="string">&#x27;http://localhost:3000/api1&#x27;</span>);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> promise2 = queryData(<span class="string">&#x27;http://localhost:3000/api2&#x27;</span>);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> promise3 = queryData(<span class="string">&#x27;http://localhost:3000/api3&#x27;</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="built_in">Promise</span>.race([promise1, promise2, promise3]).then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(result);</span></span><br><span class="line">      &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>了解这些内容之后， Promise 的基本用法，你就已经掌握了。</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node.js操作MySQL数据库</title>
      <link href="/%5Bobject%20Object%5D/2021/04/11/Node-js%E6%93%8D%E4%BD%9CMySQL%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/%5Bobject%20Object%5D/2021/04/11/Node-js%E6%93%8D%E4%BD%9CMySQL%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Node-js-连接-MySQL"><a href="#Node-js-连接-MySQL" class="headerlink" title="Node.js 连接 MySQL"></a>Node.js 连接 MySQL</h2><p>（1）安装 mysql 包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install mysql</span><br></pre></td></tr></table></figure><p>（2）引入 mysql 包：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mysql = <span class="built_in">require</span>(<span class="string">&quot;mysql&quot;</span>);</span><br></pre></td></tr></table></figure><p>（3）建立连接：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mysql = <span class="built_in">require</span>(<span class="string">&quot;mysql&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> options = &#123;</span><br><span class="line">  host: <span class="string">&quot;localhost&quot;</span>,</span><br><span class="line">  <span class="comment">//port:&quot;3306&quot;, //可选，默认3306</span></span><br><span class="line">  user: <span class="string">&quot;root&quot;</span>,</span><br><span class="line">  password: <span class="string">&#x27;xxx&#x27;</span>, <span class="comment">// 这里改成你自己的数据库连接密码</span></span><br><span class="line">  database: <span class="string">&quot;qiangu_database&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//创建与数据库进行连接的连接对象</span></span><br><span class="line"><span class="keyword">let</span> connection = mysql.createConnection(options);</span><br><span class="line"></span><br><span class="line"><span class="comment">//建立连接</span></span><br><span class="line">connection.connect(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="comment">// 数据库连接成功</span></span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 数据库连接失败</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;数据库连接成功&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>正常来说，运行程序后，应该会提示<code>数据库连接成功</code>。</p><p>如果在运行时提示错误<code>Client does not support authentication protocol requested by server</code>，解决办法如下：(在终端进入 sql 之后，输入如下命令)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 注意，这里的 <span class="string">&#x27;root&#x27;</span> 请填你的<span class="keyword">user</span>账号， <span class="string">&#x27;localhost&#x27;</span> 请填 你的 host， <span class="string">&#x27;password&#x27;</span> 请填你的密码</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">WITH</span> mysql_native_password <span class="keyword">BY</span> <span class="string">&#x27;password&#x27;</span>;</span><br><span class="line"></span><br><span class="line"># 然后执行如下命令</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><h2 id="Node-js-增删改查-MySQL"><a href="#Node-js-增删改查-MySQL" class="headerlink" title="Node.js 增删改查 MySQL"></a>Node.js 增删改查 MySQL</h2><p>针对下面这张表：</p><p><img src="https://github.com/qianguyihao/Web/blob/master/img/20200418_1728.png"></p><p>通过 Node.js可以对其进行一些增删改查操作。代码举例如下。</p><h3 id="1、查询表"><a href="#1、查询表" class="headerlink" title="1、查询表"></a>1、查询表</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mysql = <span class="built_in">require</span>(<span class="string">&#x27;mysql&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> options = &#123;</span><br><span class="line">    host: <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">    <span class="comment">//port:&quot;3306&quot;,//可选，默认3306</span></span><br><span class="line">    user: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">    password: <span class="string">&#x27;xxx&#x27;</span>, <span class="comment">// 这里改成你自己的数据库密码</span></span><br><span class="line">    database: <span class="string">&#x27;qiangu_database&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建与数据库进行连接的连接对象</span></span><br><span class="line"><span class="keyword">let</span> connection = mysql.createConnection(options);</span><br><span class="line"></span><br><span class="line"><span class="comment">//建立连接</span></span><br><span class="line">connection.connect(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="comment">// 数据库连接成功</span></span><br><span class="line">        <span class="built_in">console</span>.log(err)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 数据库连接失败</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;数据库连接成功&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1、查询表</span></span><br><span class="line"><span class="keyword">let</span> strSql1 = <span class="string">&#x27;select * from qiangu_student_table&#x27;</span>;</span><br><span class="line">connection.query(strSql1, <span class="function">(<span class="params">err, result, fields</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="comment">// 表查询失败</span></span><br><span class="line">        <span class="built_in">console</span>.log(err);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 表查询成功</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;qiangu_student_table 表查询结果：&#x27;</span> + <span class="built_in">JSON</span>.stringify(result));</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;fields:&#x27;</span> + <span class="built_in">JSON</span>.stringify(fields));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>打印结果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">qiangu_student_table 表查询结果：</span><br><span class="line">[&#123;<span class="string">&quot;id&quot;</span>:1,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;千古壹号&quot;</span>,<span class="string">&quot;age&quot;</span>:28&#125;,&#123;<span class="string">&quot;id&quot;</span>:2,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;许嵩&quot;</span>,<span class="string">&quot;age&quot;</span>:34&#125;,&#123;<span class="string">&quot;id&quot;</span>:3,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;邓紫棋&quot;</span>,<span class="string">&quot;age&quot;</span>:28&#125;]</span><br><span class="line"></span><br><span class="line">fields:[</span><br><span class="line">    &#123;<span class="string">&quot;catalog&quot;</span>:<span class="string">&quot;def&quot;</span>,<span class="string">&quot;db&quot;</span>:<span class="string">&quot;qiangu_database&quot;</span>,<span class="string">&quot;table&quot;</span>:<span class="string">&quot;qiangu_student_table&quot;</span>,<span class="string">&quot;orgTable&quot;</span>:<span class="string">&quot;qiangu_student_table&quot;</span>,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;id&quot;</span>,<span class="string">&quot;orgName&quot;</span>:<span class="string">&quot;id&quot;</span>,<span class="string">&quot;charsetNr&quot;</span>:63,<span class="string">&quot;length&quot;</span>:11,<span class="string">&quot;type&quot;</span>:3,<span class="string">&quot;flags&quot;</span>:0,<span class="string">&quot;decimals&quot;</span>:0,<span class="string">&quot;zeroFill&quot;</span>:<span class="literal">false</span>,<span class="string">&quot;protocol41&quot;</span>:<span class="literal">true</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;catalog&quot;</span>:<span class="string">&quot;def&quot;</span>,<span class="string">&quot;db&quot;</span>:<span class="string">&quot;qiangu_database&quot;</span>,<span class="string">&quot;table&quot;</span>:<span class="string">&quot;qiangu_student_table&quot;</span>,<span class="string">&quot;orgTable&quot;</span>:<span class="string">&quot;qiangu_student_table&quot;</span>,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;name&quot;</span>,<span class="string">&quot;orgName&quot;</span>:<span class="string">&quot;name&quot;</span>,<span class="string">&quot;charsetNr&quot;</span>:33,<span class="string">&quot;length&quot;</span>:765,<span class="string">&quot;type&quot;</span>:253,<span class="string">&quot;flags&quot;</span>:0,<span class="string">&quot;decimals&quot;</span>:0,<span class="string">&quot;zeroFill&quot;</span>:<span class="literal">false</span>,<span class="string">&quot;protocol41&quot;</span>:<span class="literal">true</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;catalog&quot;</span>:<span class="string">&quot;def&quot;</span>,<span class="string">&quot;db&quot;</span>:<span class="string">&quot;qiangu_database&quot;</span>,<span class="string">&quot;table&quot;</span>:<span class="string">&quot;qiangu_student_table&quot;</span>,<span class="string">&quot;orgTable&quot;</span>:<span class="string">&quot;qiangu_student_table&quot;</span>,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;age&quot;</span>,<span class="string">&quot;orgName&quot;</span>:<span class="string">&quot;age&quot;</span>,<span class="string">&quot;charsetNr&quot;</span>:63,<span class="string">&quot;length&quot;</span>:11,<span class="string">&quot;type&quot;</span>:3,<span class="string">&quot;flags&quot;</span>:0,<span class="string">&quot;decimals&quot;</span>:0,<span class="string">&quot;zeroFill&quot;</span>:<span class="literal">false</span>,<span class="string">&quot;protocol41&quot;</span>:<span class="literal">true</span>&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2、删除表</span></span><br><span class="line"><span class="keyword">let</span> strSql2 = <span class="string">&#x27;drop table test2_table&#x27;</span>;</span><br><span class="line">connection.query(strSql2, <span class="function">(<span class="params">err, result</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="comment">// 表删除失败</span></span><br><span class="line">        <span class="built_in">console</span>.log(err);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 表删除成功</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;表删除成功：&#x27;</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>打印结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">表删除成功：</span><br><span class="line">OkPacket &#123;</span><br><span class="line">    fieldCount: 0,</span><br><span class="line">    affectedRows: 0,</span><br><span class="line">    insertId: 0,</span><br><span class="line">    serverStatus: 2,</span><br><span class="line">    warningCount: 0,</span><br><span class="line">    message: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    protocol41: <span class="literal">true</span>,</span><br><span class="line">    changedRows: 0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h3><p>将上方的sql语句换一下即可：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let strSql3 <span class="operator">=</span> <span class="string">&#x27;drop database qiangu_database&#x27;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2、新建数据库"><a href="#2、新建数据库" class="headerlink" title="2、新建数据库"></a>2、新建数据库</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mysql = <span class="built_in">require</span>(<span class="string">&#x27;mysql&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> options = &#123;</span><br><span class="line">    host: <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">    <span class="comment">//port:&quot;3306&quot;,//可选，默认3306</span></span><br><span class="line">    user: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">    password: <span class="string">&#x27;smyhvae001&#x27;</span>,</span><br><span class="line">    <span class="comment">// database: &#x27;qiangu_database&#x27;  // 注意，因为代码里是创建新的数据库，所以这里不需要填其他的数据库名</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建与数据库进行连接的连接对象</span></span><br><span class="line"><span class="keyword">let</span> connection = mysql.createConnection(options);</span><br><span class="line"></span><br><span class="line"><span class="comment">//建立连接</span></span><br><span class="line">connection.connect(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="comment">// 数据库连接成功</span></span><br><span class="line">        <span class="built_in">console</span>.log(err);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 数据库连接失败</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;数据库连接成功&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建新的数据库</span></span><br><span class="line"><span class="keyword">const</span> strSql4 = <span class="string">&#x27;create database qiangu_database3&#x27;</span>;</span><br><span class="line">connection.query(strSql4, <span class="function">(<span class="params">err, result</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;新建数据库成功：&#x27;</span> + <span class="built_in">JSON</span>.stringify(result));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>打印结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">数据库连接成功</span><br><span class="line">新建数据库成功：&#123;</span><br><span class="line">    <span class="string">&quot;fieldCount&quot;</span>:0,<span class="string">&quot;affectedRows&quot;</span>:1,<span class="string">&quot;insertId&quot;</span>:0,<span class="string">&quot;serverStatus&quot;</span>:2,<span class="string">&quot;warningCount&quot;</span>:0,<span class="string">&quot;message&quot;</span>:<span class="string">&quot;&quot;</span>,<span class="string">&quot;protocol41&quot;</span>:<span class="literal">true</span>,<span class="string">&quot;changedRows&quot;</span>:0</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3、新建表"><a href="#3、新建表" class="headerlink" title="3、新建表"></a>3、新建表</h3><p>新建表的sql语句举例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `qiangu_table5` (</span><br><span class="line">    `id` <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">    `name` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    `age` <span class="type">int</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (`id`)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>如果是在 js 代码中执行上面这样命令的话，要记得把 sql 语句存放在字符串里的同一行。</p><p>代码举例如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mysql = <span class="built_in">require</span>(<span class="string">&#x27;mysql&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> options = &#123;</span><br><span class="line">    host: <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">    <span class="comment">//port:&quot;3306&quot;,//可选，默认3306</span></span><br><span class="line">    user: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">    password: <span class="string">&#x27;smyhvae001&#x27;</span>,</span><br><span class="line">    database: <span class="string">&#x27;qiangu_database&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建与数据库进行连接的连接对象</span></span><br><span class="line"><span class="keyword">let</span> connection = mysql.createConnection(options);</span><br><span class="line"></span><br><span class="line"><span class="comment">//建立连接</span></span><br><span class="line">connection.connect(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="comment">// 数据库连接成功</span></span><br><span class="line">        <span class="built_in">console</span>.log(err);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 数据库连接失败</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;数据库连接成功&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 新建表</span></span><br><span class="line"><span class="comment">// 注意，在 js 代码中，sql 语句要存放在字符串里的同一行。</span></span><br><span class="line"><span class="keyword">const</span> strSql5 = <span class="string">&#x27;CREATE TABLE `qianguyihao_table5` (`id` int NOT NULL AUTO_INCREMENT,`name` varchar(255) DEFAULT NULL,`age` int DEFAULT NULL,PRIMARY KEY (`id`));&#x27;</span>;</span><br><span class="line"></span><br><span class="line">connection.query(strSql5, <span class="function">(<span class="params">err, result</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="comment">// 新建表失败</span></span><br><span class="line">        <span class="built_in">console</span>.log(err);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 新建表成功</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;qianguyihao 新建表成功：&#x27;</span> + <span class="built_in">JSON</span>.stringify(result));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>打印结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">数据库连接成功</span><br><span class="line">qianguyihao 新建表成功：</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;fieldCount&quot;</span>:0,<span class="string">&quot;affectedRows&quot;</span>:0,<span class="string">&quot;insertId&quot;</span>:0,<span class="string">&quot;serverStatus&quot;</span>:2,<span class="string">&quot;warningCount&quot;</span>:0,<span class="string">&quot;message&quot;</span>:<span class="string">&quot;&quot;</span>,<span class="string">&quot;protocol41&quot;</span>:<span class="literal">true</span>,<span class="string">&quot;changedRows&quot;</span>:0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="在指定的表中插入数据"><a href="#在指定的表中插入数据" class="headerlink" title="在指定的表中插入数据"></a>在指定的表中插入数据</h3><p>在指定的表中插入数据：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在指定的表中插入数据</span></span><br><span class="line"><span class="keyword">const</span> strSql6 = <span class="string">&quot;insert into qianguyihao_table5 (name, age) values (&#x27;千古壹号&#x27;, &#x27;28&#x27;)&quot;</span>;</span><br><span class="line"></span><br><span class="line">connection.query(strSql6, <span class="function">(<span class="params">err, result</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="comment">// 插入数据失败</span></span><br><span class="line">        <span class="built_in">console</span>.log(err);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 在指定的表中插入数据成功</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;qianguyihao 在指定的表中插入数据成功：&#x27;</span> + <span class="built_in">JSON</span>.stringify(result));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>打印结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">qianguyihao 在指定的表中插入数据成功：</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;fieldCount&quot;</span>:0,<span class="string">&quot;affectedRows&quot;</span>:1,<span class="string">&quot;insertId&quot;</span>:1,<span class="string">&quot;serverStatus&quot;</span>:2,<span class="string">&quot;warningCount&quot;</span>:0,<span class="string">&quot;message&quot;</span>:<span class="string">&quot;&quot;</span>,<span class="string">&quot;protocol41&quot;</span>:<span class="literal">true</span>,<span class="string">&quot;changedRows&quot;</span>:0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果插入的数据是变量（比如是用户提交上来的数据），那么，sql 语句可以这样写：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在指定的表中插入数据（数据作为变量）</span></span><br><span class="line"><span class="keyword">const</span> strSql7 = <span class="string">&quot;insert into qianguyihao_table5 (name, age) values (?, ?)&quot;</span>;</span><br><span class="line"></span><br><span class="line">connection.query(strSql7, [<span class="string">&#x27;许嵩&#x27;</span>, <span class="string">&#x27;34&#x27;</span>], <span class="function">(<span class="params">err, result</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="comment">// 插入数据失败</span></span><br><span class="line">        <span class="built_in">console</span>.log(err);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 在指定的表中插入数据成功</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;qiangauyihao 在指定的表中插入数据成功：&#x27;</span> + <span class="built_in">JSON</span>.stringify(result));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      
        <tags>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flex布局图文详解</title>
      <link href="/%5Bobject%20Object%5D/2021/03/21/flex%E4%BD%93%E9%AA%8C/"/>
      <url>/%5Bobject%20Object%5D/2021/03/21/flex%E4%BD%93%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>CSS3中的 flex 属性，在布局方面做了非常大的改进，使得我们对<strong>多个元素之间</strong>的布局排列变得十分灵活，适应性非常强。其强大的伸缩性和自适应性，在网页开中可以发挥极大的作用。</p><h3 id="flex-初体验"><a href="#flex-初体验" class="headerlink" title="flex 初体验"></a>flex 初体验</h3><p>我们先来看看下面这个最简单的布局：</p><p><img src="http://img.smyhvae.com/20191009_1555.png"></p><p>上面这张图中的布局是我们都熟悉的：默认文档流中，在一个父容器里放置多个块级的子元素，那么，这些子元素会默认从上往下排列。</p><p>在此基础之上，如果我给父容器仅仅加一个 <code>display: flex</code>属性，此时，这些子元素的布局会摇身一变：</p><p><img src="http://img.smyhvae.com/20191009_1600.png"></p><p>没错，子元素们会<strong>在水平方向上，从左至右排列</strong>，就是这么神奇。到此为止，你已经掌握了关于 flex 的一半的知识。</p><h3 id="flex-布局的优势"><a href="#flex-布局的优势" class="headerlink" title="flex 布局的优势"></a>flex 布局的优势</h3><p>1、<strong>flex 布局的子元素不会脱离文档流</strong>，很好地遵从了“流的特性”。</p><p>但你如果用 float 来做布局，float 属性的元素会脱离文档流，而且会涉及到各种 BFC、清除浮动的问题。浮动相关的问题，比较麻烦，所以也成了面试必问的经典题目。但有了 flex 布局之后，这些问题都不存在的。</p><p>2、<strong>flex 是一种现代的布局方式，是 W3C 第一次提供真正用于布局的 CSS 规范</strong>。 flex 非常提供了丰富的属性，非常灵活，让布局的实现更佳多样化，且方便易用。</p><p>flex 唯一的缺点就在于，它不支持低版本的 IE 浏览器。</p><h3 id="flex-的兼容性问题"><a href="#flex-的兼容性问题" class="headerlink" title="flex 的兼容性问题"></a>flex 的兼容性问题</h3><p><img src="http://img.smyhvae.com/20191005_1200.png"></p><p>上图中可以看到， flex 布局不支持 IE9 及以下的版本；IE10及以上也只是部分支持。如果你的页面不需要处理 IE浏览器的兼容性问题，则可以放心大胆地使用 flex 布局。</p><p>但是，比如网易新闻、淘宝这样的大型网站，面对的是海量用户，即便使用低版本浏览器的用户比例很少，但绝对基数仍然是很庞大的。因此，这些网站为了兼容低版本的 IE 浏览器，暂时还不敢尝试使用 flex 布局。</p><h3 id="概念：弹性盒子、子元素"><a href="#概念：弹性盒子、子元素" class="headerlink" title="概念：弹性盒子、子元素"></a>概念：弹性盒子、子元素</h3><p>在讲 flex 的知识点之前，我们事先约定两个概念：</p><ul><li><p><strong>弹性盒子</strong>：指的是使用 <code>display:flex</code> 或 <code>display:inline-flex</code> 声明的<strong>父容器</strong>。</p></li><li><p><strong>子元素/弹性元素</strong>：指的是父容器里面的子元素们（父容器被声明为 flex 盒子的情况下）。</p></li></ul><h3 id="概念：主轴和侧轴"><a href="#概念：主轴和侧轴" class="headerlink" title="概念：主轴和侧轴"></a>概念：主轴和侧轴</h3><p>在上面的“初体验”例子中，我们发现，弹性盒子里面的子元素们，默认是从左至右排列的，这个方向，代表的就是主轴的方向。</p><p>在此，我们引入主轴和侧轴的概念。</p><p><img src="http://img.smyhvae.com/20191009_1701.png"></p><p>如上图所示：</p><ul><li><p>主轴：flex容器的主轴，默认是水平方向，从左向右。</p></li><li><p>侧轴：与主轴垂直的轴称作侧轴，默认是垂直方向，从上往下。</p></li></ul><p>PS：主轴和侧轴并不是固定不变的，可以通过 <code>flex-direction</code> 更换方向，我们在后面会讲到。</p><h2 id="弹性盒子"><a href="#弹性盒子" class="headerlink" title="弹性盒子"></a>弹性盒子</h2><h3 id="声明定义"><a href="#声明定义" class="headerlink" title="声明定义"></a>声明定义</h3><p>使用 <code>display:flex</code> 或 <code>display:inline-flex</code> 声明一个<strong>父容器</strong>为弹性盒子。此时，这个父容器里的子元素们，会遵循弹性布局。</p><p>备注：一般是用 <code>display:flex</code>这个属性。<code>display:inline-flex</code>用得较少。</p><h3 id="flex-direction-属性"><a href="#flex-direction-属性" class="headerlink" title="flex-direction 属性"></a>flex-direction 属性</h3><p><code>flex-direction</code>：用于设置盒子中<strong>子元素</strong>的排列方向。属性值可以是：</p><table><thead><tr><th align="left">属性值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">row</td><td align="left">从左到右水平排列子元素（默认值）</td></tr><tr><td align="left">column</td><td align="left">从上到下垂直排列子元素</td></tr><tr><td align="left">row-reverse</td><td align="left">从右向左排列子元素</td></tr><tr><td align="left">column-reverse</td><td align="left">从下到上垂直排列子元素</td></tr></tbody></table><p>备注：如果我们不给父容器写<code>flex-direction</code>这个属性，那么，子元素默认就是从左到右排列的。</p><p>代码演示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        *&#123;</span><br><span class="line">            margin: 0;</span><br><span class="line">            padding: 0;</span><br><span class="line">            list-style: none;</span><br><span class="line">        &#125;</span><br><span class="line">       body&#123;</span><br><span class="line"><span class="css">           <span class="selector-tag">background-color</span>: <span class="selector-id">#eee</span>;</span></span><br><span class="line">           font-family: &quot;Microsoft Yahei&quot;;</span><br><span class="line"><span class="css">           <span class="selector-tag">font-size</span><span class="selector-pseudo">:22px</span>;</span></span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">        h3&#123;</span><br><span class="line">            font-weight: normal;</span><br><span class="line">        &#125;</span><br><span class="line">        section&#123;</span><br><span class="line">            width: 1000px;</span><br><span class="line"></span><br><span class="line"><span class="css">            <span class="selector-tag">margin</span><span class="selector-pseudo">:40px</span> <span class="selector-tag">auto</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ul&#123;</span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ul li&#123;</span><br><span class="line">            width: 200px;</span><br><span class="line">            height: 200px;</span><br><span class="line">            background-color: pink;</span><br><span class="line"><span class="css">            <span class="selector-tag">margin</span><span class="selector-pseudo">:10px</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-tag">section</span><span class="selector-pseudo">:nth-child(1)</span> <span class="selector-tag">ul</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">overflow</span>: <span class="selector-tag">hidden</span>; <span class="comment">/* 清除浮动 */</span></span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-tag">section</span><span class="selector-pseudo">:nth-child(1)</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span>&#123;</span></span><br><span class="line">            float: left;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="comment">/* 设置伸缩盒子*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">section</span><span class="selector-pseudo">:nth-child(2)</span> <span class="selector-tag">ul</span>&#123;</span></span><br><span class="line">            display: flex;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-tag">section</span><span class="selector-pseudo">:nth-child(3)</span> <span class="selector-tag">ul</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="comment">/* 设置伸缩布局*/</span></span></span><br><span class="line">            display: flex;</span><br><span class="line"><span class="css">            <span class="comment">/* 设置主轴方向*/</span></span></span><br><span class="line">            flex-direction: row;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-tag">section</span><span class="selector-pseudo">:nth-child(4)</span> <span class="selector-tag">ul</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="comment">/* 设置伸缩布局*/</span></span></span><br><span class="line">            display: flex;</span><br><span class="line"><span class="css">            <span class="comment">/* 设置主轴方向 :水平翻转*/</span></span></span><br><span class="line">            flex-direction: row-reverse;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-tag">section</span><span class="selector-pseudo">:nth-child(5)</span> <span class="selector-tag">ul</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="comment">/* 设置伸缩布局*/</span></span></span><br><span class="line">            display: flex;</span><br><span class="line"><span class="css">            <span class="comment">/* 设置主轴方向 :垂直*/</span></span></span><br><span class="line">            flex-direction: column;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-tag">section</span><span class="selector-pseudo">:nth-child(6)</span> <span class="selector-tag">ul</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="comment">/* 设置伸缩布局*/</span></span></span><br><span class="line">            display: flex;</span><br><span class="line"><span class="css">            <span class="comment">/* 设置主轴方向 :垂直*/</span></span></span><br><span class="line">            flex-direction: column-reverse;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>传统布局<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>伸缩布局 display:flex<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>主轴方向 flex-direction:row<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>主轴方向 flex-direction:row-reverse<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>主轴方向 flex-direction:column<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>主轴方向 flex-direction:column-reverse<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="flex-wrap-属性"><a href="#flex-wrap-属性" class="headerlink" title="flex-wrap 属性"></a>flex-wrap 属性</h3><p><code>flex-wrap</code>：控制子元素溢出时的换行处理。</p><h3 id="justify-content-属性"><a href="#justify-content-属性" class="headerlink" title="justify-content 属性"></a>justify-content 属性</h3><p><code>justify-content</code>：控制子元素在主轴上的排列方式。</p><h2 id="弹性元素"><a href="#弹性元素" class="headerlink" title="弹性元素"></a>弹性元素</h2><h3 id="justify-content-属性-1"><a href="#justify-content-属性-1" class="headerlink" title="justify-content 属性"></a>justify-content 属性</h3><ul><li><code>justify-content: flex-start;</code> 设置子元素在<strong>主轴上的对齐方式</strong>。属性值可以是：<ul><li><code>flex-start</code> 从主轴的起点对齐（默认值）</li><li><code>flex-end</code> 从主轴的终点对齐</li><li><code>center</code> 居中对齐</li><li><code>space-around</code> 在父盒子里平分</li><li><code>space-between</code> 两端对齐 平分</li></ul></li></ul><p>代码演示：（在浏览器中打开看效果）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        *&#123;</span><br><span class="line">            margin: 0;</span><br><span class="line">            padding: 0;</span><br><span class="line"><span class="css">            <span class="selector-tag">list-style</span><span class="selector-pseudo">:none</span>;&#125;</span></span><br><span class="line">        body&#123;</span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#eee</span>;</span></span><br><span class="line">            font-family: &quot;Microsoft Yahei&quot;;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        section&#123;</span><br><span class="line">            width: 1000px;</span><br><span class="line"><span class="css">            <span class="selector-tag">margin</span><span class="selector-pseudo">:50px</span> <span class="selector-tag">auto</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">        section h3&#123;</span><br><span class="line"><span class="css">            <span class="selector-tag">font-size</span><span class="selector-pseudo">:22px</span>;</span></span><br><span class="line">            font-weight: normal;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ul&#123;</span><br><span class="line"><span class="css">            <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#999</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line">            display: flex;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ul li&#123;</span><br><span class="line">            width: 200px;</span><br><span class="line">            height: 200px;</span><br><span class="line">            background: pink;</span><br><span class="line"><span class="css">            <span class="selector-tag">margin</span><span class="selector-pseudo">:10px</span>;</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-tag">section</span><span class="selector-pseudo">:nth-child(1)</span> <span class="selector-tag">ul</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="comment">/* 主轴对齐方式：从主轴开始的方向对齐*/</span></span></span><br><span class="line">            justify-content: flex-start;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-tag">section</span><span class="selector-pseudo">:nth-child(2)</span> <span class="selector-tag">ul</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="comment">/* 主轴对齐方式：从主轴结束的方向对齐*/</span></span></span><br><span class="line">            justify-content: flex-end;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-tag">section</span><span class="selector-pseudo">:nth-child(3)</span> <span class="selector-tag">ul</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="comment">/* 主轴对齐方式：居中对齐*/</span></span></span><br><span class="line">            justify-content: center;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-tag">section</span><span class="selector-pseudo">:nth-child(4)</span> <span class="selector-tag">ul</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="comment">/* 主轴对齐方式：在父盒子中平分*/</span></span></span><br><span class="line">            justify-content: space-around;</span><br><span class="line"></span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-tag">section</span><span class="selector-pseudo">:nth-child(5)</span> <span class="selector-tag">ul</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="comment">/* 主轴对齐方式：两端对齐 平分*/</span></span></span><br><span class="line">            justify-content: space-between;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>主轴的对齐方式：justify-content:flex-start<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>主轴的对齐方式：justify-content:flex-end<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>主轴的对齐方式：justify-content:center<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>主轴的对齐方式：justify-content:space-round<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>主轴的对齐方式：justify-content:space-bettwen<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="align-items-属性"><a href="#align-items-属性" class="headerlink" title="align-items 属性"></a>align-items 属性</h3><p><code>align-items</code>：设置子元素在<strong>侧轴上的对齐方式</strong>。属性值可以是：<br>    - <code>flex-start</code> 从侧轴开始的方向对齐<br>    - <code>flex-end</code> 从侧轴结束的方向对齐<br>    - <code>baseline</code> 基线 默认同flex-start<br>    - <code>center</code> 中间对齐<br>    - <code>stretch</code> 拉伸</p><p>代码演示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        *&#123;</span><br><span class="line">            margin: 0;</span><br><span class="line">            padding: 0;</span><br><span class="line"><span class="css">            <span class="selector-tag">list-style</span><span class="selector-pseudo">:none</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">        body&#123;</span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#eee</span>;</span></span><br><span class="line">            font-family: &quot;Microsoft Yahei&quot;;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        section&#123;</span><br><span class="line">            width: 1000px;</span><br><span class="line"><span class="css">            <span class="selector-tag">margin</span><span class="selector-pseudo">:50px</span> <span class="selector-tag">auto</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">        section h3&#123;</span><br><span class="line"><span class="css">            <span class="selector-tag">font-size</span><span class="selector-pseudo">:22px</span>;</span></span><br><span class="line">            font-weight: normal;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ul&#123;</span><br><span class="line"><span class="css">            <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#999</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line">            display: flex;</span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:500px</span>;</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ul li&#123;</span><br><span class="line">            width: 200px;</span><br><span class="line">            height: 200px;</span><br><span class="line">            background: pink;</span><br><span class="line"><span class="css">            <span class="selector-tag">margin</span><span class="selector-pseudo">:10px</span>;</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-tag">section</span><span class="selector-pseudo">:nth-child(1)</span> <span class="selector-tag">ul</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="comment">/* 侧轴对齐方式 ：从侧轴开始的方向对齐*/</span></span></span><br><span class="line"><span class="css">            <span class="selector-tag">align-items</span><span class="selector-pseudo">:flex-start</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-tag">section</span><span class="selector-pseudo">:nth-child(2)</span> <span class="selector-tag">ul</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="comment">/* 侧轴对齐方式 ：从侧轴结束的方向对齐*/</span></span></span><br><span class="line"><span class="css">            <span class="selector-tag">align-items</span><span class="selector-pseudo">:flex-end</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-tag">section</span><span class="selector-pseudo">:nth-child(3)</span> <span class="selector-tag">ul</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="comment">/* 侧轴对齐方式 ：居中*/</span></span></span><br><span class="line"><span class="css">            <span class="selector-tag">align-items</span><span class="selector-pseudo">:center</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-tag">section</span><span class="selector-pseudo">:nth-child(4)</span> <span class="selector-tag">ul</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="comment">/* 侧轴对齐方式 ：基线 默认同flex-start*/</span></span></span><br><span class="line"><span class="css">            <span class="selector-tag">align-items</span><span class="selector-pseudo">:baseline</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-tag">section</span><span class="selector-pseudo">:nth-child(5)</span> <span class="selector-tag">ul</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="comment">/* 侧轴对齐方式 ：拉伸*/</span></span></span><br><span class="line"><span class="css">            <span class="selector-tag">align-items</span><span class="selector-pseudo">:stretch</span>;</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-tag">section</span><span class="selector-pseudo">:nth-child(5)</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:auto</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>侧轴的对齐方式:align-items ：flex-start<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>侧轴的对齐方式：align-items:flex-end<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>侧轴的对齐方式：align-items:center<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>侧轴的对齐方式：align-itmes:baseline<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>侧轴的对齐方式：align-itmes: stretch<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="flex属性：设置子盒子的权重"><a href="#flex属性：设置子盒子的权重" class="headerlink" title="flex属性：设置子盒子的权重"></a><code>flex</code>属性：设置子盒子的权重</h3><p>代码演示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        *&#123;</span><br><span class="line">            margin: 0;</span><br><span class="line">            padding: 0;</span><br><span class="line"><span class="css">            <span class="selector-tag">list-style</span><span class="selector-pseudo">:none</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">        body&#123;</span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#eee</span>;</span></span><br><span class="line">            font-family: &quot;Microsoft Yahei&quot;;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        section&#123;</span><br><span class="line">            width: 1000px;</span><br><span class="line"><span class="css">            <span class="selector-tag">margin</span><span class="selector-pseudo">:50px</span> <span class="selector-tag">auto</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">        section h3&#123;</span><br><span class="line"><span class="css">            <span class="selector-tag">font-size</span><span class="selector-pseudo">:22px</span>;</span></span><br><span class="line">            font-weight: normal;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ul&#123;</span><br><span class="line"><span class="css">            <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#999</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line">            display: flex;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ul li&#123;</span><br><span class="line">            width: 200px;</span><br><span class="line">            height: 200px;</span><br><span class="line">            background: pink;</span><br><span class="line"><span class="css">            <span class="selector-tag">margin</span><span class="selector-pseudo">:10px</span>;</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-tag">section</span><span class="selector-pseudo">:nth-child(1)</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child(1)</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">flex</span><span class="selector-pseudo">:1</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-tag">section</span><span class="selector-pseudo">:nth-child(1)</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child(2)</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">flex</span><span class="selector-pseudo">:1</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-tag">section</span><span class="selector-pseudo">:nth-child(1)</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child(3)</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">flex</span><span class="selector-pseudo">:8</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-tag">section</span><span class="selector-pseudo">:nth-child(2)</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child(1)</span>&#123;</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-tag">section</span><span class="selector-pseudo">:nth-child(2)</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child(2)</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">flex</span><span class="selector-pseudo">:1</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-tag">section</span><span class="selector-pseudo">:nth-child(2)</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child(3)</span>&#123;</span></span><br><span class="line"><span class="css">           <span class="selector-tag">flex</span><span class="selector-pseudo">:4</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>伸缩比例:flex<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>伸缩比例:flex<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><h3 id="CSS-Flexbox-可视化手册"><a href="#CSS-Flexbox-可视化手册" class="headerlink" title="CSS Flexbox 可视化手册"></a>CSS Flexbox 可视化手册</h3><p>可视化的截图如下：（请点开链接，查看大图）</p><p><a href="http://img.smyhvae.com/20190821_2101.png">http://img.smyhvae.com/20190821_2101.png</a></p><p>相关文章：</p><ul><li><p>【英文原版】 CSS Flexbox Fundamentals Visual Guide：<a href="https://medium.com/swlh/css-flexbox-fundamentals-visual-guide-1c467f480dac">https://medium.com/swlh/css-flexbox-fundamentals-visual-guide-1c467f480dac</a></p></li><li><p>【中文翻译】CSS Flexbox 可视化手册：<a href="https://zhuanlan.zhihu.com/p/56046851">https://zhuanlan.zhihu.com/p/56046851</a></p></li></ul><h3 id="flex-相关的推荐文章"><a href="#flex-相关的推荐文章" class="headerlink" title="flex 相关的推荐文章"></a>flex 相关的推荐文章</h3><ul><li><p>flex 效果在线演示：<a href="https://demos.scotch.io/visual-guide-to-css3-flexbox-flexbox-playground/demos/">https://demos.scotch.io/visual-guide-to-css3-flexbox-flexbox-playground/demos/</a></p></li><li><p>A Complete Guide to Flexbox | 英文原版：<a href="https://css-tricks.com/snippets/css/a-guide-to-flexbox/">https://css-tricks.com/snippets/css/a-guide-to-flexbox/</a></p></li><li><p>CSS3 Flexbox 布局完全指南 | 中文翻译：<a href="https://www.html.cn/archives/8629">https://www.html.cn/archives/8629</a></p></li></ul><h3 id="flex-相关的教程"><a href="#flex-相关的教程" class="headerlink" title="flex 相关的教程"></a>flex 相关的教程</h3><ul><li><a href="http://houdunren.gitee.io/note/css/10%20%E5%BC%B9%E6%80%A7%E5%B8%83%E5%B1%80.html">后盾人 flex 教程</a></li></ul><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      
        <tags>
            
            <tag> flex </tag>
            
            <tag> CSS3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于websocket</title>
      <link href="/%5Bobject%20Object%5D/2021/02/21/WEBsocket%E7%9A%84%E5%BC%95%E5%85%A5/"/>
      <url>/%5Bobject%20Object%5D/2021/02/21/WEBsocket%E7%9A%84%E5%BC%95%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="WebSocket的引入"><a href="#WebSocket的引入" class="headerlink" title="WebSocket的引入"></a>WebSocket的引入</h2><h3 id="背景分析"><a href="#背景分析" class="headerlink" title="背景分析"></a>背景分析</h3><p>HTTP协议是无状态的，服务器只会响应来自客户端的请求，但是它与客户端之间不具备持续连接。</p><p>当用户在浏览器上进行操作时，可以请求服务器上的api；但是反过来却不可能：服务器端发生了一个事件，无法将这个事件的信息<strong>实时主动</strong>地通知客户端。只有在客户端查询服务器当前状态时，所发生事件的信息才会从服务器传递到客户端。</p><p>那怎么去实时地知道服务器的状态呢？方法有两个：</p><p>（1）<strong>轮询</strong>：客户端每隔很短的时间，都会对服务器发出请求，查看是否有新的消息，只要轮询速度足够快，例如1秒，就能给人造成交互是实时进行的印象。这种做法是无奈之举，实际上对服务器、客户端双方都造成了大量的性能浪费。</p><p>（2）<strong>长连接</strong>：客户端只请求一次，但是服务器会将连接保持，不会返回结果。当服务器有了新数据时，实时地发给客户端，而一直保持挂起状态。这种做法的也造成了大量的性能浪费。</p><p><img src="https://www.runoob.com/wp-content/uploads/2016/03/ws.png"></p><h3 id="WebSocket-协议"><a href="#WebSocket-协议" class="headerlink" title="WebSocket 协议"></a>WebSocket 协议</h3><p>最新的 HTML5协议，制定了 WebSocket 协议标准，允许客户端和服务器端以<strong>全双工</strong>的方式进行通信。</p><p>WebSocket 的原理非常简单：利用HTTP请求产生握手，HTTP头部含有 WebSocket 协议的请求，*<em>握手之后，二者转用TCP协议进行交流</em>（QQ的协议）。</p><p>WebSocket协议需要浏览器和服务器都支持才可以使用：</p><ul><li><p>支持WebSocket协议的浏览器有：Chrome 4、火狐4、IE10、Safari5</p></li><li><p>支持WebSocket协议的服务器有：Node 0、Apach7.0.2、Nginx1.3</p></li></ul><h3 id="http-长连接和-websocket-的长连接区别"><a href="#http-长连接和-websocket-的长连接区别" class="headerlink" title="http 长连接和 websocket 的长连接区别"></a>http 长连接和 websocket 的长连接区别</h3><p>HTTP1.1通过使用Connection:keep-alive进行长连接，HTTP 1.1默认进行持久连接。在一次 TCP 连接中可以完成多个 HTTP 请求，但是对每个请求仍然要单独发 header，Keep-Alive不会永久保持连接，它有一个保持时间，可以在不同的服务器软件（如Apache）中设定这个时间。</p><p>websocket是一个真正的全双工。长连接第一次tcp链路建立之后，后续数据可以双方都进行发送，<strong>不需要发送请求头</strong>。</p><p>keep-alive双方并没有建立正真的连接会话，服务端可以在任何一次请求完成后关闭。WebSocket 它本身就规定了是正真的、双工的长连接，两边都必须要维持住连接的状态。</p><h3 id="Socket-IO-的引入"><a href="#Socket-IO-的引入" class="headerlink" title="Socket.IO 的引入"></a>Socket.IO 的引入</h3><p>Node.js上需要写一些程序，来处理TCP请求。</p><p>Node.js从诞生之日起，就支持 WebSocket 协议。不过，从底层一步一步搭建一个Socket服务器很费劲（想象一下Node写一个静态文件服务都那么费劲）。所以，有大神帮我们写了一个库 Socket.IO。</p><p>Socket.IO 是业界良心，新手福音。它屏蔽了所有底层细节，让顶层调用非常简单。并且还为不支持 WebSocket 协议的浏览器，提供了长轮询的透明模拟机制。</p><p>Node的单线程、非阻塞I/O、事件驱动机制，使它非常适合Socket服务器。</p><h3 id="Socket-IO-的安装"><a href="#Socket-IO-的安装" class="headerlink" title="Socket.IO 的安装"></a>Socket.IO 的安装</h3><p>Socket.IO 的官网是：<a href="http://socket.io/">http://socket.io/</a></p><p>安装方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install socket.io</span><br></pre></td></tr></table></figure><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      
        <tags>
            
            <tag> HTML5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于css中一些常用，但又容易忘记的代码</title>
      <link href="/%5Bobject%20Object%5D/2021/02/14/css%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%EF%BC%8C%E4%BD%86%E5%8F%88%E5%AE%B9%E6%98%93%E5%BF%98%E8%AE%B0%E7%9A%84%E4%BB%A3%E7%A0%81/"/>
      <url>/%5Bobject%20Object%5D/2021/02/14/css%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%EF%BC%8C%E4%BD%86%E5%8F%88%E5%AE%B9%E6%98%93%E5%BF%98%E8%AE%B0%E7%9A%84%E4%BB%A3%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="一些常用的head标签内部"><a href="#一些常用的head标签内部" class="headerlink" title="一些常用的head标签内部"></a>一些常用的head标签内部</h4><h4 id="meta标签常用"><a href="#meta标签常用" class="headerlink" title=".meta标签常用"></a>.meta标签常用</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>这是一段移动端必备的一段代码。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;Description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;HTML是最好的语言&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>长尾关键词， 这是做SEO必需的一段代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;Keywords&quot;</span> <span class="attr">content</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>关键词， 这也是做SEO必需的一段代码， 不过近期百度收录的改动， 渐渐的这段代码已经失去了他原本的意义， 但是也是非常有用的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Meta name&#x3D;&quot;Robots&quot; Content&#x3D;&quot;All|None|Index|Noindex|Follow|Nofollow&quot;&gt;</span><br></pre></td></tr></table></figure><p>Robots用来告诉搜索机器人哪些页面需要索引，哪些页面不需要索引。Content的参数有all、none、index、noindex、follow、nofollow。默认是all。<br>all：文件将被检索，且页面上的链接可以被查询；<br>none：文件将不被检索，且页面上的链接不可以被查询；(和 “noindex, no follow” 起相同作用)<br>index：文件将被检索；（让robot/spider登录）<br>follow：页面上的链接可以被查询；转自环 球 网校edu24ol.com转自环 球 网校edu24ol.com转自环 球 网校edu24ol.com<br>noindex：文件将不被检索，但页面上的链接可以被查询；(不让robot/spider登录)<br>nofollow：文件将不被检索，页面上的链接可以被查询。(不让robot/spider顺着此页的连接往下探找)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name&#x3D;&quot;format-detection&quot; content&#x3D;&quot;telephone&#x3D;no&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure><p>ios版阻止默认数字识别为手机 可将telephone=no，则手机号码不被显示为拨号链接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name&#x3D;&quot;apple-mobile-web-app-status-bar-style&quot; content&#x3D;&quot;black&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure><p>在web app应用下状态条（屏幕顶部条）的颜色；默认值为default（白色），可以定为black（黑色）和black-translucent（灰色半透明）。<br>若值为“black-translucent”将会占据页面px位置，浮在页面上方（会覆盖页面20px高度–iphone4和itouch4的Retina屏幕为40px）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta content&#x3D;&quot;email&#x3D;no&quot; name&#x3D;&quot;format-detection&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure><p>修改默认IOS 把@识别成邮箱。</p><blockquote><p>以上一些就是目前一些常用的Meta 类似一些utf-8 这些编码规范的代码。 在此就不做多说了， 每一个做前端工作的人员，学习的第一步， UTF-8</p></blockquote><hr><h4 id="一些容易忘记的css样式"><a href="#一些容易忘记的css样式" class="headerlink" title="一些容易忘记的css样式"></a>一些容易忘记的css样式</h4><ul><li><p>格式化css默认样式</p><ul><li>腾讯QQ官网 样式初始化</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">body,ol,ul,h1,h2,h3,h4,h5,h6,p,th,td,dl,dd,form,fieldset,legend,input,textarea,select&#123;margin:0;padding:0&#125; </span><br><span class="line">      body&#123;font:12px&quot;宋体&quot;,&quot;Arial Narrow&quot;,HELVETICA;background:#fff;-webkit-text-size-adjust:100%;&#125; </span><br><span class="line">      a&#123;color:#2d374b;text-decoration:none&#125; </span><br><span class="line">      a:hover&#123;color:#cd0200;text-decoration:underline&#125; </span><br><span class="line">      em&#123;font-style:normal&#125; </span><br><span class="line">      li&#123;list-style:none&#125; </span><br><span class="line">      img&#123;border:0;vertical-align:middle&#125; </span><br><span class="line">      table&#123;border-collapse:collapse;border-spacing:0&#125; </span><br><span class="line">      p&#123;word-wrap:break-word&#125; </span><br></pre></td></tr></table></figure><ul><li>新浪官网 样式初始化</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">body,ul,ol,li,p,h1,h2,h3,h4,h5,h6,form,fieldset,table,td,img,div&#123;margin:0;padding:0;border:0;&#125; </span><br><span class="line">body&#123;background:#fff;color:#333;font-size:12px; margin-top:5px;font-family:&quot;SimSun&quot;,&quot;宋体&quot;,&quot;Arial Narrow&quot;;&#125;  </span><br><span class="line">ul,ol&#123;list-style-type:none;&#125; </span><br><span class="line">select,input,img,select&#123;vertical-align:middle;&#125;  </span><br><span class="line">a&#123;text-decoration:none;&#125; </span><br><span class="line">a:link&#123;color:#009;&#125; </span><br><span class="line">a:visited&#123;color:#800080;&#125; </span><br><span class="line">a:hover,a:active,a:focus&#123;color:#c00;text-decoration:underline;&#125; </span><br></pre></td></tr></table></figure><ul><li>淘宝官网 样式初始化</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">body, h1, h2, h3, h4, h5, h6, hr, p, blockquote, dl, dt, dd, ul, ol, li, pre, form, fieldset, legend, button, input, textarea, th, td &#123; margin:0; padding:0; &#125; </span><br><span class="line">body, button, input, select, textarea &#123; font:12px&#x2F;1.5tahoma, arial, \5b8b\4f53; &#125;</span><br><span class="line">h1, h2, h3, h4, h5, h6&#123; font-size:100%; &#125;</span><br><span class="line">address, cite, dfn, em, var &#123; font-style:normal; &#125;</span><br><span class="line">code, kbd, pre, samp &#123; font-family:couriernew, courier, monospace; &#125;</span><br><span class="line">small&#123; font-size:12px; &#125;</span><br><span class="line">ul, ol &#123; list-style:none; &#125;</span><br><span class="line">a &#123; text-decoration:none; &#125;</span><br><span class="line">a:hover &#123; text-decoration:underline; &#125;</span><br><span class="line">sup &#123; vertical-align:text-top; &#125;</span><br><span class="line">sub&#123; vertical-align:text-bottom; &#125;</span><br><span class="line">legend &#123; color:#000; &#125;</span><br><span class="line">fieldset, img &#123; border:0; &#125;</span><br><span class="line">button, input, select, textarea &#123; font-size:100%; &#125;</span><br><span class="line">table &#123; border-collapse:collapse; border-spacing:0; &#125;</span><br></pre></td></tr></table></figure><ul><li>网易官网 样式初始化</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">html &#123;overflow-y:scroll;&#125;</span><br><span class="line">body &#123;margin:0; padding:29px00; font:12px&quot;\5B8B\4F53&quot;,sans-serif;background:#ffffff;&#125;</span><br><span class="line">div,dl,dt,dd,ul,ol,li,h1,h2,h3,h4,h5,h6,pre,form,fieldset,input,textarea,blockquote,p&#123;padding:0; margin:0;&#125;</span><br><span class="line">table,td,tr,th&#123;font-size:12px;&#125;</span><br><span class="line">li&#123;list-style-type:none;&#125;</span><br><span class="line">img&#123;vertical-align:top;border:0;&#125;</span><br><span class="line">ol,ul &#123;list-style:none;&#125;</span><br><span class="line">h1,h2,h3,h4,h5,h6&#123;font-size:12px; font-weight:normal;&#125;</span><br><span class="line">address,cite,code,em,th &#123;font-weight:normal; font-style:normal;&#125;</span><br></pre></td></tr></table></figure><blockquote><p>个人建议，集合他们所长， 和你项目的需求来修改自己的初始化代码。毕竟需求不同样式不同</p></blockquote></li><li><p>关于input 去除焦点，边框 outline: none;</p></li><li><p>li标签去除默认样式 list-style-type:none;</p></li><li><p>背景图片固定 background-attachment：fixed （网页滚动时，背景图片相对于浏览器的窗口而言，固定不动）</p></li><li><p>background-attachment: scroll （网页滚动时，背景图片相对于浏览器的窗口而言，一起滚动）</p></li><li><p>text-indent：缩进距离</p></li><li><p>cursor：鼠标形状参数</p><ul><li>style=”cursor:hand” 　　　　　手形</li><li>style=”cursor:crosshair” 　　十字形</li><li>style=”cursor:text” 　　　　　文本形</li><li>style=”cursor:wait” 　　　　　沙漏形</li><li>style=”cursor:move” 　　　　十字箭头形：<ul><li>style=”cursor:help” 　　　　　问号形</li></ul></li><li>style=”cursor:e-resize” 　　　右箭头形</li><li>style=”cursor:n-resize” 　　　上箭头形</li><li>style=”cursor:nw-resize” 　　左上箭头形</li><li>style=”cursor:w-resize” 　　　左箭头形</li><li>style=”cursor:s-resize” 　　　下箭头形</li><li>style=”cursor:se-resize” 　　右下箭头形</li><li>style=”cursor:sw-resize” 　　左下箭头形</li><li>还有一些不是特别常用的句不列举了，</li></ul></li><li><p>letter-spacing 来设置字与字间距_字符间距离，字体间距css样式（汉字用）</p></li><li><p>word-spacing来设置字体间距 ，字体间距css样式（英文用）</p></li><li><p>清除浮动</p><ul><li>在浮动的元素最后添加同级元素这是 clear：both属性</li><li>给父元素这是宽高</li><li>给父元素设置 overflow:hidden</li><li>最常用的三种方法。（记得一定要清除浮动，不然你的页面就会出BUG）</li></ul></li></ul><hr><p>转载于:<a href="https://www.cnblogs.com/zzkbwl/p/6816565.html">https://www.cnblogs.com/zzkbwl/p/6816565.html</a></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TCP三次握手四次挥手详解</title>
      <link href="/%5Bobject%20Object%5D/2021/02/12/TCP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B%E8%AF%A6%E8%A7%A3/"/>
      <url>/%5Bobject%20Object%5D/2021/02/12/TCP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="TCP三次握手四次挥手详解"><a href="#TCP三次握手四次挥手详解" class="headerlink" title="TCP三次握手四次挥手详解"></a>TCP三次握手四次挥手详解</h2><p><a href="https://www.cnblogs.com/zmlctt/p/3690998.html">原文章地址</a></p><p>相对于SOCKET开发者,TCP创建过程和链接折除过程是由TCP/IP协议栈自动创建的.因此开发者并不需要控制这个过程.但是对于理解TCP底层运作机制,相当有帮助.</p><p>而且对于有网络协议工程师之类笔试,几乎是必考的内容.企业对这个问题热情之高,出乎我的意料：-）。有时上午面试前强调这个问题，并重复讲一次，下午几乎每一个人都被问到这个问题。</p><p>因此在这里详细解释一下这两个过程。</p><h4 id="TCP三次握手"><a href="#TCP三次握手" class="headerlink" title="TCP三次握手"></a><strong>TCP三次握手</strong></h4><p>所谓三次握手(Three-way Handshake)，是指建立一个TCP连接时，需要客户端和服务器总共发送3个包。</p><p>三次握手的目的是连接服务器指定端口，建立TCP连接,并同步连接双方的序列号和确认号并交换 TCP 窗口大小信息.在socket编程中，客户端执行connect()时。将触发三次握手。</p><p>第一次握手:<br>客户端发送一个TCP的SYN标志位置1的包指明客户打算连接的服务器的端口，以及初始序号X,保存在包头的序列号(Sequence Number)字段里。</p><p>第二次握手:<br>服务器发回确认包(ACK)应答。即SYN标志位和ACK标志位均为1同时，将确认序号(Acknowledgement Number)设置为客户的I S N加1以.即X+1。</p><p>第三次握手.<br>客户端再次发送确认包(ACK) SYN标志位为0,ACK标志位为1.并且把服务器发来ACK的序号字段+1,放在确定字段中发送给对方.并且在数据段放写ISN的+1</p><p><strong>SYN攻击</strong><br>在三次握手过程中，服务器发送SYN-ACK之后，收到客户端的ACK之前的TCP连接称为半连接(half-open connect).此时服务器处于Syn_RECV状态.当收到ACK后，服务器转入ESTABLISHED状态.<br>Syn攻击就是 攻击客户端 在短时间内伪造大量不存在的IP地址，向服务器不断地发送syn包，服务器回复确认包，并等待客户的确认，由于源地址是不存在的，服务器需要不断的重发直 至超时，这些伪造的SYN包将长时间占用未连接队列，正常的SYN请求被丢弃，目标系统运行缓慢，严重者引起网络堵塞甚至系统瘫痪。<br>Syn攻击是一个典型的<a href="https://www.centos.bz/tag/ddos/">DDOS</a>攻击。检测SYN攻击非常的方便，当你在服务器上看到大量的半连接状态时，特别是源IP地址是随机的，基本上可以断定这是一次SYN攻击.在<a href="http://www.centos.bz/">Linux</a>下可以如下命令检测是否被Syn攻击<br>netstat -n -p TCP | grep SYN_RECV<br>一般较新的TCP/IP协议栈都对这一过程进行修正来防范Syn攻击，修改tcp协议实现。主要方法有SynAttackProtect保护机制、SYN cookies技术、增加最大半连接和缩短超时时间等.<br>但是不能完全防范syn攻击。<br><strong>TCP 四次挥手</strong><br>TCP的连接的拆除需要发送四个包，因此称为四次挥手(four-way handshake)。客户端或服务器均可主动发起挥手动作，在socket编程中，任何一方执行close()操作即可产生挥手操作。</p><p>参见wireshark抓包，实测的抓包结果并没有严格按挥手时序。我估计是时间间隔太短造成。<br>注意上面的字段标号地段和发送接收的内容序号，可能有个有错，记不住哪个了，后头要细看看</p><h4 id="第二部分：补充tcp连接过程"><a href="#第二部分：补充tcp连接过程" class="headerlink" title="第二部分：补充tcp连接过程"></a>第二部分：补充tcp连接过程</h4><p>在TCP/IP协议中，TCP协议提供可靠的连接服务，采用三次握手建立一个连接，如图1所示。</p><p> (1) 第一次握手：建立连接时，客户端A发送SYN包(SYN=j)到服务器B，并进入SYN_SEND状态，等待服务器B确认。</p><p> (2) 第二次握手：服务器B收到SYN包，必须确认客户A的SYN(ACK=j+1)，同时自己也发送一个SYN包(SYN=k)，即SYN+ACK包，此时服务器B进入SYN_RECV状态。</p><p> (3) 第三次握手：客户端A收到服务器B的SYN＋ACK包，向服务器B发送确认包ACK(ACK=k+1)，此包发送完毕，客户端A和服务器B进入ESTABLISHED状态，完成三次握手。</p><p>完成三次握手，客户端与服务器开始传送数据。</p><p>​               图1 TCP三次握手建立连接</p><p>由于TCP连接是全双工的，因此每个方向都必须单独进行关闭。这个原则是当一方完成它的数据发送任务后就能发送一个FIN来终止这个方向的连接。收到一个 FIN只意味着这一方向上没有数据流动，一个TCP连接在收到一个FIN后仍能发送数据。首先进行关闭的一方将执行主动关闭，而另一方执行被动关闭。</p><p>（1）客户端A发送一个FIN，用来关闭客户A到服务器B的数据传送(报文段4)。</p><p>（2）服务器B收到这个FIN，它发回一个ACK，确认序号为收到的序号加1(报文段5)。和SYN一样，一个FIN将占用一个序号。</p><p>（3）服务器B关闭与客户端A的连接，发送一个FIN给客户端A(报文段6)。</p><p>（4）客户端A发回ACK报文确认，并将确认序号设置为收到序号加1(报文段7)。</p><p>TCP采用四次挥手关闭连接如图2所示。</p><p>​                图2  TCP四次挥手关闭连接</p><p><strong>1．为什么建立连接协议是三次握手，而关闭连接却是四次握手呢？</strong></p><p>这是因为服务端的LISTEN状态下的SOCKET当收到SYN报文的连接请求后，它可以把ACK和SYN(ACK起应答作用，而SYN起同步作用)放在一个报文里来发送。但关闭连接时，当收到对方的FIN报文通知时，它仅仅表示对方没有数据发送给你了；但未必你所有的数据都全部发送给对方了，所以你可能未必会马上会关闭SOCKET,也即你可能还需要发送一些数据给对方之后，再发送FIN报文给对方来表示你同意现在可以关闭连接了，所以它这里的ACK报文和FIN报文多数情况下都是分开发送的。 </p><p><strong>2．为什么TIME_WAIT状态还需要等2MSL后才能返回到CLOSED状态？</strong></p><p><strong>这个问题可以参考《unix 网络编程》（第三版，2.7 TIME_WAIT状态）。</strong></p><p><strong>TIME_WAIT状态由两个存在的理由。</strong></p><p><strong><em>\</em>（1）可靠的实现TCP全双工链接的终止。**</strong></p><p>这是因为虽然双方都同意关闭连接了，而且握手的4个报文也都协调和发送完毕，按理可以直接回到CLOSED状态（就好比从SYN_SEND状态到ESTABLISH状态那样）；但是因为我们必须要假想网络是不可靠的，你无法保证你最后发送的ACK报文会一定被对方收到，因此对方处于LAST_ACK状态下的SOCKET可能会因为超时未收到ACK报文，而重发FIN报文，所以这个TIME_WAIT状态的作用就是用来重发可能丢失的ACK报文。</p><p> （2）允许老的重复的分节在网络中消逝。</p><p>假 设在12.106.32.254的1500端口和206.168.1.112.219的21端口之间有一个TCP连接。我们关闭这个链接，过一段时间后在 相同的IP地址和端口建立另一个连接。后一个链接成为前一个的化身。因为它们的IP地址和端口号都相同。TCP必须防止来自某一个连接的老的重复分组在连 接已经终止后再现，从而被误解成属于同一链接的某一个某一个新的化身。为做到这一点，TCP将不给处于TIME_WAIT状态的链接发起新的化身。既然 TIME_WAIT状态的持续时间是MSL的2倍，这就足以让某个方向上的分组最多存活msl秒即被丢弃，另一个方向上的应答最多存活msl秒也被丢弃。 通过实施这个规则，我们就能保证每成功建立一个TCP连接时。来自该链接先前化身的重复分组都已经在网络中消逝了。</p><p><strong>3. 为什么不能用两次握手进行连接？</strong></p><p>我们知道，3次握手完成两个重要的功能，既要双方做好发送数据的准备工作(双方都知道彼此已准备好)，也要允许双方就初始序列号进行协商，这个序列号在握手过程中被发送和确认。<br>  现在把三次握手改成仅需要两次握手，死锁是可能发生的。作为例子，考虑计算机S和C之间的通信，假定C给S发送一个连接请求分组，S收到了这个分组，并发 送了确认应答分组。按照两次握手的协定，S认为连接已经成功地建立了，可以开始发送数据分组。可是，C在S的应答分组在传输中被丢失的情况下，将不知道S 是否已准备好，不知道S建立什么样的序列号，C甚至怀疑S是否收到自己的连接请求分组。在这种情况下，C认为连接还未建立成功，将忽略S发来的任何数据分 组，只等待连接确认应答分组。而S在发出的分组超时后，重复发送同样的分组。这样就形成了死锁。 </p><p><strong>补充：</strong></p><p>a. 默认情况下(不改变socket选项)，当你调用close( or closesocket，以下说close不再重复)时，如果发送缓冲中还有数据，TCP会继续把数据发送完。</p><p>b. 发送了FIN只是表示这端不能继续发送数据(应用层不能再调用send发送)，但是还可以接收数据。</p><p>c. 应用层如何知道对端关闭？通常，在最简单的阻塞模型中，当你调用recv时，如果返回0，则表示对端关闭。在这个时候通常的做法就是也调用close，那么TCP层就发送FIN，继续完成四次握手。如果你不调用close，那么对端就会处于FIN_WAIT_2状态，而本端则会处于CLOSE_WAIT状态。这个可以写代码试试。</p><p>d. 在很多时候，TCP连接的断开都会由TCP层自动进行，例如你CTRL+C终止你的程序，TCP连接依然会正常关闭，你可以写代码试试。</p><p><strong>插曲：</strong> </p><p>  特别的TIME_WAIT状态：</p><p>  从以上TCP连接关闭的状态转换图可以看出，主动关闭的一方在发送完对对方FIN报文的确认(ACK)报文后，会进入TIME_WAIT状态。TIME_WAIT状态也称为2MSL状态。</p><p>  什么是2MSL？MSL即Maximum Segment Lifetime，也就是报文最大生存时间，引用《TCP/IP详解》中的话：“它(MSL)是任何报文段被丢弃前在网络内的最长时间。”那么，2MSL也就是这个时间的2倍。其实我觉得没必要把这个MSL的确切含义搞明白，你所需要明白的是，当TCP连接完成四个报文段的交换时，主动关闭的一方将继续等待一定时间(2-4分钟)，即使两端的应用程序结束。你可以写代码试试，然后用setstat查看下。</p><p>  为什么需要2MSL？根据《TCP/IP详解》和《The TCP/IP Guide》中的说法，有两个原因：</p><p>  其一，保证发送的ACK会成功发送到对方，如何保证？我觉得可能是通过超时计时器发送。这个就很难用代码演示了。</p><p>  其二，报文可能会被混淆，意思是说，其他时候的连接可能会被当作本次的连接。直接引用《The TCP/IP Guide》的说法：The second is to provide a “buffering period” between the end of this connection and any subsequent ones. If not for this period, it is possible that packets from different connections could be mixed, creating confusion.</p><p>  TIME_WAIT状态所带来的影响：</p><p>  当某个连接的一端处于TIME_WAIT状态时，该连接将不能再被使用。事实上，对于我们比较有现实意义的是，这个端口将不能再被使用。某个端口处于TIME_WAIT状态(其实应该是这个连接)时，这意味着这个TCP连接并没有断开(完全断开)，那么，如果你bind这个端口，就会失败。对于服务器而言，如果服务器突然crash掉了，那么它将无法再2MSL内重新启动，因为bind会失败。解决这个问题的一个方法就是设置socket的SO_REUSEADDR选项。这个选项意味着你可以重用一个地址。</p><p>  对于TIME_WAIT的插曲：</p><p>  当建立一个TCP连接时，服务器端会继续用原有端口监听，同时用这个端口与客户端通信。而客户端默认情况下会使用一个随机端口与服务器端的监听端口通信。有时候，为了服务器端的安全性，我们需要对客户端进行验证，即限定某个IP某个特定端口的客户端。客户端可以使用bind来使用特定的端口。对于服务器端，当设置了SO_REUSEADDR选项时，它可以在2MSL内启动并listen成功。但是对于客户端，当使</p><p>用bind并设置SO_REUSEADDR时，如果在2MSL内启动，虽然bind会成功，但是在windows平台上connect会失败。而在linux上则不存在这个问题。(我的实验平台：winxp, ubuntu7.10)</p><p>  要解决windows平台的这个问题，可以设置SO_LINGER选项。SO_LINGER选项决定调用close时TCP的行为。SO_LINGER涉及到linger结构体，如果设置结构体中l_onoff为非0，l_linger为0，那么调用close时TCP连接会立刻断开，TCP不会将发送缓冲中未发送的数据发送，而是立即发送一个RST报文给对方，这个时候TCP连接就不会进入TIME_WAIT状态。如你所见，这样做虽然解决了问题，但是并不安全。通过以上方式设置SO_LINGER状态，等同于设置SO_DONTLINGER状态。</p><p>  断开连接时的意外：</p><p>  这个算不上断开连接时的意外，当TCP连接发生一些物理上的意外情况时，例如网线断开，linux上的TCP实现会依然认为该连接有效，而windows则会在一定时间后返回错误信息。这似乎可以通过设置SO_KEEPALIVE选项来解决，不过不知道这个选项是否对于所有平台都有效。</p><h4 id="第三部分：常见面试题"><a href="#第三部分：常见面试题" class="headerlink" title="第三部分：常见面试题"></a><strong>第三部分：常见面试题</strong></h4><ul><li><ul><li><p>TCP协议和UDP协议的区别是什么</p></li><li><ul><li>TCP协议是有连接的，有连接的意思是开始传输实际数据之前TCP的客户端和服务器端必须通过三次握手建立连接，会话结束之后也要结束连接。而UDP是无连接的</li><li>TCP协议保证数据按序发送，按序到达，提供超时重传来保证可靠性，但是UDP不保证按序到达，甚至不保证到达，只是努力交付，即便是按序发送的序列，也不保证按序送到。</li><li>TCP协议所需资源多，TCP首部需20个字节（不算可选项），UDP首部字段只需8个字节。</li><li>TCP有流量控制和拥塞控制，UDP没有，网络拥堵不会影响发送端的发送速率</li><li>TCP是一对一的连接，而UDP则可以支持一对一，多对多，一对多的通信。</li><li>TCP面向的是字节流的服务，UDP面向的是报文的服务。</li><li><a href="http://www.cnblogs.com/newwy/archive/2013/08/02/3232503.html">TCP介绍</a>和UDP介绍</li></ul></li><li><p>请详细介绍一下TCP协议建立连接和终止连接的过程？</p></li><li><ul><li><p>助于理解的<a href="http://www.cppblog.com/MemoryGarden/archive/2011/07/02/150007.html">一段话</a></p></li><li><p>两幅图（<a href="http://www.cnblogs.com/newwy/archive/2013/08/03/3234536.html">来源</a>）：</p></li><li><ul><li>建立连接：三次握手</li><li><img src="https://cdn.jsdelivr.net/gh/luckyu2/imgLibrary/blogImg/tcp.png"></li><li>关闭连接：四次挥手</li><li><img src="https://images0.cnblogs.com/blog/385532/201308/30193703-330b281cddc5439f99eb027ac1c9627c.png"></li></ul></li></ul></li><li><p>三次握手建立连接时，发送方再次发送确认的必要性？</p></li><li><ul><li><ul><li>主 要是为了防止已失效的连接请求报文段突然又传到了B,因而产生错误。假定出现一种异常情况，即A发出的第一个连接请求报文段并没有丢失，而是在某些网络结 点长时间滞留了，一直延迟到连接释放以后的某个时间才到达B，本来这是一个早已失效的报文段。但B收到此失效的连接请求报文段后，就误认为是A又发出一次 新的连接请求，于是就向A发出确认报文段，同意建立连接。假定不采用三次握手，那么只要B发出确认，新的连接就建立了，这样一直等待A发来数据，B的许多 资源就这样白白浪费了。</li></ul></li></ul></li><li><p>四次挥手释放连接时，等待2MSL的意义？</p></li><li><ul><li><ul><li>第 一，为了保证A发送的最有一个ACK报文段能够到达B。这个ACK报文段有可能丢失，因而使处在LAST-ACK状态的B收不到对已发送的FIN和ACK 报文段的确认。B会超时重传这个FIN和ACK报文段，而A就能在2MSL时间内收到这个重传的ACK+FIN报文段。接着A重传一次确认。</li><li>第二，就是防止上面提到的已失效的连接请求报文段出现在本连接中，A在发送完最有一个ACK报文段后，再经过2MSL，就可以使本连接持续的时间内所产生的所有报文段都从网络中消失。</li></ul></li></ul></li></ul></li></ul><ul><li><ul><li><p>常见的应用中有哪些是应用TCP协议的，哪些又是应用UDP协议的，为什么它们被如此设计？</p></li><li><ul><li><p>以下应用一般或必须用udp实现？</p></li><li><ul><li>多播的信息一定要用udp实现，因为tcp只支持一对一通信。</li><li>如果一个应用场景中大多是简短的信息，适合用udp实现，因为udp是基于报文段的，它直接对上层应用的数据封装成报文段，然后丢在网络中，如果信息量太大，会在链路层中被分片，影响传输效率。</li><li>如果一个应用场景重性能甚于重完整性和安全性，那么适合于udp，比如多媒体应用，缺一两帧不影响用户体验，但是需要流媒体到达的速度快，因此比较适合用udp</li><li>如果要求快速响应，那么udp听起来比较合适</li><li>如果又要利用udp的快速响应优点，又想可靠传输，那么只能考上层应用自己制定规则了。</li><li>常见的使用udp的例子：ICQ,QQ的聊天模块。</li></ul></li><li><p>以qq为例的一个说明（转载自<a href="http://www.zhihu.com/question/20292749">知乎</a>）</p></li></ul></li></ul></li></ul><p>登陆采用TCP协议和HTTP协议，你和好友之间发送消息，主要采用UDP协议，内网传文件采用了P2P技术。总来的说：<br>1.登陆过程，客户端client 采用TCP协议向服务器server发送信息，HTTP协议下载信息。登陆之后，会有一个TCP连接来保持在线状态。<br>2.和好友发消息，客户端client采用UDP协议，但是需要通过服务器转发。腾讯为了确保传输消息的可靠，采用上层协议来保证可靠传输。如果消息发送失败，客户端会提示消息发送失败，并可重新发送。<br>3.如果是在内网里面的两个客户端传文件，QQ采用的是P2P技术，不需要服务器中转。</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      
        <tags>
            
            <tag> 网络通信 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>响应式布局的常用解决方案对比(媒体查询、百分比、rem和vw/vh）</title>
      <link href="/%5Bobject%20Object%5D/2021/01/20/%E5%93%8D%E5%BA%94%E5%BC%8F%E5%B8%83%E5%B1%80/"/>
      <url>/%5Bobject%20Object%5D/2021/01/20/%E5%93%8D%E5%BA%94%E5%BC%8F%E5%B8%83%E5%B1%80/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id=""><a href="#" class="headerlink" title=""></a></h1><p><strong>简介：</strong> 简要介绍：前端开发中，静态网页通常需要适应不同分辨率的设备，常用的自适应解决方案包括媒体查询、百分比、rem和vw/vh等。本文从px单位出发，分析了px在移动端布局中的不足，接着介绍了几种不同的自适应解决方案。</p><p>简要介绍：前端开发中，静态网页通常需要适应不同分辨率的设备，常用的自适应解决方案包括媒体查询、百分比、rem和vw/vh等。本文从px单位出发，分析了px在移动端布局中的不足，接着介绍了几种不同的自适应解决方案。</p><blockquote><ul><li>px和视口</li><li>媒体查询</li><li>百分比</li><li>自适应场景下的rem解决方案</li><li>通过vw/vh来实现自适应</li></ul></blockquote><h2 id="一、px和视口"><a href="#一、px和视口" class="headerlink" title="一、px和视口"></a>一、px和视口</h2><p>在静态网页中，我们经常用像素（px）作为单位，来描述一个元素的宽高以及定位信息。在pc端，通常认为css中,1px所表示的真实长度是固定的。</p><p><strong><em>那么，px真的是一个设备无关，跟长度单位米和分米一样是固定大小的吗？</em></strong></p><p>答案是否定的，下面图1.1和图1.2分别表示pc端下和移动端下的显示结果，在网页中我们设置的font-size统一为16px。</p><p><img src="https://yqfile.alicdn.com/d4da55afe41e53b3dac82469f3d47430c09585d8.jpeg" alt="d4da55afe41e53b3dac82469f3d47430c09585d8"></p><p>图1.1 pc端下font-size为16px时的显示结果</p><p><img src="https://yqfile.alicdn.com/c5288ab0897642624d3c672997fc97332da7635d.jpeg" alt="c5288ab0897642624d3c672997fc97332da7635d"></p><p>图1.2 移动端下font-size为16px时的显示结果</p><p>从上面两幅图的对比可以看出，字体都是16px，显然在pc端中文字正常显示，而在移动端文字很小，几乎看不到，说明在css中1px并不是固定大小，直观从我们发现在移动端1px所表示的长度较小，所以导致文字显示不清楚。</p><p><strong><em>那么css中的1px的真实长度到底由什么决定呢？\</em></strong></p><p>为了理清楚这个概念我们首先介绍像素和视口的概念</p><h3 id="1-像素"><a href="#1-像素" class="headerlink" title="1. 像素"></a>1. 像素</h3><p>像素是网页布局的基础，一个像素表示了计算机屏幕所能显示的最小区域，像素分为两种类型：css像素和物理像素。</p><p>我们在js或者css代码中使用的px单位就是指的是css像素，物理像素也称设备像素，只与设备或者说硬件有关，同样尺寸的屏幕，设备的密度越高，物理像素也就越多。下表表示css像素和物理像素的具体区别：</p><table><thead><tr><th align="left">css像素</th><th align="center">为web开发者提供，在css中使用的一个抽象单位</th></tr></thead><tbody><tr><td align="left">物理像素</td><td align="center">只与设备的硬件密度有关，任何设备的物理像素都是固定的</td></tr></tbody></table><p>那么css像素与物理像素的转换关系是怎么样的呢？为了明确css像素和物理像素的转换关系，必须先了解视口是什么。</p><h3 id="2-视口"><a href="#2-视口" class="headerlink" title="2. 视口"></a>2. 视口</h3><p>广义的视口，是指浏览器显示内容的屏幕区域，狭义的视口包括了布局视口、视觉视口和理想视口</p><h3 id="1-布局视口（layout-viewport）"><a href="#1-布局视口（layout-viewport）" class="headerlink" title="(1) 布局视口（layout viewport）"></a>(1) 布局视口（layout viewport）</h3><p>布局视口定义了pc网页在移动端的默认布局行为，因为通常pc的分辨率较大，布局视口默认为980px。也就是说在不设置网页的viewport的情况下，pc端的网页默认会以布局视口为基准，在移动端进行展示。因此我们可以明显看出来，默认为布局视口时，根植于pc端的网页在移动端展示很模糊。</p><h3 id="2-视觉视口（visual-viewport）"><a href="#2-视觉视口（visual-viewport）" class="headerlink" title="(2) 视觉视口（visual viewport）"></a>(2) 视觉视口（visual viewport）</h3><p>视觉视口表示浏览器内看到的网站的显示区域，用户可以通过缩放来查看网页的显示内容，从而改变视觉视口。视觉视口的定义，就像拿着一个放大镜分别从不同距离观察同一个物体，视觉视口仅仅类似于放大镜中显示的内容，因此视觉视口不会影响布局视口的宽度和高度。</p><h3 id="3-理想视口（ideal-viewport）"><a href="#3-理想视口（ideal-viewport）" class="headerlink" title="(3) 理想视口（ideal viewport）"></a>(3) 理想视口（ideal viewport）</h3><p>理想视口或者应该全称为“理想的布局视口”，在移动设备中就是指设备的分辨率。换句话说，理想视口或者说分辨率就是给定设备物理像素的情况下，最佳的“布局视口”。</p><p><strong><em>上述视口中，最重要的是要明确理想视口的概念，在移动端中，理想视口或者说分辨率跟物理像素之间有什么关系呢？\</em></strong></p><p>为了理清分辨率和物理像素之间的联系，我们介绍一个用DPR（Device pixel ratio）设备像素比来表示，则可以写成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 DPR &#x3D; 物理像素／分辨率</span><br></pre></td></tr></table></figure><p>在不缩放的情况下，一个css像素就对应一个dpr，也就是说，在不缩放</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1 CSS像素 &#x3D; 物理像素／分辨率</span><br><span class="line">此外，在移动端的布局中，我们可以通过viewport元标签来控制布局，比如一般情况下，我们可以通过下述标签使得移动端在理想视口下布局：</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;meta id&#x3D;&quot;viewport&quot; name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width; initial-scale&#x3D;1.0; maximum-scale&#x3D;1; user-scalable&#x3D;no;&quot;&gt;</span><br></pre></td></tr></table></figure><p>上述meta标签的每一个属性的详细介绍如下：</p><table><thead><tr><th align="left">属性名</th><th align="center">取值</th><th align="right">描述</th></tr></thead><tbody><tr><td align="left">width</td><td align="center">正整数</td><td align="right">定义布局视口的宽度，单位为像素</td></tr><tr><td align="left">height</td><td align="center">正整数</td><td align="right">定义布局视口的高度，单位为像素，很少使用</td></tr><tr><td align="left">initial-scale</td><td align="center">[0,10]</td><td align="right">初始缩放比例，1表示不缩放</td></tr><tr><td align="left">minimum-scale</td><td align="center">[0,10]</td><td align="right">最小缩放比例</td></tr><tr><td align="left">maximum-scale</td><td align="center">[0,10]</td><td align="right">最大缩放比例</td></tr><tr><td align="left">user-scalable</td><td align="center">yes／no</td><td align="right">是否允许手动缩放页面，默认值为yes</td></tr></tbody></table><p>其中我们来看width属性，在移动端布局时，在meta标签中我们会将width设置称为device-width，device-width一般是表示分辨率的宽，通过width=device-width的设置我们就将布局视口设置成了理想的视口。</p><h3 id="3-px与自适应"><a href="#3-px与自适应" class="headerlink" title="3. px与自适应"></a>3. px与自适应</h3><p>上述我们了解到了当通过viewport元标签，设置布局视口为理想视口时，1个css像素可以表示成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 CSS像素 &#x3D; 物理像素／分辨率</span><br></pre></td></tr></table></figure><p>我们直到，在pc端的布局视口通常情况下为980px，移动端以iphone6为例，分辨率为375 * 667，也就是说布局视口在理想的情况下为375px。比如现在我们有一个750px * 1134px的视觉稿，那么在pc端，一个css像素可以如下计算：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PC端： 1 CSS像素 &#x3D; 物理像素／分辨率 &#x3D; 750 ／ 980 &#x3D;0.76 px</span><br></pre></td></tr></table></figure><p>而在iphone6下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iphone6：1 CSS像素 &#x3D; 物理像素 ／分辨率 &#x3D; 750 ／ 375 &#x3D; 2 px</span><br></pre></td></tr></table></figure><p>也就是说在PC端，一个CSS像素可以用0.76个物理像素来表示，而iphone6中 一个CSS像素表示了2个物理像素。此外不同的移动设备分辨率不同，也就是1个CSS像素可以表示的物理像素是不同的，因此如果在css中仅仅通过px作为长度和宽度的单位，造成的结果就是无法通过一套样式，实现各端的自适应。</p><h2 id="二、媒体查询"><a href="#二、媒体查询" class="headerlink" title="二、媒体查询"></a>二、媒体查询</h2><p>在前面我们说到，不同端的设备下，在css文件中，1px所表示的物理像素的大小是不同的，因此通过一套样式，是无法实现各端的自适应。由此我们联想：</p><p><strong><em>如果一套样式不行，那么能否给每一种设备各一套不同的样式来实现自适应的效果？\</em></strong></p><p>答案是肯定的。</p><p>使用@media媒体查询可以针对不同的媒体类型定义不同的样式，特别是响应式页面，可以针对不同屏幕的大小，编写多套样式，从而达到自适应的效果。举例来说：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">@media screen and (max-width: 960px)&#123;</span><br><span class="line">    body&#123;</span><br><span class="line">      background-color:#FF6699</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@media screen and (max-width: 768px)&#123;</span><br><span class="line">    body&#123;</span><br><span class="line">      background-color:#00FF66;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@media screen and (max-width: 550px)&#123;</span><br><span class="line">    body&#123;</span><br><span class="line">      background-color:#6633FF;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@media screen and (max-width: 320px)&#123;</span><br><span class="line">    body&#123;</span><br><span class="line">      background-color:#FFFF00;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述的代码通过媒体查询定义了几套样式，通过max-width设置样式生效时的最大分辨率，上述的代码分别对分辨率在0～320px，320px～550px，550px～768px以及768px～960px的屏幕设置了不同的背景颜色。</p><p>通过媒体查询，可以通过给不同分辨率的设备编写不同的样式来实现响应式的布局，比如我们为不同分辨率的屏幕，设置不同的背景图片。比如给小屏幕手机设置@2x图，为大屏幕手机设置@3x图，通过媒体查询就能很方便的实现。</p><p>但是媒体查询的缺点也很明显，如果在浏览器大小改变时，需要改变的样式太多，那么多套样式代码会很繁琐。</p><h2 id="三、百分比"><a href="#三、百分比" class="headerlink" title="三、百分比"></a>三、百分比</h2><p>除了用px结合媒体查询实现响应式布局外，我们也可以通过百分比单位 “ % “ 来实现响应式的效果。</p><p>比如当浏览器的宽度或者高度发生变化时，通过百分比单位，通过百分比单位可以使得浏览器中的组件的宽和高随着浏览器的变化而变化，从而实现响应式的效果。</p><p>为了了解百分比布局，首先要了解的问题是：</p><p><strong><em>css中的子元素中的百分比（%）到底是谁的百分比？\</em></strong></p><p>直观的理解，我们可能会认为子元素的百分比完全相对于直接父元素，height百分比相对于height，width百分比相对于width。当然这种理解是正确的，但是根据css的盒式模型，除了height、width属性外，还具有padding、border、margin等等属性。那么这些属性设置成百分比，是根据父元素的那些属性呢？此外还有border-radius和translate等属性中的百分比，又是相对于什么呢？下面来具体分析。</p><h3 id="1-百分比的具体分析"><a href="#1-百分比的具体分析" class="headerlink" title="1. 百分比的具体分析"></a>1. 百分比的具体分析</h3><p>（1）子元素height和width的百分比</p><p>子元素的height或width中使用百分比，是相对于子元素的直接父元素，width相对于父元素的width，height相对于父元素的height。比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;parent&quot;&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;child&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>如果设置： .father{ width:200px; height:100px; } .child{ width:50%; height:50%; } 展示的效果为：</p><p><img src="https://yqfile.alicdn.com/095385dfa2b302b4c7fc96d63953d0b34e7151e2.jpeg" alt="095385dfa2b302b4c7fc96d63953d0b34e7151e2"></p><p>(2) top和bottom 、left和right</p><p>子元素的top和bottom如果设置百分比，则相对于直接非static定位(默认定位)的父元素的高度，同样</p><p>子元素的left和right如果设置百分比，则相对于直接非static定位(默认定位的)父元素的宽度。</p><p>展示的效果为：</p><p><img src="https://yqfile.alicdn.com/0a7f362a59eef4e5f1c4a80772bcf970931d06eb.jpeg" alt="0a7f362a59eef4e5f1c4a80772bcf970931d06eb"></p><p>（3）padding</p><p>子元素的padding如果设置百分比，不论是垂直方向或者是水平方向，都相对于直接父亲元素的width，而与父元素的height无关。</p><p>举例来说：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">.parent&#123;</span><br><span class="line">  width:200px;</span><br><span class="line">  height:100px;</span><br><span class="line">  background:green;</span><br><span class="line">&#125;</span><br><span class="line">.child&#123;</span><br><span class="line">  width:0px;</span><br><span class="line">  height:0px;</span><br><span class="line">  background:blue;</span><br><span class="line">  color:white;</span><br><span class="line">  padding-top:50%;</span><br><span class="line">  padding-left:50%;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>展示的效果为：</p><p><img src="https://yqfile.alicdn.com/5d0ec79029e3b4a6d737043a84a4040a43bf7afa.jpeg" alt="5d0ec79029e3b4a6d737043a84a4040a43bf7afa"></p><p>子元素的初始宽高为0，通过padding可以将父元素撑大，上图的蓝色部分是一个正方形，且边长为100px,说明padding不论宽高，如果设置成百分比都相对于父元素的width。</p><p>（4）margin</p><p>跟padding一样，margin也是如此，子元素的margin如果设置成百分比，不论是垂直方向还是水平方向，都相对于直接父元素的width。这里就不具体举例。</p><p>（5）border-radius</p><p>border-radius不一样，如果设置border-radius为百分比，则是相对于自身的宽度，举例来说：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;trangle&quot;&gt;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>设置border-radius为百分比：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.trangle&#123;</span><br><span class="line">  width:100px;</span><br><span class="line">  height:100px;</span><br><span class="line">  border-radius:50%;</span><br><span class="line">  background:blue;</span><br><span class="line">  margin-top:10px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>展示效果为：</p><p><img src="https://yqfile.alicdn.com/43297bfa824e5c901bb82e702f13670a2c3b902e.jpeg" alt="43297bfa824e5c901bb82e702f13670a2c3b902e"></p><p>除了border-radius外，还有比如translate、background-size等都是相对于自身的，这里就不一一举例。</p><h3 id="2-百分比单位布局应用"><a href="#2-百分比单位布局应用" class="headerlink" title="2. 百分比单位布局应用"></a>2. 百分比单位布局应用</h3><p>百分比单位在布局上应用还是很广泛的，这里介绍一种应用。</p><p>比如我们要实现一个固定长宽比的长方形，比如要实现一个长宽比为4:3的长方形,我们可以根据padding属性来实现，因为padding不管是垂直方向还是水平方向，百分比单位都相对于父元素的宽度，因此我们可以设置padding-top为百分比来实现，长宽自适应的长方形：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;trangle&quot;&gt;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>设置样式让其自适应：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.trangle&#123;</span><br><span class="line">  height:0;</span><br><span class="line">  width:100%;</span><br><span class="line">  padding-top:75%;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过设置padding-top：75%,相对比宽度的75%，因此这样就设置了一个长宽高恒定比例的长方形，具体效果展示如下：</p><p><img src="https://yqfile.alicdn.com/9d937a0c943266518a7d20fa76222ba2ee8e5d44.jpeg" alt="9d937a0c943266518a7d20fa76222ba2ee8e5d44"></p><h3 id="3-百分比单位缺点"><a href="#3-百分比单位缺点" class="headerlink" title="3. 百分比单位缺点"></a>3. 百分比单位缺点</h3><p>从上述对于百分比单位的介绍我们很容易看出如果全部使用百分比单位来实现响应式的布局，有明显的以下两个缺点：</p><p>（1）计算困难，如果我们要定义一个元素的宽度和高度，按照设计稿，必须换算成百分比单位。 （2）从小节1可以看出，各个属性中如果使用百分比，相对父元素的属性并不是唯一的。比如width和height相对于父元素的width和height，而margin、padding不管垂直还是水平方向都相对比父元素的宽度、border-radius则是相对于元素自身等等，造成我们使用百分比单位容易使布局问题变得复杂。</p><h2 id="四、自适应场景下的rem解决方案"><a href="#四、自适应场景下的rem解决方案" class="headerlink" title="四、自适应场景下的rem解决方案"></a>四、自适应场景下的rem解决方案</h2><h3 id="1-rem单位"><a href="#1-rem单位" class="headerlink" title="1. rem单位"></a>1. rem单位</h3><p>首先来看，什么是rem单位。rem是一个灵活的、可扩展的单位，由浏览器转化像素并显示。与em单位不同，rem单位无论嵌套层级如何，都只相对于浏览器的根元素（HTML元素）的font-size。默认情况下，html元素的font-size为16px，所以：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 rem &#x3D; 12px</span><br></pre></td></tr></table></figure><p>为了计算方便，通常可以将html的font-size设置成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">html&#123; font-size: 62.5% &#125;</span><br></pre></td></tr></table></figure><p>这种情况下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 rem &#x3D; 10px</span><br></pre></td></tr></table></figure><h3 id="2-通过rem来实现响应式布局"><a href="#2-通过rem来实现响应式布局" class="headerlink" title="2.通过rem来实现响应式布局"></a>2.通过rem来实现响应式布局</h3><p>rem单位都是相对于根元素html的font-size来决定大小的,根元素的font-size相当于提供了一个基准，当页面的size发生变化时，只需要改变font-size的值，那么以rem为固定单位的元素的大小也会发生响应的变化。<br>因此，如果通过rem来实现响应式的布局，只需要根据视图容器的大小，动态的改变font-size即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function refreshRem() &#123;</span><br><span class="line">    var docEl &#x3D; doc.documentElement;</span><br><span class="line">    var width &#x3D; docEl.getBoundingClientRect().width;</span><br><span class="line">    var rem &#x3D; width &#x2F; 10;</span><br><span class="line">    docEl.style.fontSize &#x3D; rem + &#39;px&#39;;</span><br><span class="line">    flexible.rem &#x3D; win.rem &#x3D; rem;</span><br><span class="line">&#125;</span><br><span class="line">win.addEventListener(&#39;resize&#39;, refreshRem);</span><br></pre></td></tr></table></figure><p>上述代码中将视图容器分为10份，font-size用十分之一的宽度来表示，最后在header标签中执行这段代码，就可以动态定义font-size的大小，从而1rem在不同的视觉容器中表示不同的大小，用rem固定单位可以实现不同容器内布局的自适应。</p><h3 id="3-rem2px和px2rem"><a href="#3-rem2px和px2rem" class="headerlink" title="3. rem2px和px2rem"></a>3. rem2px和px2rem</h3><p>如果在响应式布局中使用rem单位，那么存在一个单位换算的问题，rem2px表示从rem换算成px，这个就不说了，只要rem乘以相应的font-size中的大小，就能换算成px。更多的应用是px2rem，表示的是从px转化为rem。</p><p>比如给定的视觉稿为750px（物理像素），如果我们要将所有的布局单位都用rem来表示，一种比较笨的办法就是对所有的height和width等元素，乘以相应的比例，现将视觉稿换算成rem单位，然后一个个的用rem来表示。另一种比较方便的解决方法就是，在css中我们还是用px来表示元素的大小，最后编写完css代码之后，将css文件中的所有px单位，转化成rem单位。</p><p>px2rem的原理也很简单，重点在于预处理以px为单位的css文件，处理后将所有的px变成rem单位。可以通过两种方式来实现：</p><p>1） webpack loader的形式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install px2rem-loader</span><br></pre></td></tr></table></figure><p>在webpack的配置文件中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">  &#x2F;&#x2F; ...</span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: [&#123;</span><br><span class="line">      test: &#x2F;\.css$&#x2F;,</span><br><span class="line">      use: [&#123;</span><br><span class="line">        loader: &#39;style-loader&#39;</span><br><span class="line">      &#125;, &#123;</span><br><span class="line">        loader: &#39;css-loader&#39;</span><br><span class="line">      &#125;, &#123;</span><br><span class="line">        loader: &#39;px2rem-loader&#39;,</span><br><span class="line">        &#x2F;&#x2F; options here</span><br><span class="line">        options: &#123;</span><br><span class="line">          remUni: 75,</span><br><span class="line">          remPrecision: 8</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;]</span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2）webpack中使用postcss plugin</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install postcss-loader</span><br></pre></td></tr></table></figure><p>在webpack的plugin中:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">var px2rem &#x3D; require(&#39;postcss-px2rem&#39;);</span><br><span class="line"></span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">  module: &#123;</span><br><span class="line">    loaders: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: &#x2F;\.css$&#x2F;,</span><br><span class="line">        loader: &quot;style-loader!css-loader!postcss-loader&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  postcss: function() &#123;</span><br><span class="line">    return [px2rem(&#123;remUnit: 75&#125;)];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-rem-布局应用举例"><a href="#4-rem-布局应用举例" class="headerlink" title="4. rem 布局应用举例"></a>4. rem 布局应用举例</h3><p>网易新闻的移动端页面使用了rem布局，具体例子如下：</p><p><img src="https://yqfile.alicdn.com/62066714035afd0bcb07228dc1bce11750089945.jpeg" alt="62066714035afd0bcb07228dc1bce11750089945"></p><h3 id="5-rem-布局的缺点"><a href="#5-rem-布局的缺点" class="headerlink" title="5. rem 布局的缺点"></a>5. rem 布局的缺点</h3><p>通过rem单位，可以实现响应式的布局，特别是引入相应的postcss相关插件，免去了设计稿中的px到rem的计算。rem单位在国外的一些网站也有使用，这里所说的rem来实现布局的缺点，或者说是小缺陷是：</p><p><strong><em>在响应式布局中，必须通过js来动态控制根元素font-size的大小。</em></strong></p><p>也就是说css样式和js代码有一定的耦合性。且必须将改变font-size的代码放在css样式之前。</p><h2 id="五-通过vw-vh来实现自适应"><a href="#五-通过vw-vh来实现自适应" class="headerlink" title="五. 通过vw/vh来实现自适应"></a>五. 通过vw/vh来实现自适应</h2><h3 id="1-什么是vw-vh"><a href="#1-什么是vw-vh" class="headerlink" title="1. 什么是vw/vh ?"></a>1. 什么是vw/vh ?</h3><p>css3中引入了一个新的单位vw/vh，与视图窗口有关，vw表示相对于视图窗口的宽度，vh表示相对于视图窗口高度，除了vw和vh外，还有vmin和vmax两个相关的单位。各个单位具体的含义如下：</p><table><thead><tr><th align="left">单位</th><th align="center">含义</th></tr></thead><tbody><tr><td align="left">vw</td><td align="center">相对于视窗的宽度，视窗宽度是100vw</td></tr><tr><td align="left">vh</td><td align="center">相对于视窗的高度，视窗高度是100vh</td></tr><tr><td align="left">vmin</td><td align="center">vw和vh中的较小值</td></tr><tr><td align="left">vmax</td><td align="center">vw和vh中的较大值</td></tr></tbody></table><p>这里我们发现视窗宽高都是100vw／100vh，那么vw或者vh，下简称vw，很类似百分比单位。vw和%的区别为：</p><table><thead><tr><th align="left">单位</th><th align="center">含义</th></tr></thead><tbody><tr><td align="left">%</td><td align="center">大部分相对于祖先元素，也有相对于自身的情况比如（border-radius、translate等)</td></tr><tr><td align="left">vw/vh</td><td align="center">相对于视窗的尺寸</td></tr></tbody></table><p>从对比中我们可以发现，vw单位与百分比类似，单确有区别，前面我们介绍了百分比单位的换算困难，这里的vw更像”理想的百分比单位”。任意层级元素，在使用vw单位的情况下，1vw都等于视图宽度的百分之一。</p><h3 id="2-vw单位换算"><a href="#2-vw单位换算" class="headerlink" title="2. vw单位换算"></a>2. vw单位换算</h3><p>同样的，如果要将px换算成vw单位，很简单，只要确定视图的窗口大小（布局视口），如果我们将布局视口设置成分辨率大小，比如对于iphone6/7 375*667的分辨率，那么px可以通过如下方式换算成vw：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1px &#x3D; （1&#x2F;375）*100 vw</span><br></pre></td></tr></table></figure><p>此外，也可以通过postcss的相应插件，预处理css做一个自动的转换，<a href="https://link.juejin.im/?target=https://github.com/evrone/postcss-px-to-viewport">postcss-px-to-viewport</a>可以自动将px转化成vw。 postcss-px-to-viewport的默认参数为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var defaults &#x3D; &#123;</span><br><span class="line">  viewportWidth: 320,</span><br><span class="line">  viewportHeight: 568, </span><br><span class="line">  unitPrecision: 5,</span><br><span class="line">  viewportUnit: &#39;vw&#39;,</span><br><span class="line">  selectorBlackList: [],</span><br><span class="line">  minPixelValue: 1,</span><br><span class="line">  mediaQuery: false</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>通过指定视窗的宽度和高度，以及换算精度，就能将px转化成vw。</p><h3 id="3-vw-vh单位的兼容性"><a href="#3-vw-vh单位的兼容性" class="headerlink" title="3. vw/vh单位的兼容性"></a>3. vw/vh单位的兼容性</h3><p>可以在<a href="https://caniuse.com/">https://caniuse.com/</a> 查看各个版本的浏览器对vw单位的支持性。</p><p><img src="https://yqfile.alicdn.com/640ff82102d83bdf20eb1b8507b8767a38fcfff7.jpeg" alt="640ff82102d83bdf20eb1b8507b8767a38fcfff7"></p><p>从上图我们发现，绝大多数的浏览器支持vw单位，但是ie9-11不支持vmin和vmax，考虑到vmin和vmax单位不常用，vw单位在绝大部分高版本浏览器内的支持性很好，但是opera浏览器整体不支持vw单位，如果需要兼容opera浏览器的布局，不推荐使用vw。</p><p>小结：本文介绍在布局中常用的单位，比如px、%、rem和vw等等，以及不同的单位在响应式布局中的优缺点。</p><p>原文发布时间为：2018年07月02日</p><p>本文作者：<a href="https://juejin.im/user/5b398d15f265da59bf7a1167">yuxiaoliang</a></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      
        <tags>
            
            <tag> flex </tag>
            
            <tag> CSS3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用Vue框架开发移动端XX商城的开发思路</title>
      <link href="/%5Bobject%20Object%5D/2021/01/13/%E7%A7%BB%E5%8A%A8%E7%AB%AFXX%E8%B4%AD%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E6%80%9D%E8%B7%AF/"/>
      <url>/%5Bobject%20Object%5D/2021/01/13/%E7%A7%BB%E5%8A%A8%E7%AB%AFXX%E8%B4%AD%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E6%80%9D%E8%B7%AF/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="一-gridView"><a href="#一-gridView" class="headerlink" title="一. gridView"></a>一. gridView</h3><ul><li>独立组件封装gridView 用于goodslistitem，每件商品橱窗页面的展示<ul><li>div&gt;a&gt;img</li></ul></li></ul><h3 id="二-TabControl"><a href="#二-TabControl" class="headerlink" title="二. TabControl"></a>二. TabControl</h3><ul><li>独立组件的封装<ul><li>props -&gt; titles</li><li>div&gt;根据titles v-for遍历 div -&gt; span用Vue框架开发移动端XX商城的开发思路</li><li>css相关</li><li>选中哪一个tab, 哪一个tab的文字颜色变色, 下面border-bottom<ul><li>currentIndex</li></ul></li></ul></li></ul><h3 id="三-首页商品数据的请求"><a href="#三-首页商品数据的请求" class="headerlink" title="三. 首页商品数据的请求"></a>三. 首页商品数据的请求</h3><h4 id="3-1-设计数据结构-用于保存数据"><a href="#3-1-设计数据结构-用于保存数据" class="headerlink" title="3.1. 设计数据结构, 用于保存数据"></a>3.1. 设计数据结构, 用于保存数据</h4><p>goods: {</p><p>pop: page/list</p><p>new: page/list</p><p>sell: page/list</p><p>}</p><h4 id="3-2-发送数据请求"><a href="#3-2-发送数据请求" class="headerlink" title="3.2. 发送数据请求"></a>3.2. 发送数据请求</h4><ul><li>在home.js中封装getHomeGoods(type, page)</li><li>在Home.vue中, 又在methods中getHomeGoods(type)</li><li>调用getHomeGoods(‘pop’)/getHomeGoods(‘new’)/getHomeGoods(‘sell’)<ul><li>page: 动态的获取对应的page</li></ul></li><li>获取到数据: res<ul><li>this.goods[type].list.push(…res.data.list)</li><li>this.goods[type].page += 1</li></ul></li></ul><p>goods: {</p><p>pop: page1:/list[30]</p><p>new: page1/list[30]</p><p>sell: page1/list[30]</p><p>}</p><h3 id="四-对商品数据进行展示"><a href="#四-对商品数据进行展示" class="headerlink" title="四. 对商品数据进行展示"></a>四. 对商品数据进行展示</h3><h4 id="4-1-封装GoodsList-vue组件"><a href="#4-1-封装GoodsList-vue组件" class="headerlink" title="4.1. 封装GoodsList.vue组件"></a>4.1. 封装GoodsList.vue组件</h4><ul><li>props: goods -&gt; list[30]</li><li>v-for goods -&gt; GoodsListItem[30]</li><li>GoodListItem(组件) -&gt; GoodsItem(数据)</li></ul><h4 id="4-2-封装GoodsListItem-vue组件"><a href="#4-2-封装GoodsListItem-vue组件" class="headerlink" title="4.2. 封装GoodsListItem.vue组件"></a>4.2. 封装GoodsListItem.vue组件</h4><ul><li>props: goodsItem</li><li>goodsItem 取出数据, 并且使用正确的div/span/img基本标签进行展示</li></ul><h3 id="五-对滚动进行重构-Better-Scroll"><a href="#五-对滚动进行重构-Better-Scroll" class="headerlink" title="五. 对滚动进行重构: Better-Scroll"></a>五. 对滚动进行重构: Better-Scroll</h3><h4 id="5-1-在index-html中使用Better-Scroll"><a href="#5-1-在index-html中使用Better-Scroll" class="headerlink" title="5.1. 在index.html中使用Better-Scroll"></a>5.1. 在index.html中使用Better-Scroll</h4><ul><li>const bscroll = new BScroll(el, { })</li><li>注意: wrapper -&gt; content -&gt; 很多内容</li><li>1.监听滚动<ul><li>probeType: 0/1/2(手指滚动)/3(只要是滚动)</li><li>bscroll .on(‘scroll’, (position) =&gt; {})</li></ul></li><li>2.上拉加载<ul><li>pullUpLoad: true</li><li>bscroll .on(‘pullingUp’, () =&gt; {})</li></ul></li><li>3.click: false<ul><li>button可以监听点击</li><li>div不可以</li></ul></li></ul><h4 id="5-2-在Vue项目中使用Better-Scroll"><a href="#5-2-在Vue项目中使用Better-Scroll" class="headerlink" title="5.2. 在Vue项目中使用Better-Scroll"></a>5.2. 在Vue项目中使用Better-Scroll</h4><ul><li>在Profile.vue中简单的演示</li><li>对Better-Scroll进行封装: Scroll.vue</li><li>Home.vue和Scroll.vue之间进行通信<ul><li>Home.vue将probeType设置为3</li><li>Scroll.vue需要通过$emit, 实时将事件发送到Home.vue</li></ul></li></ul><h3 id="六-回到顶部BackTop"><a href="#六-回到顶部BackTop" class="headerlink" title="六. 回到顶部BackTop"></a>六. 回到顶部BackTop</h3><h4 id="6-1-对BackTop-vue组件的封装"><a href="#6-1-对BackTop-vue组件的封装" class="headerlink" title="6.1. 对BackTop.vue组件的封装"></a>6.1. 对BackTop.vue组件的封装</h4><h4 id="6-2-如何监听组件的点击"><a href="#6-2-如何监听组件的点击" class="headerlink" title="6.2. 如何监听组件的点击"></a>6.2. 如何监听组件的点击</h4><ul><li>直接监听back-top的点击, 但是可以直接监听?<ul><li>不可以, 必须添加修饰.native</li></ul></li><li>回到顶部<ul><li>scroll对象, scroll.scrollTo(x, y, time)</li><li>this.$refs.scroll.scrollTo(0, 0, 500)</li></ul></li></ul><h4 id="6-3-BackTop组件的显示和隐藏"><a href="#6-3-BackTop组件的显示和隐藏" class="headerlink" title="6.3. BackTop组件的显示和隐藏"></a>6.3. BackTop组件的显示和隐藏</h4><ul><li>isShowBackTop: false</li><li>监听滚动, 拿到滚动的位置:<ul><li>-position.y &gt; 1000 -&gt; isShowBackTop: true</li><li>isShowBackTop = -position.y &gt; 1000</li></ul></li></ul><h3 id="七-解决首页中可滚动区域的问题"><a href="#七-解决首页中可滚动区域的问题" class="headerlink" title="七. 解决首页中可滚动区域的问题"></a>七. 解决首页中可滚动区域的问题</h3><ul><li><p>Better-Scroll在决定有多少区域可以滚动时, 是根据scrollerHeight属性决定</p><ul><li>scrollerHeight属性是根据放Better-Scroll的content中的子组件的高度</li><li>但是我们的首页中, 刚开始在计算scrollerHeight属性时, 是没有将图片计算在内的</li><li>所以, 计算出来的告诉是错误的(1300+)</li><li>后来图片加载进来之后有了新的高度, 但是scrollerHeight属性并没有进行更新.</li><li>所以滚动出现了问题</li></ul></li><li><p>如何解决这个问题了?</p><ul><li>监听每一张图片是否加载完成, 只要有一张图片加载完成了, 执行一次refresh()</li><li>如何监听图片加载完成了?<ul><li>原生的js监听图片: img.onload = function() {}</li><li>Vue中监听: @load=’方法’</li></ul></li><li>调用scroll的refresh()</li></ul></li><li><p>如何将GoodsListItem.vue中的事件传入到Home.vue中</p><ul><li><p>因为涉及到非父子组件的通信, 所以这里我们选择了</p><p>事件总线</p><ul><li>bus -&gt;总线</li><li>Vue.prototype.$bus = new Vue()</li><li>this.bus.emit(‘事件名称’, 参数)</li><li>this.bus.on(‘事件名称’, 回调函数(参数))</li></ul></li></ul></li><li><p>问题一: refresh找不到的问题</p><ul><li>第一: 在Scroll.vue中, 调用this.scroll的方法之前, 判断this.scroll对象是否有值</li><li>第二: 在mounted生命周期函数中使用 this.$refs.scroll而不是created中</li></ul></li><li><p>问题二: 对于refresh非常频繁的问题, 进行防抖操作</p><ul><li>防抖debounce/节流throttle(课下研究一下)</li><li>防抖函数起作用的过程:<ul><li>如果我们直接执行refresh, 那么refresh函数会被执行30次.</li><li>可以将refresh函数传入到debounce函数中, 生成一个新的函数.</li><li>之后在调用非常频繁的时候, 就使用新生成的函数.</li><li>而新生成的函数, 并不会非常频繁的调用, 如果下一次执行来的非常快, 那么会将上一次取消掉</li></ul></li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">debounce(func, delay) &#123;</span><br><span class="line">  let timer &#x3D; null</span><br><span class="line">  return function (...args) &#123;</span><br><span class="line">    if (timer) clearTimeout(timer)</span><br><span class="line">    timer &#x3D; setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">      func.apply(this, args)</span><br><span class="line">    &#125;, delay)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="八-上拉加载更多的功能"><a href="#八-上拉加载更多的功能" class="headerlink" title="八. 上拉加载更多的功能"></a>八. 上拉加载更多的功能</h3><ul><li>监听是否滚动到底部的办法，利用非父子组件通信的方式，获取调用BScroll库中封装的pullingUp方法，此方法用于判断是否到下拉到底部，用emit将此方法发送到父组件</li><li>当滚动到底部的时，父组件将调用pullingUp方法，当被调用时，pullingUp方法中的this.getHomeGoods(this.currentType)方法被调用</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">getHomeGoods(type)&#123;</span><br><span class="line">  let page &#x3D; this.goods[type].page + 1</span><br><span class="line">  getHomeGoods(type,page).then(res&#x3D;&gt;&#123;</span><br><span class="line">    this.goods[type].list.push(...res.data.list)</span><br><span class="line">    this.goods[type].page +&#x3D; 1</span><br><span class="line">    &#x2F;&#x2F;调用重置下拉次数的方法</span><br><span class="line">    this.$refs.scroll.finishPullUp()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="九-tabControl的吸顶效果"><a href="#九-tabControl的吸顶效果" class="headerlink" title="九. tabControl的吸顶效果"></a>九. tabControl的吸顶效果</h3><h4 id="9-1-获取到tabControl的offsetTop"><a href="#9-1-获取到tabControl的offsetTop" class="headerlink" title="9.1. 获取到tabControl的offsetTop"></a>9.1. 获取到tabControl的offsetTop</h4><ul><li>必须知道滚动到多少时, 开始有吸顶效果, 这个时候就需要获取tabControl的offsetTop</li><li>但是, 如果直接在mounted中获取tabControl的offsetTop, 那么值是不正确.</li><li>如何获取正确的值了?<ul><li>监听HomeSwiper中img的加载完成.</li><li>加载完成后, 发出事件, 在Home.vue中, 获取正确的值.</li><li>补充:<ul><li>为了不让HomeSwiper多次发出事件,</li><li>可以使用isLoad的变量进行状态的记录.</li></ul></li><li>注意: 这里不进行多次调用和debounce的区别</li></ul></li></ul><h4 id="9-2-监听滚动-动态的改变tabControl的样式"><a href="#9-2-监听滚动-动态的改变tabControl的样式" class="headerlink" title="9.2. 监听滚动, 动态的改变tabControl的样式"></a>9.2. 监听滚动, 动态的改变tabControl的样式</h4><ul><li>问题:动态的改变tabControl的样式时, 会出现两个问题:<ul><li>问题一: 下面的商品内容, 会突然上移</li><li>问题二: tabControl虽然设置了fixed, 但是也随着Better-Scroll一起滚出去了.</li></ul></li><li>其他方案来解决停留问题.<ul><li>在最上面, 多复制了一份PlaceHolderTabControl组件对象, 利用它来实现停留效果.</li><li>当用户滚动到一定位置时, PlaceHolderTabControl显示出来.</li><li>当用户滚动没有达到一定位置时, PlaceHolderTabControl隐藏起来.</li></ul></li></ul><h3 id="十-让Home保持原来的状态"><a href="#十-让Home保持原来的状态" class="headerlink" title="十. 让Home保持原来的状态"></a>十. 让Home保持原来的状态</h3><h4 id="10-1-让Home不要随意销毁掉"><a href="#10-1-让Home不要随意销毁掉" class="headerlink" title="10.1. 让Home不要随意销毁掉"></a>10.1. 让Home不要随意销毁掉</h4><ul><li>keep-alive</li></ul><h4 id="10-2-让Home中的内容保持原来的位置"><a href="#10-2-让Home中的内容保持原来的位置" class="headerlink" title="10.2. 让Home中的内容保持原来的位置"></a>10.2. 让Home中的内容保持原来的位置</h4><ul><li>离开时, 保存一个位置信息saveY.</li><li>进来时, 将位置设置为原来保存的位置saveY信息即可.<ul><li>注意: 最好回来时, 进行一次refresh()</li></ul></li></ul><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fetch API 教程</title>
      <link href="/%5Bobject%20Object%5D/2021/01/13/Fetch%20API%20%E6%95%99%E7%A8%8B%20%20/"/>
      <url>/%5Bobject%20Object%5D/2021/01/13/Fetch%20API%20%E6%95%99%E7%A8%8B%20%20/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><code>fetch()</code>是 XMLHttpRequest 的升级版，用于在 JavaScript 脚本里面发出 HTTP 请求。</p><p>浏览器原生提供这个对象。本文详细介绍它的用法。</p><p><img src="https://www.wangbase.com/blogimg/asset/202012/bg2020122613.jpg" alt="img"></p><h2 id="一、基本用法"><a href="#一、基本用法" class="headerlink" title="一、基本用法"></a>一、基本用法</h2><p><code>fetch()</code>的功能与 XMLHttpRequest 基本相同，但有三个主要的差异。</p><p>（1）<code>fetch()</code>使用 Promise，不使用回调函数，因此大大简化了写法，写起来更简洁。</p><p>（2）<code>fetch()</code>采用模块化设计，API 分散在多个对象上（Response 对象、Request 对象、Headers 对象），更合理一些；相比之下，XMLHttpRequest 的 API 设计并不是很好，输入、输出、状态都在同一个接口管理，容易写出非常混乱的代码。</p><p>（3）<code>fetch()</code>通过数据流（Stream 对象）处理数据，可以分块读取，有利于提高网站性能表现，减少内存占用，对于请求大文件或者网速慢的场景相当有用。XMLHTTPRequest 对象不支持数据流，所有的数据必须放在缓存里，不支持分块读取，必须等待全部拿到后，再一次性吐出来。</p><p>在用法上，<code>fetch()</code>接受一个 URL 字符串作为参数，默认向该网址发出 GET 请求，返回一个 Promise 对象。它的基本用法如下。</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fetch(url)</span><br><span class="line">  .then(...)</span><br><span class="line">  .catch(...)</span><br></pre></td></tr></table></figure><p>下面是一个例子，从服务器获取 JSON 数据。</p></blockquote><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">&#x27;https://api.github.com/users/ruanyf&#x27;</span>)</span><br><span class="line">  .then(<span class="function"><span class="params">response</span> =&gt;</span> response.json())</span><br><span class="line">  .then(<span class="function"><span class="params">json</span> =&gt;</span> <span class="built_in">console</span>.log(json))</span><br><span class="line">  .catch(<span class="function"><span class="params">err</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;Request Failed&#x27;</span>, err)); </span><br></pre></td></tr></table></figure><p>上面示例中，<code>fetch()</code>接收到的<code>response</code>是一个 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Streams_API">Stream 对象</a>，<code>response.json()</code>是一个异步操作，取出所有内容，并将其转为 JSON 对象。</p></blockquote><p>Promise 可以使用 await 语法改写，使得语义更清晰。</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getJSON</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> url = <span class="string">&#x27;https://api.github.com/users/ruanyf&#x27;</span>;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> response = <span class="keyword">await</span> fetch(url);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> response.json();</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Request Failed&#x27;</span>, error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面示例中，<code>await</code>语句必须放在<code>try...catch</code>里面，这样才能捕捉异步操作中可能发生的错误。</p></blockquote><p>后文都采用<code>await</code>的写法，不使用<code>.then()</code>的写法。</p><h2 id="二、Response-对象：处理-HTTP-回应"><a href="#二、Response-对象：处理-HTTP-回应" class="headerlink" title="二、Response 对象：处理 HTTP 回应"></a>二、Response 对象：处理 HTTP 回应</h2><h3 id="2-1-Response-对象的同步属性"><a href="#2-1-Response-对象的同步属性" class="headerlink" title="2.1 Response 对象的同步属性"></a>2.1 Response 对象的同步属性</h3><p><code>fetch()</code>请求成功以后，得到的是一个 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Response">Response 对象</a>。它对应服务器的 HTTP 回应。</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> response = <span class="keyword">await</span> fetch(url);</span><br></pre></td></tr></table></figure><p>前面说过，Response 包含的数据通过 Stream 接口异步读取，但是它还包含一些同步属性，对应 HTTP 回应的标头信息（Headers），可以立即读取。</p></blockquote><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fetchText</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> response = <span class="keyword">await</span> fetch(<span class="string">&#x27;/readme.txt&#x27;</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(response.status); </span><br><span class="line">  <span class="built_in">console</span>.log(response.statusText);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面示例中，<code>response.status</code>和<code>response.statusText</code>就是 Response 的同步属性，可以立即读取。</p></blockquote><p>标头信息属性有下面这些。</p><p><strong>Response.ok</strong></p><p><code>Response.ok</code>属性返回一个布尔值，表示请求是否成功，<code>true</code>对应 HTTP 请求的状态码 200 到 299，<code>false</code>对应其他的状态码。</p><p><strong>Response.status</strong></p><p><code>Response.status</code>属性返回一个数字，表示 HTTP 回应的状态码（例如200，表示成功请求）。</p><p><strong>Response.statusText</strong></p><p><code>Response.statusText</code>属性返回一个字符串，表示 HTTP 回应的状态信息（例如请求成功以后，服务器返回”OK”）。</p><p><strong>Response.url</strong></p><p><code>Response.url</code>属性返回请求的 URL。如果 URL 存在跳转，该属性返回的是最终 URL。</p><p><strong>Response.type</strong></p><p><code>Response.type</code>属性返回请求的类型。可能的值如下：</p><blockquote><ul><li><code>basic</code>：普通请求，即同源请求。</li><li><code>cors</code>：跨域请求。</li><li><code>error</code>：网络错误，主要用于 Service Worker。</li><li><code>opaque</code>：如果<code>fetch()</code>请求的<code>type</code>属性设为<code>no-cors</code>，就会返回这个值，详见请求部分。表示发出的是简单的跨域请求，类似<code>&lt;form&gt;</code>表单的那种跨域请求。</li><li><code>opaqueredirect</code>：如果<code>fetch()</code>请求的<code>redirect</code>属性设为<code>manual</code>，就会返回这个值，详见请求部分。</li></ul></blockquote><p><strong>Response.redirected</strong></p><p><code>Response.redirected</code>属性返回一个布尔值，表示请求是否发生过跳转。</p><h3 id="2-2-判断请求是否成功"><a href="#2-2-判断请求是否成功" class="headerlink" title="2.2 判断请求是否成功"></a>2.2 判断请求是否成功</h3><p><code>fetch()</code>发出请求以后，有一个很重要的注意点：只有网络错误，或者无法连接时，<code>fetch()</code>才会报错，其他情况都不会报错，而是认为请求成功。</p><p>这就是说，即使服务器返回的状态码是 4xx 或 5xx，<code>fetch()</code>也不会报错（即 Promise 不会变为 <code>rejected</code>状态）。</p><p>只有通过<code>Response.status</code>属性，得到 HTTP 回应的真实状态码，才能判断请求是否成功。请看下面的例子。</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fetchText</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> response = <span class="keyword">await</span> fetch(<span class="string">&#x27;/readme.txt&#x27;</span>);</span><br><span class="line">  <span class="keyword">if</span> (response.status &gt;= <span class="number">200</span> &amp;&amp; response.status &lt; <span class="number">300</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> response.text();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(response.statusText);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面示例中，<code>response.status</code>属性只有等于 2xx （200~299），才能认定请求成功。这里不用考虑网址跳转（状态码为 3xx），因为<code>fetch()</code>会将跳转的状态码自动转为 200。</p></blockquote><p>另一种方法是判断<code>response.ok</code>是否为<code>true</code>。</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (response.ok) &#123;</span><br><span class="line">  <span class="comment">// 请求成功</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// 请求失败</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h3 id="2-3-Response-headers-属性"><a href="#2-3-Response-headers-属性" class="headerlink" title="2.3 Response.headers 属性"></a>2.3 Response.headers 属性</h3><p>Response 对象还有一个<code>Response.headers</code>属性，指向一个 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Headers">Headers 对象</a>，对应 HTTP 回应的所有标头。</p><p>Headers 对象可以使用<code>for...of</code>循环进行遍历。</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> response = <span class="keyword">await</span> fetch(url);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key, value] <span class="keyword">of</span> response.headers) &#123; </span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;key&#125;</span> : <span class="subst">$&#123;value&#125;</span>`</span>);  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key, value] <span class="keyword">of</span> response.headers.entries()) &#123; </span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;key&#125;</span> : <span class="subst">$&#123;value&#125;</span>`</span>);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Headers 对象提供了以下方法，用来操作标头。</p></blockquote><blockquote><ul><li><code>Headers.get()</code>：根据指定的键名，返回键值。</li><li><code>Headers.has()</code>： 返回一个布尔值，表示是否包含某个标头。</li><li><code>Headers.set()</code>：将指定的键名设置为新的键值，如果该键名不存在则会添加。</li><li><code>Headers.append()</code>：添加标头。</li><li><code>Headers.delete()</code>：删除标头。</li><li><code>Headers.keys()</code>：返回一个遍历器，可以依次遍历所有键名。</li><li><code>Headers.values()</code>：返回一个遍历器，可以依次遍历所有键值。</li><li><code>Headers.entries()</code>：返回一个遍历器，可以依次遍历所有键值对（<code>[key, value]</code>）。</li><li><code>Headers.forEach()</code>：依次遍历标头，每个标头都会执行一次参数函数。</li></ul></blockquote><p>上面的有些方法可以修改标头，那是因为继承自 Headers 接口。对于 HTTP 回应来说，修改标头意义不大，况且很多标头是只读的，浏览器不允许修改。</p><p>这些方法中，最常用的是<code>response.headers.get()</code>，用于读取某个标头的值。</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> response =  <span class="keyword">await</span>  fetch(url);  </span><br><span class="line">response.headers.get(<span class="string">&#x27;Content-Type&#x27;</span>)</span><br><span class="line"><span class="comment">// application/json; charset=utf-8</span></span><br></pre></td></tr></table></figure><p><code>Headers.keys()</code>和<code>Headers.values()</code>方法用来分别遍历标头的键名和键值。</p></blockquote><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 键名</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">of</span> myHeaders.keys()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 键值</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> value <span class="keyword">of</span> myHeaders.values()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Headers.forEach()</code>方法也可以遍历所有的键值和键名。</p></blockquote><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> response = <span class="keyword">await</span> fetch(url);</span><br><span class="line">response.headers.forEach(</span><br><span class="line">  (value, key) =&gt; <span class="built_in">console</span>.log(key, <span class="string">&#x27;:&#x27;</span>, value)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></blockquote><h3 id="2-4-读取内容的方法"><a href="#2-4-读取内容的方法" class="headerlink" title="2.4 读取内容的方法"></a>2.4 读取内容的方法</h3><p><code>Response</code>对象根据服务器返回的不同类型的数据，提供了不同的读取方法。</p><blockquote><ul><li><code>response.text()</code>：得到文本字符串。</li><li><code>response.json()</code>：得到 JSON 对象。</li><li><code>response.blob()</code>：得到二进制 Blob 对象。</li><li><code>response.formData()</code>：得到 FormData 表单对象。</li><li><code>response.arrayBuffer()</code>：得到二进制 ArrayBuffer 对象。</li></ul></blockquote><p>上面5个读取方法都是异步的，返回的都是 Promise 对象。必须等到异步操作结束，才能得到服务器返回的完整数据。</p><p><strong>response.text()</strong></p><p><code>response.text()</code>可以用于获取文本数据，比如 HTML 文件。</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> response = <span class="keyword">await</span> fetch(<span class="string">&#x27;/users.html&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> body = <span class="keyword">await</span> response.text();</span><br><span class="line"><span class="built_in">document</span>.body.innerHTML = body</span><br></pre></td></tr></table></figure><p><strong>response.json()</strong></p></blockquote><p><code>response.json()</code>主要用于获取服务器返回的 JSON 数据，前面已经举过例子了。</p><p><strong>response.formData()</strong></p><p><code>response.formData()</code>主要用在 Service Worker 里面，拦截用户提交的表单，修改某些数据以后，再提交给服务器。</p><p><strong>response.blob()</strong></p><p><code>response.blob()</code>用于获取二进制文件。</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> response = <span class="keyword">await</span> fetch(<span class="string">&#x27;flower.jpg&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> myBlob = <span class="keyword">await</span> response.blob();</span><br><span class="line"><span class="keyword">const</span> objectURL = URL.createObjectURL(myBlob);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> myImage = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;img&#x27;</span>);</span><br><span class="line">myImage.src = objectURL;</span><br></pre></td></tr></table></figure><p>上面示例读取图片文件<code>flower.jpg</code>，显示在网页上。</p></blockquote><p><strong>response.arrayBuffer()</strong></p><p><code>response.arrayBuffer()</code>主要用于获取流媒体文件。</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> audioCtx = <span class="keyword">new</span> <span class="built_in">window</span>.AudioContext();</span><br><span class="line"><span class="keyword">const</span> source = audioCtx.createBufferSource();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> response = <span class="keyword">await</span> fetch(<span class="string">&#x27;song.ogg&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> buffer = <span class="keyword">await</span> response.arrayBuffer();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> decodeData = <span class="keyword">await</span> audioCtx.decodeAudioData(buffer);</span><br><span class="line">source.buffer = buffer;</span><br><span class="line">source.connect(audioCtx.destination);</span><br><span class="line">source.loop = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><p>上面示例是<code>response.arrayBuffer()</code>获取音频文件<code>song.ogg</code>，然后在线播放的例子。</p></blockquote><h3 id="2-5-Response-clone"><a href="#2-5-Response-clone" class="headerlink" title="2.5 Response.clone()"></a>2.5 Response.clone()</h3><p>Stream 对象只能读取一次，读取完就没了。这意味着，前一节的五个读取方法，只能使用一个，否则会报错。</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> text =  <span class="keyword">await</span> response.text();</span><br><span class="line"><span class="keyword">let</span> json =  <span class="keyword">await</span> response.json();  <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure><p>上面示例先使用了<code>response.text()</code>，就把 Stream 读完了。后面再调用<code>response.json()</code>，就没有内容可读了，所以报错。</p></blockquote><p>Response 对象提供<code>Response.clone()</code>方法，创建<code>Response</code>对象的副本，实现多次读取。</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> response1 = <span class="keyword">await</span> fetch(<span class="string">&#x27;flowers.jpg&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> response2 = response1.clone();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> myBlob1 = <span class="keyword">await</span> response1.blob();</span><br><span class="line"><span class="keyword">const</span> myBlob2 = <span class="keyword">await</span> response2.blob();</span><br><span class="line"></span><br><span class="line">image1.src = URL.createObjectURL(myBlob1);</span><br><span class="line">image2.src = URL.createObjectURL(myBlob2);</span><br></pre></td></tr></table></figure><p>上面示例中，<code>response.clone()</code>复制了一份 Response 对象，然后将同一张图片读取了两次。</p></blockquote><p>Response 对象还有一个<code>Response.redirect()</code>方法，用于将 Response 结果重定向到指定的 URL。该方法一般只用在 Service Worker 里面，这里就不介绍了。</p><h3 id="2-6-Response-body-属性"><a href="#2-6-Response-body-属性" class="headerlink" title="2.6 Response.body 属性"></a>2.6 Response.body 属性</h3><p><code>Response.body</code>属性是 Response 对象暴露出的底层接口，返回一个 ReadableStream 对象，供用户操作。</p><p>它可以用来分块读取内容，应用之一就是显示下载的进度。</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> response = <span class="keyword">await</span> fetch(<span class="string">&#x27;flower.jpg&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> reader = response.body.getReader();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;done, value&#125; = <span class="keyword">await</span> reader.read();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (done) &#123;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`Received <span class="subst">$&#123;value.length&#125;</span> bytes`</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面示例中，<code>response.body.getReader()</code>方法返回一个遍历器。这个遍历器的<code>read()</code>方法每次返回一个对象，表示本次读取的内容块。</p></blockquote><p>这个对象的<code>done</code>属性是一个布尔值，用来判断有没有读完；<code>value</code>属性是一个 arrayBuffer 数组，表示内容块的内容，而<code>value.length</code>属性是当前块的大小。</p><h2 id="三、fetch-的第二个参数：定制-HTTP-请求"><a href="#三、fetch-的第二个参数：定制-HTTP-请求" class="headerlink" title="三、fetch()的第二个参数：定制 HTTP 请求"></a>三、<code>fetch()</code>的第二个参数：定制 HTTP 请求</h2><p><code>fetch()</code>的第一个参数是 URL，还可以接受第二个参数，作为配置对象，定制发出的 HTTP 请求。</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fetch(url, optionObj)</span><br></pre></td></tr></table></figure><p>上面命令的<code>optionObj</code>就是第二个参数。</p></blockquote><p>HTTP 请求的方法、标头、数据体都在这个对象里面设置。下面是一些示例。</p><p><strong>（1）POST 请求</strong></p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> response = <span class="keyword">await</span> fetch(url, &#123;</span><br><span class="line">  method: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">  headers: &#123;</span><br><span class="line">    <span class="string">&quot;Content-type&quot;</span>: <span class="string">&quot;application/x-www-form-urlencoded; charset=UTF-8&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  body: <span class="string">&#x27;foo=bar&amp;lorem=ipsum&#x27;</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> json = <span class="keyword">await</span> response.json();</span><br></pre></td></tr></table></figure><p>上面示例中，配置对象用到了三个属性。</p></blockquote><blockquote><ul><li><code>method</code>：HTTP 请求的方法，<code>POST</code>、<code>DELETE</code>、<code>PUT</code>都在这个属性设置。</li><li><code>headers</code>：一个对象，用来定制 HTTP 请求的标头。</li><li><code>body</code>：POST 请求的数据体。</li></ul></blockquote><p>注意，有些标头不能通过<code>headers</code>属性设置，比如<code>Content-Length</code>、<code>Cookie</code>、<code>Host</code>等等。它们是由浏览器自动生成，无法修改。</p><p><strong>（2）提交 JSON 数据</strong></p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user =  &#123; <span class="attr">name</span>:  <span class="string">&#x27;John&#x27;</span>, <span class="attr">surname</span>:  <span class="string">&#x27;Smith&#x27;</span>  &#125;;</span><br><span class="line"><span class="keyword">const</span> response = <span class="keyword">await</span> fetch(<span class="string">&#x27;/article/fetch/post/user&#x27;</span>, &#123;</span><br><span class="line">  method: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">  headers: &#123;</span><br><span class="line">   <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json;charset=utf-8&#x27;</span></span><br><span class="line">  &#125;, </span><br><span class="line">  body: <span class="built_in">JSON</span>.stringify(user) </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>上面示例中，标头<code>Content-Type</code>要设成<code>&#39;application/json;charset=utf-8&#39;</code>。因为默认发送的是纯文本，<code>Content-Type</code>的默认值是<code>&#39;text/plain;charset=UTF-8&#39;</code>。</p></blockquote><p><strong>（3）提交表单</strong></p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> form = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;form&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> response = <span class="keyword">await</span> fetch(<span class="string">&#x27;/users&#x27;</span>, &#123;</span><br><span class="line">  method: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">  body: <span class="keyword">new</span> FormData(form)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>（4）文件上传</strong></p></blockquote><p>如果表单里面有文件选择器，可以用前一个例子的写法，上传的文件包含在整个表单里面，一起提交。</p><p>另一种方法是用脚本添加文件，构造出一个表单，进行上传，请看下面的例子。</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> input = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;input[type=&quot;file&quot;]&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> data = <span class="keyword">new</span> FormData();</span><br><span class="line">data.append(<span class="string">&#x27;file&#x27;</span>, input.files[<span class="number">0</span>]);</span><br><span class="line">data.append(<span class="string">&#x27;user&#x27;</span>, <span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line"></span><br><span class="line">fetch(<span class="string">&#x27;/avatars&#x27;</span>, &#123;</span><br><span class="line">  method: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">  body: data</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>上传二进制文件时，不用修改标头的<code>Content-Type</code>，浏览器会自动设置。</p></blockquote><p><strong>（5）直接上传二进制数据</strong></p><p><code>fetch()</code>也可以直接上传二进制数据，将 Blob 或 arrayBuffer 数据放在<code>body</code>属性里面。</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> blob = <span class="keyword">await</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span>   </span><br><span class="line">  canvasElem.toBlob(resolve,  <span class="string">&#x27;image/png&#x27;</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> response = <span class="keyword">await</span> fetch(<span class="string">&#x27;/article/fetch/post/image&#x27;</span>, &#123;</span><br><span class="line">  method:  <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">  body: blob</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></blockquote><h2 id="四、fetch-配置对象的完整-API"><a href="#四、fetch-配置对象的完整-API" class="headerlink" title="四、fetch()配置对象的完整 API"></a>四、<code>fetch()</code>配置对象的完整 API</h2><p><code>fetch()</code>第二个参数的完整 API 如下。</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> response = fetch(url, &#123;</span><br><span class="line">  method: <span class="string">&quot;GET&quot;</span>,</span><br><span class="line">  headers: &#123;</span><br><span class="line">    <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;text/plain;charset=UTF-8&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  body: <span class="literal">undefined</span>,</span><br><span class="line">  referrer: <span class="string">&quot;about:client&quot;</span>,</span><br><span class="line">  referrerPolicy: <span class="string">&quot;no-referrer-when-downgrade&quot;</span>,</span><br><span class="line">  mode: <span class="string">&quot;cors&quot;</span>, </span><br><span class="line">  credentials: <span class="string">&quot;same-origin&quot;</span>,</span><br><span class="line">  cache: <span class="string">&quot;default&quot;</span>,</span><br><span class="line">  redirect: <span class="string">&quot;follow&quot;</span>,</span><br><span class="line">  integrity: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  keepalive: <span class="literal">false</span>,</span><br><span class="line">  signal: <span class="literal">undefined</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>fetch()</code>请求的底层用的是 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Request/Request">Request() 对象</a>的接口，参数完全一样，因此上面的 API 也是<code>Request()</code>的 API。</p></blockquote><p>这些属性里面，<code>headers</code>、<code>body</code>、<code>method</code>前面已经给过示例了，下面是其他属性的介绍。</p><p><strong>cache</strong></p><p><code>cache</code>属性指定如何处理缓存。可能的取值如下：</p><blockquote><ul><li><code>default</code>：默认值，先在缓存里面寻找匹配的请求。</li><li><code>no-store</code>：直接请求远程服务器，并且不更新缓存。</li><li><code>reload</code>：直接请求远程服务器，并且更新缓存。</li><li><code>no-cache</code>：将服务器资源跟本地缓存进行比较，有新的版本才使用服务器资源，否则使用缓存。</li><li><code>force-cache</code>：缓存优先，只有不存在缓存的情况下，才请求远程服务器。</li><li><code>only-if-cached</code>：只检查缓存，如果缓存里面不存在，将返回504错误。</li></ul></blockquote><p><strong>mode</strong></p><p><code>mode</code>属性指定请求的模式。可能的取值如下：</p><blockquote><ul><li><code>cors</code>：默认值，允许跨域请求。</li><li><code>same-origin</code>：只允许同源请求。</li><li><code>no-cors</code>：请求方法只限于 GET、POST 和 HEAD，并且只能使用有限的几个简单标头，不能添加跨域的复杂标头，相当于提交表单所能发出的请求。</li></ul></blockquote><p><strong>credentials</strong></p><p><code>credentials</code>属性指定是否发送 Cookie。可能的取值如下：</p><blockquote><ul><li><code>same-origin</code>：默认值，同源请求时发送 Cookie，跨域请求时不发送。</li><li><code>include</code>：不管同源请求，还是跨域请求，一律发送 Cookie。</li><li><code>omit</code>：一律不发送。</li></ul></blockquote><p>跨域请求发送 Cookie，需要将<code>credentials</code>属性设为<code>include</code>。</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">&#x27;http://another.com&#x27;</span>, &#123;</span><br><span class="line">  credentials: <span class="string">&quot;include&quot;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>signal</strong></p></blockquote><p><code>signal</code>属性指定一个 AbortSignal 实例，用于取消<code>fetch()</code>请求，详见下一节。</p><p><strong>keepalive</strong></p><p><code>keepalive</code>属性用于页面卸载时，告诉浏览器在后台保持连接，继续发送数据。</p><p>一个典型的场景就是，用户离开网页时，脚本向服务器提交一些用户行为的统计信息。这时，如果不用<code>keepalive</code>属性，数据可能无法发送，因为浏览器已经把页面卸载了。</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onunload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  fetch(<span class="string">&#x27;/analytics&#x27;</span>, &#123;</span><br><span class="line">    method: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">    body: <span class="string">&quot;statistics&quot;</span>,</span><br><span class="line">    keepalive: <span class="literal">true</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>redirect</strong></p></blockquote><p><code>redirect</code>属性指定 HTTP 跳转的处理方法。可能的取值如下：</p><blockquote><ul><li><code>follow</code>：默认值，<code>fetch()</code>跟随 HTTP 跳转。</li><li><code>error</code>：如果发生跳转，<code>fetch()</code>就报错。</li><li><code>manual</code>：<code>fetch()</code>不跟随 HTTP 跳转，但是<code>response.url</code>属性会指向新的 URL，<code>response.redirected</code>属性会变为<code>true</code>，由开发者自己决定后续如何处理跳转。</li></ul></blockquote><p><strong>integrity</strong></p><p><code>integrity</code>属性指定一个哈希值，用于检查 HTTP 回应传回的数据是否等于这个预先设定的哈希值。</p><p>比如，下载文件时，检查文件的 SHA-256 哈希值是否相符，确保没有被篡改。</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">&#x27;http://site.com/file&#x27;</span>, &#123;</span><br><span class="line">  integrity: <span class="string">&#x27;sha256-abcdef&#x27;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>referrer</strong></p></blockquote><p><code>referrer</code>属性用于设定<code>fetch()</code>请求的<code>referer</code>标头。</p><p>这个属性可以为任意字符串，也可以设为空字符串（即不发送<code>referer</code>标头）。</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">&#x27;/page&#x27;</span>, &#123;</span><br><span class="line">  referrer: <span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>referrerPolicy</strong></p></blockquote><p><code>referrerPolicy</code>属性用于设定<code>Referer</code>标头的规则。可能的取值如下：</p><blockquote><ul><li><code>no-referrer-when-downgrade</code>：默认值，总是发送<code>Referer</code>标头，除非从 HTTPS 页面请求 HTTP 资源时不发送。</li><li><code>no-referrer</code>：不发送<code>Referer</code>标头。</li><li><code>origin</code>：<code>Referer</code>标头只包含域名，不包含完整的路径。</li><li><code>origin-when-cross-origin</code>：同源请求<code>Referer</code>标头包含完整的路径，跨域请求只包含域名。</li><li><code>same-origin</code>：跨域请求不发送<code>Referer</code>，同源请求发送。</li><li><code>strict-origin</code>：<code>Referer</code>标头只包含域名，HTTPS 页面请求 HTTP 资源时不发送<code>Referer</code>标头。</li><li><code>strict-origin-when-cross-origin</code>：同源请求时<code>Referer</code>标头包含完整路径，跨域请求时只包含域名，HTTPS 页面请求 HTTP 资源时不发送该标头。</li><li><code>unsafe-url</code>：不管什么情况，总是发送<code>Referer</code>标头。</li></ul></blockquote><h2 id="五、取消fetch-请求"><a href="#五、取消fetch-请求" class="headerlink" title="五、取消fetch()请求"></a>五、取消<code>fetch()</code>请求</h2><p><code>fetch()</code>请求发送以后，如果中途想要取消，需要使用<code>AbortController</code>对象。</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> controller = <span class="keyword">new</span> AbortController();</span><br><span class="line"><span class="keyword">let</span> signal = controller.signal;</span><br><span class="line"></span><br><span class="line">fetch(url, &#123;</span><br><span class="line">  signal: controller.signal</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">signal.addEventListener(<span class="string">&#x27;abort&#x27;</span>,</span><br><span class="line">  () =&gt; <span class="built_in">console</span>.log(<span class="string">&#x27;abort!&#x27;</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">controller.abort(); <span class="comment">// 取消</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(signal.aborted); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>上面示例中，首先新建 AbortController 实例，然后发送<code>fetch()</code>请求，配置对象的<code>signal</code>属性必须指定接收 AbortController 实例发送的信号<code>controller.signal</code>。</p></blockquote><p><code>controller.abort()</code>方法用于发出取消信号。这时会触发<code>abort</code>事件，这个事件可以监听，也可以通过<code>controller.signal.aborted</code>属性判断取消信号是否已经发出。</p><p>下面是一个1秒后自动取消请求的例子。</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> controller = <span class="keyword">new</span> AbortController();</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> controller.abort(), <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> response = <span class="keyword">await</span> fetch(<span class="string">&#x27;/long-operation&#x27;</span>, &#123;</span><br><span class="line">    signal: controller.signal</span><br><span class="line">  &#125;);</span><br><span class="line">&#125; <span class="keyword">catch</span>(err) &#123;</span><br><span class="line">  <span class="keyword">if</span> (err.name == <span class="string">&#x27;AbortError&#x27;</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Aborted!&#x27;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> err;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h2 id="六、参考链接"><a href="#六、参考链接" class="headerlink" title="六、参考链接"></a>六、参考链接</h2><ul><li><a href="https://javascript.info/fetch">Network requests: Fetch</a></li><li><a href="https://github.com/node-fetch/node-fetch">node-fetch</a></li><li><a href="https://developers.google.com/web/updates/2015/03/introduction-to-fetch">Introduction to fetch()</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch">Using Fetch</a></li><li><a href="https://developerhowto.com/2019/09/14/javascript-fetch-api/">Javascript Fetch API: The XMLHttpRequest evolution</a></li></ul><p>原作者： <a href="http://www.ruanyifeng.com/">阮一峰</a><br>发表日期： <a href="http://www.ruanyifeng.com/blog/2020/12/">2020年12月28日</a><br>（完）</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【笔记】盒模型及应用</title>
      <link href="/%5Bobject%20Object%5D/2021/01/08/%E7%9B%92%E6%A8%A1%E5%9E%8B%E5%BA%94%E7%94%A8/"/>
      <url>/%5Bobject%20Object%5D/2021/01/08/%E7%9B%92%E6%A8%A1%E5%9E%8B%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="盒模型"><a href="#盒模型" class="headerlink" title="盒模型"></a>盒模型</h1><p>box：盒子，每个元素在页面中都会生成一个矩形区域（盒子）</p><p>盒子类型：</p><ol><li>行盒，display等于inline的元素</li><li>块盒，display等于block的元素</li></ol><p>行盒在页面中不换行、块盒独占一行</p><p>display默认值为inline</p><p>浏览器默认样式表设置的块盒：容器元素、h1~h6、p</p><p>常见的行盒：span、a、img、video、audio</p><h2 id="盒子的组成部分"><a href="#盒子的组成部分" class="headerlink" title="盒子的组成部分"></a>盒子的组成部分</h2><p>无论是行盒、还是块盒，都由下面几个部分组成，从内到外分别是：</p><ol><li>内容  content</li></ol><p>width、height，设置的是盒子内容的宽高</p><p>内容部分通常叫做整个盒子的<strong>内容盒 content-box</strong></p><ol start="2"><li>填充(内边距)  padding</li></ol><p>盒子边框到盒子内容的距离</p><p>padding-left、padding-right、padding-top、padding-bottom</p><p>padding: 简写属性</p><p>padding: 上 右 下 左</p><p>填充区+内容区 = <strong>填充盒 padding-box</strong></p><ol start="3"><li>边框  border</li></ol><p>边框 = 边框样式 + 边框宽度 + 边框颜色</p><p>边框样式：border-style<br>边框宽度：border-width<br>边框颜色：border-color</p><p>边框+填充区+内容区 = <strong>边框盒 border-box</strong></p><ol start="4"><li>外边距  margin</li></ol><p>边框到其他盒子的距离</p><p>margin-top、margin-left、margin-right、margin-bottom</p><p>速写属性margin</p><h1 id="盒模型应用"><a href="#盒模型应用" class="headerlink" title="盒模型应用"></a>盒模型应用</h1><h2 id="改变宽高范围"><a href="#改变宽高范围" class="headerlink" title="改变宽高范围"></a>改变宽高范围</h2><p>默认情况下，width 和 height 设置的是内容盒宽高。</p><blockquote><p>页面重构师：将psd文件（设计稿）制作为静态页面</p></blockquote><p>衡量设计稿尺寸的时候，往往使用的是边框盒，但设置width和height，则设置的是内容盒</p><ol><li>精确计算</li><li>CSS3：box-sizing</li></ol><h2 id="改变背景覆盖范围"><a href="#改变背景覆盖范围" class="headerlink" title="改变背景覆盖范围"></a>改变背景覆盖范围</h2><p>默认情况下，背景覆盖边框盒</p><p>可以通过background-clip进行修改</p><h2 id="溢出处理"><a href="#溢出处理" class="headerlink" title="溢出处理"></a>溢出处理</h2><p>overflow，控制内容溢出边框盒后的处理方式</p><h2 id="断词规则"><a href="#断词规则" class="headerlink" title="断词规则"></a>断词规则</h2><p>word-break，会影响文字在什么位置被截断换行</p><p>normal：普通。CJK字符（文字位置截断），非CJK字符（单词位置截断）</p><p>break-all：截断所有。所有字符都在文字处截断</p><p>keep-all：保持所有。所有文字都在单词之间截断</p><h2 id="空白处理"><a href="#空白处理" class="headerlink" title="空白处理"></a>空白处理</h2><p>white-space: nowrap</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记录几段常用js代码的实现</title>
      <link href="/%5Bobject%20Object%5D/2021/01/08/%E8%AE%B0%E5%BD%95%E5%87%A0%E6%AE%B5%E5%B8%B8%E7%94%A8js%E4%BB%A3%E7%A0%81%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
      <url>/%5Bobject%20Object%5D/2021/01/08/%E8%AE%B0%E5%BD%95%E5%87%A0%E6%AE%B5%E5%B8%B8%E7%94%A8js%E4%BB%A3%E7%A0%81%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>记录几段常用的js代码实现，掌握了实现原理，就对这些用法会有更加深入的理解。</p><h2 id="一、深拷贝"><a href="#一、深拷贝" class="headerlink" title="一、深拷贝"></a>一、深拷贝</h2><p>深拷贝，<a href="https://www.haorooms.com/post/js_deepcompare">深比较</a>，之前有文章写过，请看：<a href="https://www.haorooms.com/post/js_copy_sq">https://www.haorooms.com/post/js_copy_sq</a></p><p>今天的深copy考虑了Symbol属性，代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">const cloneDeep1 &#x3D; (target, hash &#x3D; new WeakMap()) &#x3D;&gt; &#123;</span><br><span class="line">  &#x2F;&#x2F; 对于传入参数处理</span><br><span class="line">  if (typeof target !&#x3D;&#x3D; &#39;object&#39; || target &#x3D;&#x3D;&#x3D; null) &#123;</span><br><span class="line">    return target;</span><br><span class="line">  &#125;</span><br><span class="line">  &#x2F;&#x2F; 哈希表中存在直接返回</span><br><span class="line">  if (hash.has(target)) return hash.get(target);</span><br><span class="line"></span><br><span class="line">  const cloneTarget &#x3D; Array.isArray(target) ? [] : &#123;&#125;;</span><br><span class="line">  hash.set(target, cloneTarget);</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 针对Symbol属性</span><br><span class="line">  const symKeys &#x3D; Object.getOwnPropertySymbols(target);</span><br><span class="line">  if (symKeys.length) &#123;</span><br><span class="line">    symKeys.forEach(symKey &#x3D;&gt; &#123;</span><br><span class="line">      if (typeof target[symKey] &#x3D;&#x3D;&#x3D; &#39;object&#39; &amp;&amp; target[symKey] !&#x3D;&#x3D; null) &#123;</span><br><span class="line">        cloneTarget[symKey] &#x3D; cloneDeep1(target[symKey]);</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        cloneTarget[symKey] &#x3D; target[symKey];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  for (const i in target) &#123;</span><br><span class="line">    if (Object.prototype.hasOwnProperty.call(target, i)) &#123;</span><br><span class="line">      cloneTarget[i] &#x3D;</span><br><span class="line">        typeof target[i] &#x3D;&#x3D;&#x3D; &#39;object&#39; &amp;&amp; target[i] !&#x3D;&#x3D; null</span><br><span class="line">        ? cloneDeep1(target[i], hash)</span><br><span class="line">        : target[i];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return cloneTarget;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、Promise实现"><a href="#二、Promise实现" class="headerlink" title="二、Promise实现"></a>二、Promise实现</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 模拟实现Promise</span><br><span class="line">&#x2F;&#x2F; Promise利用三大手段解决回调地狱：</span><br><span class="line">&#x2F;&#x2F; 1. 回调函数延迟绑定</span><br><span class="line">&#x2F;&#x2F; 2. 返回值穿透</span><br><span class="line">&#x2F;&#x2F; 3. 错误冒泡</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 定义三种状态</span><br><span class="line">const PENDING &#x3D; &#39;PENDING&#39;;      &#x2F;&#x2F; 进行中</span><br><span class="line">const FULFILLED &#x3D; &#39;FULFILLED&#39;;  &#x2F;&#x2F; 已成功</span><br><span class="line">const REJECTED &#x3D; &#39;REJECTED&#39;;    &#x2F;&#x2F; 已失败</span><br><span class="line"></span><br><span class="line">class Promise &#123;</span><br><span class="line">  constructor(exector) &#123;</span><br><span class="line">    &#x2F;&#x2F; 初始化状态</span><br><span class="line">    this.status &#x3D; PENDING;</span><br><span class="line">    &#x2F;&#x2F; 将成功、失败结果放在this上，便于then、catch访问</span><br><span class="line">    this.value &#x3D; undefined;</span><br><span class="line">    this.reason &#x3D; undefined;</span><br><span class="line">    &#x2F;&#x2F; 成功态回调函数队列</span><br><span class="line">    this.onFulfilledCallbacks &#x3D; [];</span><br><span class="line">    &#x2F;&#x2F; 失败态回调函数队列</span><br><span class="line">    this.onRejectedCallbacks &#x3D; [];</span><br><span class="line"></span><br><span class="line">    const resolve &#x3D; value &#x3D;&gt; &#123;</span><br><span class="line">      &#x2F;&#x2F; 只有进行中状态才能更改状态</span><br><span class="line">      if (this.status &#x3D;&#x3D;&#x3D; PENDING) &#123;</span><br><span class="line">        this.status &#x3D; FULFILLED;</span><br><span class="line">        this.value &#x3D; value;</span><br><span class="line">        &#x2F;&#x2F; 成功态函数依次执行</span><br><span class="line">        this.onFulfilledCallbacks.forEach(fn &#x3D;&gt; fn(this.value));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    const reject &#x3D; reason &#x3D;&gt; &#123;</span><br><span class="line">      &#x2F;&#x2F; 只有进行中状态才能更改状态</span><br><span class="line">      if (this.status &#x3D;&#x3D;&#x3D; PENDING) &#123;</span><br><span class="line">        this.status &#x3D; REJECTED;</span><br><span class="line">        this.reason &#x3D; reason;</span><br><span class="line">        &#x2F;&#x2F; 失败态函数依次执行</span><br><span class="line">        this.onRejectedCallbacks.forEach(fn &#x3D;&gt; fn(this.reason))</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    try &#123;</span><br><span class="line">      &#x2F;&#x2F; 立即执行executor</span><br><span class="line">      &#x2F;&#x2F; 把内部的resolve和reject传入executor，用户可调用resolve和reject</span><br><span class="line">      exector(resolve, reject);</span><br><span class="line">    &#125; catch(e) &#123;</span><br><span class="line">      &#x2F;&#x2F; executor执行出错，将错误内容reject抛出去</span><br><span class="line">      reject(e);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  then(onFulfilled, onRejected) &#123;</span><br><span class="line">    onFulfilled &#x3D; typeof onFulfilled &#x3D;&#x3D;&#x3D; &#39;function&#39; ? onFulfilled : value &#x3D;&gt; value;</span><br><span class="line">    onRejected &#x3D; typeof onRejected &#x3D;&#x3D;&#x3D; &#39;function&#39;? onRejected :</span><br><span class="line">      reason &#x3D;&gt; &#123; throw new Error(reason instanceof Error ? reason.message : reason) &#125;</span><br><span class="line">    &#x2F;&#x2F; 保存this</span><br><span class="line">    const self &#x3D; this;</span><br><span class="line">    return new Promise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class="line">      if (self.status &#x3D;&#x3D;&#x3D; PENDING) &#123;</span><br><span class="line">        self.onFulfilledCallbacks.push(() &#x3D;&gt; &#123;</span><br><span class="line">          &#x2F;&#x2F; try捕获错误</span><br><span class="line">          try &#123;</span><br><span class="line">            &#x2F;&#x2F; 模拟微任务</span><br><span class="line">            setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">              const result &#x3D; onFulfilled(self.value);</span><br><span class="line">              &#x2F;&#x2F; 分两种情况：</span><br><span class="line">              &#x2F;&#x2F; 1. 回调函数返回值是Promise，执行then操作</span><br><span class="line">              &#x2F;&#x2F; 2. 如果不是Promise，调用新Promise的resolve函数</span><br><span class="line">              result instanceof Promise ? result.then(resolve, reject) : resolve(result);</span><br><span class="line">            &#125;)</span><br><span class="line">          &#125; catch(e) &#123;</span><br><span class="line">            reject(e);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        self.onRejectedCallbacks.push(() &#x3D;&gt; &#123;</span><br><span class="line">          &#x2F;&#x2F; 以下同理</span><br><span class="line">          try &#123;</span><br><span class="line">            setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">              const result &#x3D; onRejected(self.reason);</span><br><span class="line">              &#x2F;&#x2F; 不同点：此时是reject</span><br><span class="line">              result instanceof Promise ? result.then(resolve, reject) : reject(result);</span><br><span class="line">            &#125;)</span><br><span class="line">          &#125; catch(e) &#123;</span><br><span class="line">            reject(e);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125; else if (self.status &#x3D;&#x3D;&#x3D; FULFILLED) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">          setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">            const result &#x3D; onFulfilled(self.value);</span><br><span class="line">            result instanceof Promise ? result.then(resolve, reject) : resolve(result);</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125; catch(e) &#123;</span><br><span class="line">          reject(e);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; else if (self.status &#x3D;&#x3D;&#x3D; REJECTED) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">          setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">            const result &#x3D; onRejected(self.reason);</span><br><span class="line">            result instanceof Promise ? result.then(resolve, reject) : resolve(result);</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125; catch(e) &#123;</span><br><span class="line">          reject(e);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  catch(onRejected) &#123;</span><br><span class="line">    return this.then(null, onRejected);</span><br><span class="line">  &#125;</span><br><span class="line">  static resolve(value) &#123;</span><br><span class="line">    if (value instanceof Promise) &#123;</span><br><span class="line">      &#x2F;&#x2F; 如果是Promise实例，直接返回</span><br><span class="line">      return value;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      &#x2F;&#x2F; 如果不是Promise实例，返回一个新的Promise对象，状态为FULFILLED</span><br><span class="line">      return new Promise((resolve, reject) &#x3D;&gt; resolve(value));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  static reject(reason) &#123;</span><br><span class="line">    return new Promise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class="line">      reject(reason);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  static all(promiseArr) &#123;</span><br><span class="line">    const len &#x3D; promiseArr.length;</span><br><span class="line">    const values &#x3D; new Array(len);</span><br><span class="line">    &#x2F;&#x2F; 记录已经成功执行的promise个数</span><br><span class="line">    let count &#x3D; 0;</span><br><span class="line">    return new Promise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class="line">      for (let i &#x3D; 0; i &lt; len; i++) &#123;</span><br><span class="line">        &#x2F;&#x2F; Promise.resolve()处理，确保每一个都是promise实例</span><br><span class="line">        Promise.resolve(promiseArr[i]).then(</span><br><span class="line">          val &#x3D;&gt; &#123;</span><br><span class="line">            values[i] &#x3D; val;</span><br><span class="line">            count++;</span><br><span class="line">            &#x2F;&#x2F; 如果全部执行完，返回promise的状态就可以改变了</span><br><span class="line">            if (count &#x3D;&#x3D;&#x3D; len) resolve(values);</span><br><span class="line">          &#125;,</span><br><span class="line">          err &#x3D;&gt; reject(err),</span><br><span class="line">        );</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  static race(promiseArr) &#123;</span><br><span class="line">    return new Promise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class="line">      promiseArr.forEach(p &#x3D;&gt; &#123;</span><br><span class="line">        Promise.resolve(p).then(</span><br><span class="line">          val &#x3D;&gt; resolve(val),</span><br><span class="line">          err &#x3D;&gt; reject(err),</span><br><span class="line">        )</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、Promise并行限制"><a href="#三、Promise并行限制" class="headerlink" title="三、Promise并行限制"></a>三、Promise并行限制</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">class Scheduler &#123;</span><br><span class="line">  constructor() &#123;</span><br><span class="line">    this.queue &#x3D; [];</span><br><span class="line">    this.maxCount &#x3D; 2;</span><br><span class="line">    this.runCounts &#x3D; 0;</span><br><span class="line">  &#125;</span><br><span class="line">  add(promiseCreator) &#123;</span><br><span class="line">    this.queue.push(promiseCreator);</span><br><span class="line">  &#125;</span><br><span class="line">  taskStart() &#123;</span><br><span class="line">    for (let i &#x3D; 0; i &lt; this.maxCount; i++) &#123;</span><br><span class="line">      this.request();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  request() &#123;</span><br><span class="line">    if (!this.queue || !this.queue.length || this.runCounts &gt;&#x3D; this.maxCount) &#123;</span><br><span class="line">      return;</span><br><span class="line">    &#125;</span><br><span class="line">    this.runCounts++;</span><br><span class="line"></span><br><span class="line">    this.queue.shift()().then(() &#x3D;&gt; &#123;</span><br><span class="line">      this.runCounts--;</span><br><span class="line">      this.request();</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const timeout &#x3D; time &#x3D;&gt; new Promise(resolve &#x3D;&gt; &#123;</span><br><span class="line">  setTimeout(resolve, time);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">const scheduler &#x3D; new Scheduler();</span><br><span class="line"></span><br><span class="line">const addTask &#x3D; (time,order) &#x3D;&gt; &#123;</span><br><span class="line">  scheduler.add(() &#x3D;&gt; timeout(time).then(()&#x3D;&gt;console.log(order)))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">addTask(1000, &#39;1&#39;);</span><br><span class="line">addTask(500, &#39;2&#39;);</span><br><span class="line">addTask(300, &#39;3&#39;);</span><br><span class="line">addTask(400, &#39;4&#39;);</span><br><span class="line">scheduler.taskStart()</span><br><span class="line">&#x2F;&#x2F; 2</span><br><span class="line">&#x2F;&#x2F; 3</span><br><span class="line">&#x2F;&#x2F; 1</span><br><span class="line">&#x2F;&#x2F; 4</span><br></pre></td></tr></table></figure><h2 id="四、JSONP的实现"><a href="#四、JSONP的实现" class="headerlink" title="四、JSONP的实现"></a>四、JSONP的实现</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">const jsonp &#x3D; (&#123; url, params, callbackName &#125;) &#x3D;&gt; &#123;</span><br><span class="line">  const generateUrl &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">    let dataSrc &#x3D; &#39;&#39;;</span><br><span class="line">    for (let key in params) &#123;</span><br><span class="line">      if (Object.prototype.hasOwnProperty.call(params, key)) &#123;</span><br><span class="line">        dataSrc +&#x3D; &#96;$&#123;key&#125;&#x3D;$&#123;params[key]&#125;&amp;&#96;;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dataSrc +&#x3D; &#96;callback&#x3D;$&#123;callbackName&#125;&#96;;</span><br><span class="line">    return &#96;$&#123;url&#125;?$&#123;dataSrc&#125;&#96;;</span><br><span class="line">  &#125;</span><br><span class="line">  return new Promise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class="line">    const scriptEle &#x3D; document.createElement(&#39;script&#39;);</span><br><span class="line">    scriptEle.src &#x3D; generateUrl();</span><br><span class="line">    document.body.appendChild(scriptEle);</span><br><span class="line">    window[callbackName] &#x3D; data &#x3D;&gt; &#123;</span><br><span class="line">      resolve(data);</span><br><span class="line">      document.removeChild(scriptEle);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="五、event模块实现"><a href="#五、event模块实现" class="headerlink" title="五、event模块实现"></a>五、event模块实现</h2><p>实现node中回调函数的机制，node中回调函数其实是内部使用了观察者模式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">function EventEmitter() &#123;</span><br><span class="line">  this.events &#x3D; new Map();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 需要实现的一些方法：</span><br><span class="line">&#x2F;&#x2F; addListener、removeListener、once、removeAllListeners、emit</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 模拟实现addlistener方法</span><br><span class="line">const wrapCallback &#x3D; (fn, once &#x3D; false) &#x3D;&gt; (&#123; callback: fn, once &#125;);</span><br><span class="line">EventEmitter.prototype.addListener &#x3D; function(type, fn, once &#x3D; false) &#123;</span><br><span class="line">  const hanlder &#x3D; this.events.get(type);</span><br><span class="line">  if (!hanlder) &#123;</span><br><span class="line">    &#x2F;&#x2F; 没有type绑定事件</span><br><span class="line">    this.events.set(type, wrapCallback(fn, once));</span><br><span class="line">  &#125; else if (hanlder &amp;&amp; typeof hanlder.callback &#x3D;&#x3D;&#x3D; &#39;function&#39;) &#123;</span><br><span class="line">    &#x2F;&#x2F; 目前type事件只有一个回调</span><br><span class="line">    this.events.set(type, [hanlder, wrapCallback(fn, once)]);</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    &#x2F;&#x2F; 目前type事件数&gt;&#x3D;2</span><br><span class="line">    hanlder.push(wrapCallback(fn, once));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 模拟实现removeListener</span><br><span class="line">EventEmitter.prototype.removeListener &#x3D; function(type, listener) &#123;</span><br><span class="line">  const hanlder &#x3D; this.events.get(type);</span><br><span class="line">  if (!hanlder) return;</span><br><span class="line">  if (!Array.isArray(this.events)) &#123;</span><br><span class="line">    if (hanlder.callback &#x3D;&#x3D;&#x3D; listener.callback) this.events.delete(type);</span><br><span class="line">    else return;</span><br><span class="line">  &#125;</span><br><span class="line">  for (let i &#x3D; 0; i &lt; hanlder.length; i++) &#123;</span><br><span class="line">    const item &#x3D; hanlder[i];</span><br><span class="line">    if (item.callback &#x3D;&#x3D;&#x3D; listener.callback) &#123;</span><br><span class="line">      hanlder.splice(i, 1);</span><br><span class="line">      i--;</span><br><span class="line">      if (hanlder.length &#x3D;&#x3D;&#x3D; 1) &#123;</span><br><span class="line">        this.events.set(type, hanlder[0]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 模拟实现once方法</span><br><span class="line">EventEmitter.prototype.once &#x3D; function(type, listener) &#123;</span><br><span class="line">  this.addListener(type, listener, true);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 模拟实现emit方法</span><br><span class="line">EventEmitter.prototype.emit &#x3D; function(type, ...args) &#123;</span><br><span class="line">  const hanlder &#x3D; this.events.get(type);</span><br><span class="line">  if (!hanlder) return;</span><br><span class="line">  if (Array.isArray(hanlder)) &#123;</span><br><span class="line">    hanlder.forEach(item &#x3D;&gt; &#123;</span><br><span class="line">      item.callback.apply(this, args);</span><br><span class="line">      if (item.once) &#123;</span><br><span class="line">        this.removeListener(type, item);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    hanlder.callback.apply(this, args);</span><br><span class="line">    if (hanlder.once) &#123;</span><br><span class="line">      this.events.delete(type);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return true;</span><br><span class="line">&#125;</span><br><span class="line">EventEmitter.prototype.removeAllListeners &#x3D; function(type) &#123;</span><br><span class="line">  const hanlder &#x3D; this.events.get(type);</span><br><span class="line">  if (!hanlder) return;</span><br><span class="line">  this.events.delete(type);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="六、一次性渲染几万条数据数据，页面不算很卡的方法"><a href="#六、一次性渲染几万条数据数据，页面不算很卡的方法" class="headerlink" title="六、一次性渲染几万条数据数据，页面不算很卡的方法"></a>六、一次性渲染几万条数据数据，页面不算很卡的方法</h2><p>几万条数据，假如不是滚动加载，一次性渲染到页面中，单单是节点，都会很慢。下面方法可以渲染出来。但是节点很多，也会比较慢，但是是一次性渲染几万条数据比较好的方式了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">  &#x2F;&#x2F; 插入十万条数据</span><br><span class="line">  const total &#x3D; 100000;</span><br><span class="line">  &#x2F;&#x2F; 一次插入的数据</span><br><span class="line">  const once &#x3D; 20;</span><br><span class="line">  &#x2F;&#x2F; 插入数据需要的次数</span><br><span class="line">  const loopCount &#x3D; Math.ceil(total &#x2F; once);</span><br><span class="line">  let countOfRender &#x3D; 0;</span><br><span class="line">  const ul &#x3D; document.querySelector(&#39;ul&#39;);</span><br><span class="line">  &#x2F;&#x2F; 添加数据的方法</span><br><span class="line">  function add() &#123;</span><br><span class="line">    const fragment &#x3D; document.createDocumentFragment();</span><br><span class="line">    for(let i &#x3D; 0; i &lt; once; i++) &#123;</span><br><span class="line">      const li &#x3D; document.createElement(&#39;li&#39;);</span><br><span class="line">      li.innerText &#x3D; Math.floor(Math.random() * total);</span><br><span class="line">      fragment.appendChild(li);</span><br><span class="line">    &#125;</span><br><span class="line">    ul.appendChild(fragment);</span><br><span class="line">    countOfRender +&#x3D; 1;</span><br><span class="line">    loop();</span><br><span class="line">  &#125;</span><br><span class="line">  function loop() &#123;</span><br><span class="line">    if(countOfRender &lt; loopCount) &#123;</span><br><span class="line">      window.requestAnimationFrame(add);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  loop();</span><br><span class="line">&#125;, 0)</span><br></pre></td></tr></table></figure><p>这个方法使用createDocumentFragment和requestAnimationFrame，将操作切分为一小段一小段执行。</p><h2 id="七、将VirtualDom转化为真实DOM结构"><a href="#七、将VirtualDom转化为真实DOM结构" class="headerlink" title="七、将VirtualDom转化为真实DOM结构"></a>七、将VirtualDom转化为真实DOM结构</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; vnode结构：</span><br><span class="line">&#x2F;&#x2F; &#123;</span><br><span class="line">&#x2F;&#x2F;   tag,</span><br><span class="line">&#x2F;&#x2F;   attrs,</span><br><span class="line">&#x2F;&#x2F;   children,</span><br><span class="line">&#x2F;&#x2F; &#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Virtual DOM &#x3D;&gt; DOM</span><br><span class="line">function render(vnode, container) &#123;</span><br><span class="line">  container.appendChild(_render(vnode));</span><br><span class="line">&#125;</span><br><span class="line">function _render(vnode) &#123;</span><br><span class="line">  &#x2F;&#x2F; 如果是数字类型转化为字符串</span><br><span class="line">  if (typeof vnode &#x3D;&#x3D;&#x3D; &#39;number&#39;) &#123;</span><br><span class="line">    vnode &#x3D; String(vnode);</span><br><span class="line">  &#125;</span><br><span class="line">  &#x2F;&#x2F; 字符串类型直接就是文本节点</span><br><span class="line">  if (typeof vnode &#x3D;&#x3D;&#x3D; &#39;string&#39;) &#123;</span><br><span class="line">    return document.createTextNode(vnode);</span><br><span class="line">  &#125;</span><br><span class="line">  &#x2F;&#x2F; 普通DOM</span><br><span class="line">  const dom &#x3D; document.createElement(vnode.tag);</span><br><span class="line">  if (vnode.attrs) &#123;</span><br><span class="line">    &#x2F;&#x2F; 遍历属性</span><br><span class="line">    Object.keys(vnode.attrs).forEach(key &#x3D;&gt; &#123;</span><br><span class="line">      const value &#x3D; vnode.attrs[key];</span><br><span class="line">      dom.setAttribute(key, value);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  &#x2F;&#x2F; 子数组进行递归操作</span><br><span class="line">  vnode.children.forEach(child &#x3D;&gt; render(child, dom));</span><br><span class="line">  return dom;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="八、字符串解析问题"><a href="#八、字符串解析问题" class="headerlink" title="八、字符串解析问题"></a>八、字符串解析问题</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var a &#x3D; &#123;</span><br><span class="line">    b: 123,</span><br><span class="line">    c: &#39;456&#39;,</span><br><span class="line">    e: &#39;789&#39;,</span><br><span class="line">&#125;</span><br><span class="line">var str&#x3D;&#96;a&#123;a.b&#125;aa&#123;a.c&#125;aa &#123;a.d&#125;aaaa&#96;;</span><br><span class="line">&#x2F;&#x2F; &#x3D;&gt; &#39;a123aa456aa &#123;a.d&#125;aaaa&#39;</span><br></pre></td></tr></table></figure><p>实现函数使得将str字符串中的{}内的变量替换，如果属性不存在保持原样（比如{a.d}） 类似于模版字符串，但有一点出入，实际上原理大差不差</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">const fn1 &#x3D; (str, obj) &#x3D;&gt; &#123;</span><br><span class="line">    let res &#x3D; &#39;&#39;;</span><br><span class="line">    &#x2F;&#x2F; 标志位，标志前面是否有&#123;</span><br><span class="line">    let flag &#x3D; false;</span><br><span class="line">    let start;</span><br><span class="line">    for (let i &#x3D; 0; i &lt; str.length; i++) &#123;</span><br><span class="line">        if (str[i] &#x3D;&#x3D;&#x3D; &#39;&#123;&#39;) &#123;</span><br><span class="line">            flag &#x3D; true;</span><br><span class="line">            start &#x3D; i + 1;</span><br><span class="line">            continue;</span><br><span class="line">        &#125;</span><br><span class="line">        if (!flag) res +&#x3D; str[i];</span><br><span class="line">        else &#123;</span><br><span class="line">            if (str[i] &#x3D;&#x3D;&#x3D; &#39;&#125;&#39;) &#123;</span><br><span class="line">                flag &#x3D; false;</span><br><span class="line">                res +&#x3D; match(str.slice(start, i), obj);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return res;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 对象匹配操作</span><br><span class="line">const match &#x3D; (str, obj) &#x3D;&gt; &#123;</span><br><span class="line">    const keys &#x3D; str.split(&#39;.&#39;).slice(1);</span><br><span class="line">    let index &#x3D; 0;</span><br><span class="line">    let o &#x3D; obj;</span><br><span class="line">    while (index &lt; keys.length) &#123;</span><br><span class="line">        const key &#x3D; keys[index];</span><br><span class="line">        if (!o[key]) &#123;</span><br><span class="line">            return &#96;&#123;$&#123;str&#125;&#125;&#96;;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            o &#x3D; o[key];</span><br><span class="line">        &#125;</span><br><span class="line">        index++;</span><br><span class="line">    &#125;</span><br><span class="line">    return o;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="九、数组扁平化"><a href="#九、数组扁平化" class="headerlink" title="九、数组扁平化"></a>九、数组扁平化</h2><p>数组扁平化是指将一个多维数组变为一个一维数组</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const arr &#x3D; [1, [2, [3, [4, 5]]], 6];</span><br><span class="line">&#x2F;&#x2F; &#x3D;&gt; [1, 2, 3, 4, 5, 6]</span><br></pre></td></tr></table></figure><p>方法一：使用flat()</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const res1 &#x3D; arr.flat(Infinity);</span><br></pre></td></tr></table></figure><p>方法二：正则</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const res3 &#x3D; JSON.parse(&#39;[&#39; + JSON.stringify(arr).replace(&#x2F;\[|\]&#x2F;g, &#39;&#39;) + &#39;]&#39;);</span><br></pre></td></tr></table></figure><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>table-cell绝对是一个现代的布局神器</title>
      <link href="/%5Bobject%20Object%5D/2021/01/07/%E5%B8%83%E5%B1%80%E7%A5%9E%E5%99%A8----displaytable-cell/"/>
      <url>/%5Bobject%20Object%5D/2021/01/07/%E5%B8%83%E5%B1%80%E7%A5%9E%E5%99%A8----displaytable-cell/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>##用float来做布局触发的问题比较多，例如要清除浮动，元素浮动后还会导致该元素脱离文档流，即使你清除float，该元素依旧是脱离文档流。**</p><p>左右布局能用<code>display:inline-block;</code>布局我就用它来布局，但是还是无法完全不使用它，很多布局例如需要靠左和靠右的布局场景下就没办法不去使用float来布局。</p><h2 id="元素两端对齐"><a href="#元素两端对齐" class="headerlink" title="元素两端对齐"></a>元素两端对齐</h2><p>第一个案例是让两个元素分别向左和向右对齐，如果是过去，我一定会用float来实现，但其实用table可以这么做：</p><p><img src="https://ooo.0o0.ooo/2016/08/26/57bfff8e9c83e.png" alt="img"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">  <span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line">          *&#123;</span><br><span class="line"><span class="css">              <span class="selector-tag">box-sizing</span><span class="selector-pseudo">:border-box</span>;</span></span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">          <span class="selector-class">.content</span>&#123;</span></span><br><span class="line">              display: table;</span><br><span class="line"><span class="css">              <span class="selector-tag">border</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-id">#06c</span>;</span></span><br><span class="line"><span class="css">              <span class="selector-tag">padding</span><span class="selector-pseudo">:15px</span> 15<span class="selector-tag">px</span>;</span></span><br><span class="line">              max-width: 1000px;</span><br><span class="line"><span class="css">              <span class="selector-tag">margin</span><span class="selector-pseudo">:10px</span> <span class="selector-tag">auto</span>;</span></span><br><span class="line">              min-width: 320px;</span><br><span class="line"><span class="css">              <span class="selector-tag">width</span><span class="selector-pseudo">:100</span>%;</span></span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">          <span class="selector-class">.box</span>&#123;</span></span><br><span class="line"><span class="css">              <span class="selector-tag">width</span><span class="selector-pseudo">:100px</span>;</span></span><br><span class="line"><span class="css">              <span class="selector-tag">height</span><span class="selector-pseudo">:100px</span>;</span></span><br><span class="line"><span class="css">              <span class="selector-tag">border</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line">              text-align: center;</span><br><span class="line">              display: inline-block;</span><br><span class="line">              font-size: 40px;</span><br><span class="line">              line-height: 100px;</span><br><span class="line">          &#125;</span><br><span class="line"><span class="css">         <span class="selector-class">.right</span>&#123;</span></span><br><span class="line">              text-align: right;</span><br><span class="line">              display: table-cell;</span><br><span class="line">          &#125;</span><br><span class="line"><span class="css">         <span class="selector-class">.left</span>&#123;</span></span><br><span class="line">              text-align: left;</span><br><span class="line">              display: table-cell;</span><br><span class="line">          &#125;     </span><br><span class="line">      <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span>B<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span>A<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="自动平均划分每个小模块，使其一行显示"><a href="#自动平均划分每个小模块，使其一行显示" class="headerlink" title="自动平均划分每个小模块，使其一行显示"></a>自动平均划分每个小模块，使其一行显示</h2><p>第二个案例我们先看看图：</p><p><img src="https://ooo.0o0.ooo/2016/08/26/57c002f096392.png" alt="img"></p><p>遇到上面这种布局，一般会用<code>float</code>来做，或者把每个<code>li</code>设置成<code>display:inline-block;</code>来做，并且都要设置给他们设置一个宽度，而且最痛苦的是5个<code>li</code>如果你设置<code>width:20%;</code>他们一定会掉下来，如果<code>li</code>都设置成<code>display:table-cell；</code>就不会出现这种情况，即使不设置宽度他们也会在一行显示，你在加多一行他也不会掉下来，依旧会在一样显示。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">   &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">   &lt;title&gt;&lt;/title&gt;</span><br><span class="line">   &lt;style <span class="built_in">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><br><span class="line">         *&#123;</span><br><span class="line">           box-sizing:border-box;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">         .content&#123;</span><br><span class="line">             display: table;</span><br><span class="line">             border:1px solid <span class="comment">#06c;</span></span><br><span class="line">             padding:15px 15px;</span><br><span class="line">             max-width: 1000px;</span><br><span class="line">             margin:10px auto;</span><br><span class="line">             min-width:320px;</span><br><span class="line">             width:100%;</span><br><span class="line">         &#125;</span><br><span class="line">        .content ul&#123;</span><br><span class="line">             display: table;</span><br><span class="line">             width:100%;</span><br><span class="line">             padding:0;</span><br><span class="line">             border-right:1px solid <span class="comment">#ccc;</span></span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">        .content ul li&#123;</span><br><span class="line">            display: table-cell;</span><br><span class="line">            border:1px solid <span class="comment">#ccc;</span></span><br><span class="line">            text-align: center;</span><br><span class="line">            height:100px;</span><br><span class="line">            border-right: none;</span><br><span class="line">            line-height: 100px;</span><br><span class="line">         &#125;</span><br><span class="line">   &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">   &lt;div class=<span class="string">&quot;content&quot;</span>&gt;</span><br><span class="line">       &lt;ul&gt;</span><br><span class="line">         &lt;li&gt;1&lt;/li&gt;</span><br><span class="line">         &lt;li&gt;2&lt;/li&gt;</span><br><span class="line">         &lt;li&gt;3&lt;/li&gt;</span><br><span class="line">         &lt;li&gt;4&lt;/li&gt;</span><br><span class="line">         &lt;li&gt;5&lt;/li&gt;</span><br><span class="line">      &lt;/ul&gt;</span><br><span class="line">   &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="图片垂直居中于元素"><a href="#图片垂直居中于元素" class="headerlink" title="图片垂直居中于元素"></a>图片垂直居中于元素</h2><p><img src="https://ooo.0o0.ooo/2016/08/26/57c00719bf4c5.png" alt="img"></p><p>有时候我们需要让图片垂直水平都居中于某个元素，用常规写法比较复杂，但用table-cell则相对简单：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">       &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">       &lt;title&gt;&lt;/title&gt;</span><br><span class="line">       &lt;style <span class="built_in">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><br><span class="line">        *&#123;</span><br><span class="line">            box-sizing:border-box;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">        .content&#123;</span><br><span class="line">            display: table;</span><br><span class="line">            border:1px solid <span class="comment">#06c;</span></span><br><span class="line">            padding:15px 15px;</span><br><span class="line">            max-width: 1000px;</span><br><span class="line">            margin:10px auto;</span><br><span class="line">            min-width:320px;</span><br><span class="line">            width:100%;</span><br><span class="line">         &#125;</span><br><span class="line">        .img-box&#123;</span><br><span class="line">            height:150px;</span><br><span class="line">            width:100px;</span><br><span class="line">            border:1px solid red;</span><br><span class="line">            display: table-cell;</span><br><span class="line">            vertical-align: middle;</span><br><span class="line">            text-align: center;</span><br><span class="line">            background-color: <span class="comment">#4679bd;</span></span><br><span class="line">        &#125;</span><br><span class="line">       &lt;/style&gt;</span><br><span class="line"> &lt;/head&gt;</span><br><span class="line"> &lt;body&gt;</span><br><span class="line">      &lt;div class=<span class="string">&quot;content&quot;</span>&gt;</span><br><span class="line">            &lt;div class=<span class="string">&quot;img-box&quot;</span>&gt;</span><br><span class="line">               ![logo](http://upload-images.jianshu.io/upload_images/1432546-53d1c7f44dc6e873.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;  </span><br><span class="line"> &lt;/body&gt;</span><br><span class="line"> &lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="两box实现等高对齐"><a href="#两box实现等高对齐" class="headerlink" title="两box实现等高对齐"></a>两box实现等高对齐</h2><p>上图中的左侧的box的高度始终跟随右侧的box的高度变化而变化</p><p><img src="https://ooo.0o0.ooo/2016/08/26/57c00c4b0e43b.png" alt="img"></p><p><img src="https://ooo.0o0.ooo/2016/08/26/57c00c820ac9f.png" alt="img"></p><p>上面的案例我故意不对右侧的box设置<code>display:table-cell</code>，只对左侧，所以就会出现左侧跟随右侧高度变化而变化，如果要实现不管两个box哪个高度产生变化另一个就跟随，只需要把右侧的box也设置成<code>display:table－cell</code>就可以实现了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">     &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">     &lt;title&gt;&lt;/title&gt;</span><br><span class="line">     &lt;style <span class="built_in">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><br><span class="line">       *&#123;</span><br><span class="line">           box-sizing:border-box;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .content&#123;</span><br><span class="line">           display: table;</span><br><span class="line">           border:1px solid <span class="comment">#06c;</span></span><br><span class="line">           padding:15px 15px;</span><br><span class="line">           max-width: 1000px;</span><br><span class="line">           margin:10px auto;</span><br><span class="line">           min-width:320px;</span><br><span class="line">           width:100%;</span><br><span class="line">        &#125;</span><br><span class="line">        .img-box&#123;</span><br><span class="line">           height:150px;</span><br><span class="line">           width:100px;</span><br><span class="line">           border:1px solid red;</span><br><span class="line">           display: table-cell;</span><br><span class="line">           vertical-align: middle;</span><br><span class="line">           text-align: center;</span><br><span class="line">           background-color: <span class="comment">#4679bd;</span></span><br><span class="line">        &#125;</span><br><span class="line">        .text-box&#123;</span><br><span class="line">           margin-left: 20px;</span><br><span class="line">           border:1px solid <span class="comment">#ddd;</span></span><br><span class="line">           padding:10px;</span><br><span class="line">        &#125;</span><br><span class="line">     &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div class=<span class="string">&quot;content&quot;</span>&gt;</span><br><span class="line">       &lt;div class=<span class="string">&quot;img-box&quot;</span>&gt;</span><br><span class="line">          ![logo](http://upload-images.jianshu.io/upload_images/1432546-53d1c7f44dc6e873.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</span><br><span class="line">       &lt;/div&gt;</span><br><span class="line">       &lt;div class=<span class="string">&quot;text-box&quot;</span>&gt;</span><br><span class="line">          &lt;span&gt;</span><br><span class="line">              王尼玛和陈尼玛都是年轻有为的骚年，有一天他们相遇了，然后发现都对对方一见钟情后，所以就愉快的生活在了一起。。。。。王尼玛和陈尼玛都是年轻有为的骚年，有一天他们相遇了，然后发现都对对方一见钟情后，所以就愉快的生活在了一起。。。。。王尼玛和陈尼玛都是年轻有为的骚年，有一天他们相遇了，然后发现都对对方一见钟情后，所以就愉快的生活在了一起。。。。。王尼玛和陈尼玛都是年轻有为的骚年，有一天他们相遇了，然后发现都对对方一见钟情后，所以就愉快的生活在了一起。。。。。王尼玛和陈尼玛都是年轻有为的骚年，有一天他们相遇了，然后发现都对对方一见钟情后，所以就愉快的生活在了一起。。。。。王尼玛和陈尼玛都是年轻有为的骚年，有一天他们相遇了，然后发现都对对方一见钟情后，所以就愉快的生活在了一起。。。。。</span><br><span class="line">          &lt;/span&gt;</span><br><span class="line">       &lt;/div&gt;</span><br><span class="line">     &lt;/div&gt; </span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="弹性、响应式布局"><a href="#弹性、响应式布局" class="headerlink" title="弹性、响应式布局"></a>弹性、响应式布局</h2><p><img src="https://ooo.0o0.ooo/2016/08/26/57c00fca9d805.gif" alt="img"></p></img><p>上面的demo中大家只要改变浏览器宽度就会发现他们其实都是会随高度变化自动变化高度的，其实上面内容我大部分没有设置绝对单位，即使设置了也只设置其中一个box另一个就让他去自适应父元素的剩余留下来的宽度，其实布局的时候设置宽度是一件很痛苦的事情，因为除了大量计算有时候可能在多浏览器下还算不准，可能你在chrome设好的宽度在ie下就坑爹了，要写hack才能解决。最后一个案例，据不靠谱的传言faceboox曾经也这么使用过：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">   &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">   &lt;title&gt;&lt;/title&gt;</span><br><span class="line">   &lt;style <span class="built_in">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><br><span class="line">      *&#123;</span><br><span class="line">        box-sizing:border-box;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      .content&#123;</span><br><span class="line">         display: table;</span><br><span class="line">         border:1px solid <span class="comment">#06c;</span></span><br><span class="line">         padding:15px 15px;</span><br><span class="line">         max-width: 1000px;</span><br><span class="line">         margin:10px auto;</span><br><span class="line">         min-width:320px;</span><br><span class="line">         width:100%;</span><br><span class="line">      &#125;</span><br><span class="line">      .left-box&#123;</span><br><span class="line">         <span class="built_in">float</span>:left;</span><br><span class="line">         margin-right: 10px;</span><br><span class="line">         padding-top: 5px;</span><br><span class="line">      &#125;</span><br><span class="line">      .right-box&#123;</span><br><span class="line">         display: table-cell;</span><br><span class="line">         padding:10px;</span><br><span class="line">         border:1px solid <span class="comment">#ccc;</span></span><br><span class="line">         margin-right: 10px;</span><br><span class="line">         vertical-align: top;</span><br><span class="line">      &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">     &lt;div class=<span class="string">&quot;content&quot;</span>&gt;</span><br><span class="line">          &lt;div class=<span class="string">&quot;img-box&quot;</span>&gt;</span><br><span class="line">            ![logo](http://upload-images.jianshu.io/upload_images/1432546-53d1c7f44dc6e873.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">          &lt;div class=<span class="string">&quot;right-box&quot;</span>&gt;</span><br><span class="line">             &lt;span&gt;王尼玛和陈尼玛都是年轻有为的骚年，有一天他们相遇了，然后发现都对对方一见钟情后，所以就愉快的生活在了一起。。。。。王尼玛和陈尼玛都是年轻有为的骚年，有一天他们相遇了，然后发现都对对方一见钟情后，所以就愉快的生活在了一起。。。。。王尼玛和陈尼玛都是年轻有为的骚年，有一天他们相遇了，然后发现都对对方一见钟情后，所以就愉快的生活在了一起。。。。。王尼玛和陈尼玛都是年轻有为的骚年，有一天他们相遇了，然后发现都对对方一见钟情后，所以就愉快的生活在了一起。。。。。王尼玛和陈尼玛都是年轻有为的骚年，有一天他们相遇了，然后发现都对对方一见钟情后，所以就愉快的生活在了一起。。。。。王尼玛和陈尼玛都是年轻有为的骚年，有一天他们相遇了，然后发现都对对方一见钟情后，所以就愉快的生活在了一起。。。。。王尼玛和陈尼玛都是年轻有为的骚年，有一天他们相遇了，然后发现都对对方一见钟情后，所以就愉快的生活在了一起。。。。。王尼玛和陈尼玛都是年轻有为的骚年，有一天他们相遇了，然后发现都对对方一见钟情后，所以就愉快的生活在了一起。。。。。王尼玛和陈尼玛都是年轻有为的骚年，有一天他们相遇了，然后发现都对对方一见钟情后，所以就愉快的生活在了一起。。。。。王尼玛和陈尼玛都是年轻有为的骚年，有一天他们相遇了，然后发现都对对方一见钟情后，所以就愉快的生活在了一起。。。。。王尼玛和陈尼玛都是年轻有为的骚年，有一天他们相遇了，然后发现都对对方一见钟情后，所以就愉快的生活在了一起。。。。。&lt;/span&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;    </span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>移动端布局因为有display:box这等属性，所以table-cell相对就排不上什么大用场，不过在移动端你要用table-cell也不是不可以，根据自己对属性的理解去使用就可以了。</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>欢迎来到大鱼的Blog</title>
      <link href="/%5Bobject%20Object%5D/2021/01/05/Blogl%E5%BC%80%E5%A7%8B%E4%BA%86/"/>
      <url>/%5Bobject%20Object%5D/2021/01/05/Blogl%E5%BC%80%E5%A7%8B%E4%BA%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>刚开始在深圳投简历的时候，担心自己的简历石沉大海，也担心面试不过关，<br>面试的问题答不上来怎么办，担心应聘通过后不能胜任工作，会不会做的不好过不了试用期呀？<br>一系列的疑问，给自己带来了很大的压力，这段日子里，一边重温过去学习的知识，<br>一边投简历，晚上经常学习到很晚，累得不行的时候，小心翼翼的躺下，怕影响到媳妇休息，<br>基本躺下没多久就睡着了。感谢一直在鼓励着自己。</p><blockquote><p>努力一定会有收获的————她说</p></blockquote><p>   IT行业是最开放的行业，相比以前传统的地产行业，基本上没有什么资料是查不到的，也不担心别人不愿意共享知识的烦恼，<br>   若想做项目，就有开放的API可以使用，若想实现某个业务功能，也有相应的库可以使用。刚开始学前端时，<br>   按着<a href="https://space.bilibili.com/72076631">宇哥在学习</a>提供的学习路线,边看视频边用笔记本记录。<br>   后来，自己摸索搭建了一个自己的blog，想将自己项目放在blog上，觉得用Markdown记笔记并导入到blog上，<br>   希望以后能继续坚持做记录，记录自学前端踩得一些坑，记录和媳妇的生活。<br>   未来，想在博客提供一些学习路线或者自己查找的学习资料还有B站好的视频进行推荐。<br>   but,现在的我，找工作要紧，只有努力提升自己的技能，等以后工作稳定了，有空闲时间，就多陪陪媳妇，给她做饭。</p><pre><code>结语：生活和工作，即使两者不能兼得，我也希望让它们可以比例合适，让我们在人世间都可以体面一些的活着。</code></pre><!-- <img src="https://img1.imgtp.com/2023/02/23/AXFFjI76.jpg" style="zoom:60%;"/><head>  <script src='//cdn.jsdelivr.net/npm/@waline/client/dist/Waline.min.js'></script></head><body>  <div id="waline"></div>  <script>    new Waline({      el: '#waline',      serverURL: 'https://comments-api.vercel.app',    });  </script></body> --><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      
        <tags>
            
            <tag> other </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
